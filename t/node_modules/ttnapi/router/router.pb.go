// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/router/router.proto

package router // import "github.com/TheThingsNetwork/api/router"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/api"
import gateway "github.com/TheThingsNetwork/api/gateway"
import protocol "github.com/TheThingsNetwork/api/protocol"
import trace "github.com/TheThingsNetwork/api/trace"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import bytes "bytes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SubscribeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()      { *m = SubscribeRequest{} }
func (*SubscribeRequest) ProtoMessage() {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{0}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

type UplinkMessage struct {
	Payload              []byte              `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	ProtocolMetadata     protocol.RxMetadata `protobuf:"bytes,11,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      gateway.RxMetadata  `protobuf:"bytes,12,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata"`
	Trace                *trace.Trace        `protobuf:"bytes,21,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UplinkMessage) Reset()      { *m = UplinkMessage{} }
func (*UplinkMessage) ProtoMessage() {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{1}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(dst, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UplinkMessage) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UplinkMessage) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *UplinkMessage) GetGatewayMetadata() gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return gateway.RxMetadata{}
}

func (m *UplinkMessage) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type DownlinkMessage struct {
	Payload               []byte                   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message               *protocol.Message        `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	ProtocolConfiguration protocol.TxConfiguration `protobuf:"bytes,11,opt,name=protocol_configuration,json=protocolConfiguration" json:"protocol_configuration"`
	GatewayConfiguration  gateway.TxConfiguration  `protobuf:"bytes,12,opt,name=gateway_configuration,json=gatewayConfiguration" json:"gateway_configuration"`
	Trace                 *trace.Trace             `protobuf:"bytes,21,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *DownlinkMessage) Reset()      { *m = DownlinkMessage{} }
func (*DownlinkMessage) ProtoMessage() {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{2}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(dst, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

func (m *DownlinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DownlinkMessage) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DownlinkMessage) GetProtocolConfiguration() protocol.TxConfiguration {
	if m != nil {
		return m.ProtocolConfiguration
	}
	return protocol.TxConfiguration{}
}

func (m *DownlinkMessage) GetGatewayConfiguration() gateway.TxConfiguration {
	if m != nil {
		return m.GatewayConfiguration
	}
	return gateway.TxConfiguration{}
}

func (m *DownlinkMessage) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type DeviceActivationRequest struct {
	Payload              []byte                                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	ProtocolMetadata     protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      gateway.RxMetadata                                `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata"`
	ActivationMetadata   *protocol.ActivationMetadata                      `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	Trace                *trace.Trace                                      `protobuf:"bytes,31,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DeviceActivationRequest) Reset()      { *m = DeviceActivationRequest{} }
func (*DeviceActivationRequest) ProtoMessage() {}
func (*DeviceActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{3}
}
func (m *DeviceActivationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceActivationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceActivationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceActivationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceActivationRequest.Merge(dst, src)
}
func (m *DeviceActivationRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeviceActivationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceActivationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceActivationRequest proto.InternalMessageInfo

func (m *DeviceActivationRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeviceActivationRequest) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeviceActivationRequest) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *DeviceActivationRequest) GetGatewayMetadata() gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return gateway.RxMetadata{}
}

func (m *DeviceActivationRequest) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type DeviceActivationResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceActivationResponse) Reset()      { *m = DeviceActivationResponse{} }
func (*DeviceActivationResponse) ProtoMessage() {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{4}
}
func (m *DeviceActivationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceActivationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceActivationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceActivationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceActivationResponse.Merge(dst, src)
}
func (m *DeviceActivationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeviceActivationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceActivationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceActivationResponse proto.InternalMessageInfo

// message GatewayStatusRequest is used to request the status of a gateway from
// this Router
type GatewayStatusRequest struct {
	GatewayID            string   `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayStatusRequest) Reset()      { *m = GatewayStatusRequest{} }
func (*GatewayStatusRequest) ProtoMessage() {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{5}
}
func (m *GatewayStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusRequest.Merge(dst, src)
}
func (m *GatewayStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusRequest proto.InternalMessageInfo

func (m *GatewayStatusRequest) GetGatewayID() string {
	if m != nil {
		return m.GatewayID
	}
	return ""
}

type GatewayStatusResponse struct {
	LastSeen             int64          `protobuf:"varint,1,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	Status               gateway.Status `protobuf:"bytes,2,opt,name=status" json:"status"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GatewayStatusResponse) Reset()      { *m = GatewayStatusResponse{} }
func (*GatewayStatusResponse) ProtoMessage() {}
func (*GatewayStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{6}
}
func (m *GatewayStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewayStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewayStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GatewayStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusResponse.Merge(dst, src)
}
func (m *GatewayStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *GatewayStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusResponse proto.InternalMessageInfo

func (m *GatewayStatusResponse) GetLastSeen() int64 {
	if m != nil {
		return m.LastSeen
	}
	return 0
}

func (m *GatewayStatusResponse) GetStatus() gateway.Status {
	if m != nil {
		return m.Status
	}
	return gateway.Status{}
}

// message StatusRequest is used to request the status of this Router
type StatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{7}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

// message Status is the response to the StatusRequest
type Status struct {
	System        *api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system,omitempty"`
	Component     *api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component,omitempty"`
	GatewayStatus *api.Rates          `protobuf:"bytes,11,opt,name=gateway_status,json=gatewayStatus" json:"gateway_status,omitempty"`
	Uplink        *api.Rates          `protobuf:"bytes,12,opt,name=uplink" json:"uplink,omitempty"`
	Downlink      *api.Rates          `protobuf:"bytes,13,opt,name=downlink" json:"downlink,omitempty"`
	Activations   *api.Rates          `protobuf:"bytes,14,opt,name=activations" json:"activations,omitempty"`
	// Connections
	ConnectedGateways    uint32   `protobuf:"varint,21,opt,name=connected_gateways,json=connectedGateways,proto3" json:"connected_gateways,omitempty"`
	ConnectedBrokers     uint32   `protobuf:"varint,22,opt,name=connected_brokers,json=connectedBrokers,proto3" json:"connected_brokers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_router_aa2f64d6f96609d9, []int{8}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSystem() *api.SystemStats {
	if m != nil {
		return m.System
	}
	return nil
}

func (m *Status) GetComponent() *api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return nil
}

func (m *Status) GetGatewayStatus() *api.Rates {
	if m != nil {
		return m.GatewayStatus
	}
	return nil
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *Status) GetConnectedGateways() uint32 {
	if m != nil {
		return m.ConnectedGateways
	}
	return 0
}

func (m *Status) GetConnectedBrokers() uint32 {
	if m != nil {
		return m.ConnectedBrokers
	}
	return 0
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "router.SubscribeRequest")
	golang_proto.RegisterType((*SubscribeRequest)(nil), "router.SubscribeRequest")
	proto.RegisterType((*UplinkMessage)(nil), "router.UplinkMessage")
	golang_proto.RegisterType((*UplinkMessage)(nil), "router.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "router.DownlinkMessage")
	golang_proto.RegisterType((*DownlinkMessage)(nil), "router.DownlinkMessage")
	proto.RegisterType((*DeviceActivationRequest)(nil), "router.DeviceActivationRequest")
	golang_proto.RegisterType((*DeviceActivationRequest)(nil), "router.DeviceActivationRequest")
	proto.RegisterType((*DeviceActivationResponse)(nil), "router.DeviceActivationResponse")
	golang_proto.RegisterType((*DeviceActivationResponse)(nil), "router.DeviceActivationResponse")
	proto.RegisterType((*GatewayStatusRequest)(nil), "router.GatewayStatusRequest")
	golang_proto.RegisterType((*GatewayStatusRequest)(nil), "router.GatewayStatusRequest")
	proto.RegisterType((*GatewayStatusResponse)(nil), "router.GatewayStatusResponse")
	golang_proto.RegisterType((*GatewayStatusResponse)(nil), "router.GatewayStatusResponse")
	proto.RegisterType((*StatusRequest)(nil), "router.StatusRequest")
	golang_proto.RegisterType((*StatusRequest)(nil), "router.StatusRequest")
	proto.RegisterType((*Status)(nil), "router.Status")
	golang_proto.RegisterType((*Status)(nil), "router.Status")
}
func (this *SubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeRequest)
	if !ok {
		that2, ok := that.(SubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkMessage)
	if !ok {
		that2, ok := that.(UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if !this.GatewayMetadata.Equal(&that1.GatewayMetadata) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DownlinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage)
	if !ok {
		that2, ok := that.(DownlinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.ProtocolConfiguration.Equal(&that1.ProtocolConfiguration) {
		return false
	}
	if !this.GatewayConfiguration.Equal(&that1.GatewayConfiguration) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeviceActivationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceActivationRequest)
	if !ok {
		that2, ok := that.(DeviceActivationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if !this.GatewayMetadata.Equal(&that1.GatewayMetadata) {
		return false
	}
	if !this.ActivationMetadata.Equal(that1.ActivationMetadata) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeviceActivationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceActivationResponse)
	if !ok {
		that2, ok := that.(DeviceActivationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GatewayStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStatusRequest)
	if !ok {
		that2, ok := that.(GatewayStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GatewayID != that1.GatewayID {
		return false
	}
	return true
}
func (this *GatewayStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GatewayStatusResponse)
	if !ok {
		that2, ok := that.(GatewayStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LastSeen != that1.LastSeen {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.System.Equal(that1.System) {
		return false
	}
	if !this.Component.Equal(that1.Component) {
		return false
	}
	if !this.GatewayStatus.Equal(that1.GatewayStatus) {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if !this.Activations.Equal(that1.Activations) {
		return false
	}
	if this.ConnectedGateways != that1.ConnectedGateways {
		return false
	}
	if this.ConnectedBrokers != that1.ConnectedBrokers {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Router service

type RouterClient interface {
	// Gateway streams status messages to Router
	GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error)
	// Gateway streams uplink messages to Router
	Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error)
	// Gateway subscribes to downlink messages from Router
	// It is possible to open multiple subscriptions (but not recommended).
	// If you do this, you are responsible for de-duplication of downlink messages.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Router_SubscribeClient, error)
	// Gateway requests device activation
	Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) GatewayStatus(ctx context.Context, opts ...grpc.CallOption) (Router_GatewayStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/router.Router/GatewayStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerGatewayStatusClient{stream}
	return x, nil
}

type Router_GatewayStatusClient interface {
	Send(*gateway.Status) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type routerGatewayStatusClient struct {
	grpc.ClientStream
}

func (x *routerGatewayStatusClient) Send(m *gateway.Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerGatewayStatusClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Uplink(ctx context.Context, opts ...grpc.CallOption) (Router_UplinkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[1], "/router.Router/Uplink", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerUplinkClient{stream}
	return x, nil
}

type Router_UplinkClient interface {
	Send(*UplinkMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type routerUplinkClient struct {
	grpc.ClientStream
}

func (x *routerUplinkClient) Send(m *UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerUplinkClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Router_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[2], "/router.Router/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_SubscribeClient interface {
	Recv() (*DownlinkMessage, error)
	grpc.ClientStream
}

type routerSubscribeClient struct {
	grpc.ClientStream
}

func (x *routerSubscribeClient) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := c.cc.Invoke(ctx, "/router.Router/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	// Gateway streams status messages to Router
	GatewayStatus(Router_GatewayStatusServer) error
	// Gateway streams uplink messages to Router
	Uplink(Router_UplinkServer) error
	// Gateway subscribes to downlink messages from Router
	// It is possible to open multiple subscriptions (but not recommended).
	// If you do this, you are responsible for de-duplication of downlink messages.
	Subscribe(*SubscribeRequest, Router_SubscribeServer) error
	// Gateway requests device activation
	Activate(context.Context, *DeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_GatewayStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).GatewayStatus(&routerGatewayStatusServer{stream})
}

type Router_GatewayStatusServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*gateway.Status, error)
	grpc.ServerStream
}

type routerGatewayStatusServer struct {
	grpc.ServerStream
}

func (x *routerGatewayStatusServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerGatewayStatusServer) Recv() (*gateway.Status, error) {
	m := new(gateway.Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Uplink_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).Uplink(&routerUplinkServer{stream})
}

type Router_UplinkServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*UplinkMessage, error)
	grpc.ServerStream
}

type routerUplinkServer struct {
	grpc.ServerStream
}

func (x *routerUplinkServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerUplinkServer) Recv() (*UplinkMessage, error) {
	m := new(UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Router_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).Subscribe(m, &routerSubscribeServer{stream})
}

type Router_SubscribeServer interface {
	Send(*DownlinkMessage) error
	grpc.ServerStream
}

type routerSubscribeServer struct {
	grpc.ServerStream
}

func (x *routerSubscribeServer) Send(m *DownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/router.Router/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).Activate(ctx, req.(*DeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "router.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Router_Activate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GatewayStatus",
			Handler:       _Router_GatewayStatus_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Uplink",
			Handler:       _Router_Uplink_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Router_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/api/router/router.proto",
}

// Client API for RouterManager service

type RouterManagerClient interface {
	// Gateway owner or network operator requests Gateway status from Router Manager
	// Deprecated: Use monitor API (NOC) instead of this
	GatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatusResponse, error)
	// Network operator requests Router status
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type routerManagerClient struct {
	cc *grpc.ClientConn
}

func NewRouterManagerClient(cc *grpc.ClientConn) RouterManagerClient {
	return &routerManagerClient{cc}
}

func (c *routerManagerClient) GatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatusResponse, error) {
	out := new(GatewayStatusResponse)
	err := c.cc.Invoke(ctx, "/router.RouterManager/GatewayStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/router.RouterManager/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouterManager service

type RouterManagerServer interface {
	// Gateway owner or network operator requests Gateway status from Router Manager
	// Deprecated: Use monitor API (NOC) instead of this
	GatewayStatus(context.Context, *GatewayStatusRequest) (*GatewayStatusResponse, error)
	// Network operator requests Router status
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterRouterManagerServer(s *grpc.Server, srv RouterManagerServer) {
	s.RegisterService(&_RouterManager_serviceDesc, srv)
}

func _RouterManager_GatewayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterManagerServer).GatewayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/router.RouterManager/GatewayStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterManagerServer).GatewayStatus(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouterManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/router.RouterManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouterManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "router.RouterManager",
	HandlerType: (*RouterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GatewayStatus",
			Handler:    _RouterManager_GatewayStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _RouterManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/router/router.proto",
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouter(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Message.Size()))
		n1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n2, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x62
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.GatewayMetadata.Size()))
	n3, err := m.GatewayMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Trace != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Trace.Size()))
		n4, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *DownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouter(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Message.Size()))
		n5, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.ProtocolConfiguration.Size()))
	n6, err := m.ProtocolConfiguration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x62
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.GatewayConfiguration.Size()))
	n7, err := m.GatewayConfiguration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Trace != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Trace.Size()))
		n8, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DeviceActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouter(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Message.Size()))
		n9, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.DevEUI.Size()))
	n10, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x62
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.AppEUI.Size()))
	n11, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n12, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.GatewayMetadata.Size()))
	n13, err := m.GatewayMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if m.ActivationMetadata != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.ActivationMetadata.Size()))
		n14, err := m.ActivationMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Trace != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Trace.Size()))
		n15, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}

func (m *DeviceActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GatewayStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GatewayID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouter(dAtA, i, uint64(len(m.GatewayID)))
		i += copy(dAtA[i:], m.GatewayID)
	}
	return i, nil
}

func (m *GatewayStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewayStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastSeen != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.LastSeen))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintRouter(dAtA, i, uint64(m.Status.Size()))
	n16, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.System != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.System.Size()))
		n17, err := m.System.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.Component != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Component.Size()))
		n18, err := m.Component.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.GatewayStatus != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.GatewayStatus.Size()))
		n19, err := m.GatewayStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.Uplink != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Uplink.Size()))
		n20, err := m.Uplink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Downlink != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Downlink.Size()))
		n21, err := m.Downlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Activations != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.Activations.Size()))
		n22, err := m.Activations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.ConnectedGateways != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.ConnectedGateways))
	}
	if m.ConnectedBrokers != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRouter(dAtA, i, uint64(m.ConnectedBrokers))
	}
	return i, nil
}

func encodeVarintRouter(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedSubscribeRequest(r randyRouter, easy bool) *SubscribeRequest {
	this := &SubscribeRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUplinkMessage(r randyRouter, easy bool) *UplinkMessage {
	this := &UplinkMessage{}
	v1 := r.Intn(100)
	this.Payload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v2 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v2
	v3 := gateway.NewPopulatedRxMetadata(r, easy)
	this.GatewayMetadata = *v3
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkMessage(r randyRouter, easy bool) *DownlinkMessage {
	this := &DownlinkMessage{}
	v4 := r.Intn(100)
	this.Payload = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v5 := protocol.NewPopulatedTxConfiguration(r, easy)
	this.ProtocolConfiguration = *v5
	v6 := gateway.NewPopulatedTxConfiguration(r, easy)
	this.GatewayConfiguration = *v6
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceActivationRequest(r randyRouter, easy bool) *DeviceActivationRequest {
	this := &DeviceActivationRequest{}
	v7 := r.Intn(100)
	this.Payload = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v8 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.DevEUI = *v8
	v9 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppEUI = *v9
	v10 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v10
	v11 := gateway.NewPopulatedRxMetadata(r, easy)
	this.GatewayMetadata = *v11
	if r.Intn(10) != 0 {
		this.ActivationMetadata = protocol.NewPopulatedActivationMetadata(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceActivationResponse(r randyRouter, easy bool) *DeviceActivationResponse {
	this := &DeviceActivationResponse{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayStatusRequest(r randyRouter, easy bool) *GatewayStatusRequest {
	this := &GatewayStatusRequest{}
	this.GatewayID = string(randStringRouter(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGatewayStatusResponse(r randyRouter, easy bool) *GatewayStatusResponse {
	this := &GatewayStatusResponse{}
	this.LastSeen = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LastSeen *= -1
	}
	v12 := gateway.NewPopulatedStatus(r, easy)
	this.Status = *v12
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyRouter, easy bool) *StatusRequest {
	this := &StatusRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus(r randyRouter, easy bool) *Status {
	this := &Status{}
	if r.Intn(10) != 0 {
		this.System = api.NewPopulatedSystemStats(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Component = api.NewPopulatedComponentStats(r, easy)
	}
	if r.Intn(10) != 0 {
		this.GatewayStatus = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Uplink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Downlink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Activations = api.NewPopulatedRates(r, easy)
	}
	this.ConnectedGateways = uint32(r.Uint32())
	this.ConnectedBrokers = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRouter interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRouter(r randyRouter) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRouter(r randyRouter) string {
	v13 := r.Intn(100)
	tmps := make([]rune, v13)
	for i := 0; i < v13; i++ {
		tmps[i] = randUTF8RuneRouter(r)
	}
	return string(tmps)
}
func randUnrecognizedRouter(r randyRouter, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRouter(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRouter(dAtA []byte, r randyRouter, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(key))
		v14 := r.Int63()
		if r.Intn(2) == 0 {
			v14 *= -1
		}
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(v14))
	case 1:
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRouter(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRouter(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	l = m.ProtocolMetadata.Size()
	n += 1 + l + sovRouter(uint64(l))
	l = m.GatewayMetadata.Size()
	n += 1 + l + sovRouter(uint64(l))
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	l = m.ProtocolConfiguration.Size()
	n += 1 + l + sovRouter(uint64(l))
	l = m.GatewayConfiguration.Size()
	n += 1 + l + sovRouter(uint64(l))
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovRouter(uint64(l))
	l = m.AppEUI.Size()
	n += 1 + l + sovRouter(uint64(l))
	l = m.ProtocolMetadata.Size()
	n += 2 + l + sovRouter(uint64(l))
	l = m.GatewayMetadata.Size()
	n += 2 + l + sovRouter(uint64(l))
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GatewayStatusRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovRouter(uint64(l))
	}
	return n
}

func (m *GatewayStatusResponse) Size() (n int) {
	var l int
	_ = l
	if m.LastSeen != 0 {
		n += 1 + sovRouter(uint64(m.LastSeen))
	}
	l = m.Status.Size()
	n += 1 + l + sovRouter(uint64(l))
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.System != nil {
		l = m.System.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Component != nil {
		l = m.Component.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.GatewayStatus != nil {
		l = m.GatewayStatus.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovRouter(uint64(l))
	}
	if m.ConnectedGateways != 0 {
		n += 2 + sovRouter(uint64(m.ConnectedGateways))
	}
	if m.ConnectedBrokers != 0 {
		n += 2 + sovRouter(uint64(m.ConnectedBrokers))
	}
	return n
}

func sovRouter(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRouter(x uint64) (n int) {
	return sovRouter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UplinkMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(strings.Replace(this.GatewayMetadata.String(), "RxMetadata", "gateway.RxMetadata", 1), `&`, ``, 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`ProtocolConfiguration:` + strings.Replace(strings.Replace(this.ProtocolConfiguration.String(), "TxConfiguration", "protocol.TxConfiguration", 1), `&`, ``, 1) + `,`,
		`GatewayConfiguration:` + strings.Replace(strings.Replace(this.GatewayConfiguration.String(), "TxConfiguration", "gateway.TxConfiguration", 1), `&`, ``, 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceActivationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceActivationRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(strings.Replace(this.GatewayMetadata.String(), "RxMetadata", "gateway.RxMetadata", 1), `&`, ``, 1) + `,`,
		`ActivationMetadata:` + strings.Replace(fmt.Sprintf("%v", this.ActivationMetadata), "ActivationMetadata", "protocol.ActivationMetadata", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceActivationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceActivationResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayStatusRequest{`,
		`GatewayID:` + fmt.Sprintf("%v", this.GatewayID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GatewayStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GatewayStatusResponse{`,
		`LastSeen:` + fmt.Sprintf("%v", this.LastSeen) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "Status", "gateway.Status", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`System:` + strings.Replace(fmt.Sprintf("%v", this.System), "SystemStats", "api.SystemStats", 1) + `,`,
		`Component:` + strings.Replace(fmt.Sprintf("%v", this.Component), "ComponentStats", "api.ComponentStats", 1) + `,`,
		`GatewayStatus:` + strings.Replace(fmt.Sprintf("%v", this.GatewayStatus), "Rates", "api.Rates", 1) + `,`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "Rates", "api.Rates", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "Rates", "api.Rates", 1) + `,`,
		`Activations:` + strings.Replace(fmt.Sprintf("%v", this.Activations), "Rates", "api.Rates", 1) + `,`,
		`ConnectedGateways:` + fmt.Sprintf("%v", this.ConnectedGateways) + `,`,
		`ConnectedBrokers:` + fmt.Sprintf("%v", this.ConnectedBrokers) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRouter(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewayStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewayStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewayStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeen", wireType)
			}
			m.LastSeen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeen |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.System == nil {
				m.System = &api.SystemStats{}
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Component == nil {
				m.Component = &api.ComponentStats{}
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GatewayStatus == nil {
				m.GatewayStatus = &api.Rates{}
			}
			if err := m.GatewayStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRouter
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedGateways", wireType)
			}
			m.ConnectedGateways = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedGateways |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedBrokers", wireType)
			}
			m.ConnectedBrokers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedBrokers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRouter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRouter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRouter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRouter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRouter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRouter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRouter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRouter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRouter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRouter   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/router/router.proto", fileDescriptor_router_aa2f64d6f96609d9)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/router/router.proto", fileDescriptor_router_aa2f64d6f96609d9)
}

var fileDescriptor_router_aa2f64d6f96609d9 = []byte{
	// 1063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x3f, 0x6c, 0xdb, 0xc6,
	0x17, 0xe6, 0xe9, 0x97, 0x1f, 0x6d, 0x9d, 0x2d, 0xff, 0x39, 0x5b, 0xb6, 0x2a, 0xa7, 0x27, 0x43,
	0x43, 0xe0, 0x22, 0x31, 0x55, 0x3b, 0x28, 0x8a, 0x76, 0xaa, 0x65, 0x19, 0x86, 0x81, 0xba, 0x30,
	0x68, 0xa7, 0x43, 0x51, 0xc0, 0x38, 0x51, 0x17, 0x9a, 0xb0, 0xc5, 0x63, 0x79, 0x27, 0x3b, 0xde,
	0x32, 0xa6, 0x5b, 0xba, 0x75, 0x2a, 0x3a, 0xa6, 0x9d, 0x32, 0x66, 0xcc, 0xe8, 0x31, 0x63, 0xd0,
	0xc1, 0x88, 0xa8, 0x25, 0xe8, 0x50, 0x64, 0xcc, 0x58, 0xf0, 0xee, 0x48, 0x5a, 0x92, 0x1d, 0xa7,
	0x45, 0xba, 0x48, 0xe4, 0xfb, 0xbe, 0xf7, 0xe9, 0xdd, 0x77, 0xef, 0xee, 0x09, 0xde, 0x75, 0x3d,
	0x71, 0xd0, 0x69, 0x5a, 0x0e, 0x6b, 0xd7, 0xf6, 0x0e, 0xe8, 0xde, 0x81, 0xe7, 0xbb, 0xfc, 0x1b,
	0x2a, 0x4e, 0x58, 0x78, 0x58, 0x23, 0x81, 0x57, 0x0b, 0x59, 0x47, 0xd0, 0x50, 0x7f, 0x59, 0x41,
	0xc8, 0x04, 0x43, 0xa6, 0x7a, 0x2b, 0x2f, 0xb8, 0x8c, 0xb9, 0x47, 0xb4, 0x26, 0xa3, 0xcd, 0xce,
	0xfd, 0x1a, 0x6d, 0x07, 0xe2, 0x54, 0x91, 0xca, 0xcb, 0x17, 0x94, 0x5d, 0xe6, 0xb2, 0x8c, 0x15,
	0xbf, 0xc9, 0x17, 0xf9, 0xa4, 0xe9, 0x9f, 0x5c, 0x57, 0x08, 0x09, 0x3c, 0x4d, 0xfd, 0xfc, 0x3a,
	0xaa, 0xa4, 0x39, 0xec, 0x28, 0x7d, 0xd0, 0x89, 0x9f, 0x5d, 0x97, 0xe8, 0x12, 0x41, 0x4f, 0xc8,
	0x69, 0xf2, 0xad, 0xd3, 0x56, 0xae, 0x4b, 0x13, 0x21, 0x71, 0xa8, 0xfa, 0x54, 0x29, 0x55, 0x04,
	0xa7, 0x76, 0x3b, 0x4d, 0xee, 0x84, 0x5e, 0x93, 0xda, 0xf4, 0x87, 0x0e, 0xe5, 0xa2, 0xfa, 0x63,
	0x0e, 0x16, 0xee, 0x05, 0x47, 0x9e, 0x7f, 0xb8, 0x4d, 0x39, 0x27, 0x2e, 0x45, 0x25, 0x38, 0x12,
	0x90, 0xd3, 0x23, 0x46, 0x5a, 0x25, 0xb0, 0x08, 0x96, 0xc6, 0xed, 0xe4, 0x15, 0xdd, 0x86, 0x23,
	0x6d, 0x45, 0x2a, 0xe5, 0x16, 0xc1, 0xd2, 0xd8, 0xea, 0xb4, 0x95, 0xae, 0x45, 0x67, 0xdb, 0x09,
	0x03, 0x6d, 0xc2, 0xe9, 0x04, 0xdc, 0x6f, 0x53, 0x41, 0x5a, 0x44, 0x90, 0xd2, 0x98, 0x4c, 0x9b,
	0xcd, 0xd2, 0xec, 0x07, 0xdb, 0x1a, 0xab, 0xdf, 0x38, 0x3b, 0xaf, 0x18, 0xf6, 0x54, 0x02, 0x25,
	0x71, 0xd4, 0x80, 0x53, 0x7a, 0xe5, 0x99, 0xce, 0xb8, 0xd4, 0x99, 0xb1, 0x12, 0x4b, 0x86, 0x64,
	0x26, 0x35, 0x92, 0xaa, 0x54, 0xe1, 0xff, 0xa5, 0x15, 0xa5, 0xa2, 0x4c, 0x1d, 0xb7, 0x94, 0x31,
	0x7b, 0xf1, 0xa7, 0xad, 0xa0, 0xea, 0x6f, 0x39, 0x38, 0xd9, 0x60, 0x27, 0xfe, 0x7f, 0xe0, 0xc6,
	0xb7, 0x70, 0x2e, 0x75, 0xc3, 0x61, 0xfe, 0x7d, 0xcf, 0xed, 0x84, 0x44, 0x78, 0xcc, 0xd7, 0x96,
	0x7c, 0x94, 0xe5, 0xee, 0x3d, 0x58, 0xbf, 0x48, 0xd0, 0x0b, 0x2a, 0x26, 0x78, 0x1f, 0x88, 0x76,
	0x61, 0x31, 0x31, 0xa7, 0x5f, 0x56, 0x39, 0x54, 0x4a, 0x1d, 0xba, 0x5c, 0x75, 0x56, 0xc3, 0xfd,
	0xa2, 0xef, 0xe3, 0xd5, 0x2f, 0x37, 0xe0, 0x7c, 0x83, 0x1e, 0x7b, 0x0e, 0x5d, 0x73, 0x84, 0x77,
	0x2c, 0x13, 0x75, 0x4f, 0x7d, 0x28, 0xcf, 0xbe, 0x87, 0x23, 0x2d, 0x7a, 0xbc, 0x4f, 0x3b, 0x9e,
	0x34, 0x69, 0xbc, 0xbe, 0x1e, 0xd7, 0xfc, 0xc7, 0x79, 0xe5, 0x9d, 0xad, 0x2f, 0x84, 0x5f, 0x73,
	0x58, 0x48, 0x6b, 0xe2, 0x34, 0xa0, 0xdc, 0x6a, 0xd0, 0xe3, 0x8d, 0x7b, 0x5b, 0xd1, 0x79, 0xc5,
	0x54, 0x4f, 0xb6, 0xd9, 0xa2, 0xc7, 0x1b, 0x1d, 0x2f, 0x56, 0x27, 0x41, 0x20, 0xd5, 0xc7, 0xff,
	0xb5, 0xfa, 0x5a, 0x10, 0x68, 0x75, 0xf5, 0x64, 0x9b, 0x24, 0x08, 0x62, 0xf5, 0x4b, 0xbb, 0xbf,
	0xf8, 0x81, 0xba, 0x7f, 0xee, 0x1f, 0x77, 0xff, 0x36, 0x9c, 0x21, 0xe9, 0x36, 0x65, 0x42, 0xf3,
	0x52, 0xe8, 0x66, 0x56, 0x50, 0xb6, 0x97, 0x49, 0xaa, 0x8d, 0xc8, 0x50, 0x2c, 0x6b, 0x90, 0xca,
	0xd5, 0x0d, 0x52, 0x86, 0xa5, 0xe1, 0xfe, 0xe0, 0x01, 0xf3, 0x39, 0xad, 0x36, 0xe0, 0xec, 0xa6,
	0xaa, 0x70, 0x57, 0x10, 0xd1, 0xe1, 0x49, 0xe3, 0xdc, 0x81, 0x30, 0x59, 0xac, 0xa7, 0x7a, 0x27,
	0x5f, 0x2f, 0x44, 0xe7, 0x95, 0xbc, 0x66, 0x6f, 0x35, 0xec, 0xbc, 0x26, 0x6c, 0xb5, 0xaa, 0x0e,
	0x2c, 0x0e, 0xa8, 0x28, 0x79, 0xb4, 0x00, 0xf3, 0x47, 0x84, 0x8b, 0x7d, 0x4e, 0xa9, 0x2f, 0x55,
	0xfe, 0x67, 0x8f, 0xc6, 0x81, 0x5d, 0x4a, 0x7d, 0xb4, 0x0c, 0x4d, 0x2e, 0xe9, 0xba, 0x03, 0x27,
	0x53, 0x1b, 0x95, 0x8a, 0xb6, 0x50, 0x93, 0xaa, 0x93, 0xb0, 0xd0, 0x57, 0x63, 0xf5, 0xaf, 0x1c,
	0x34, 0x55, 0x04, 0x2d, 0x41, 0x93, 0x9f, 0x72, 0x41, 0xdb, 0xf2, 0x47, 0xc6, 0x56, 0xa7, 0xac,
	0x78, 0x1c, 0xec, 0xca, 0x50, 0x4c, 0xe1, 0xb6, 0xc6, 0xd1, 0x0a, 0xcc, 0x3b, 0xac, 0x1d, 0x30,
	0x9f, 0xfa, 0x42, 0xff, 0xee, 0x8c, 0x24, 0xaf, 0x27, 0x51, 0xc5, 0xcf, 0x58, 0x68, 0x05, 0x4e,
	0x24, 0x5e, 0xe8, 0x7a, 0xd5, 0x4d, 0x01, 0x65, 0x9e, 0x4d, 0x04, 0xe5, 0x76, 0xc1, 0xbd, 0xb8,
	0x7e, 0x54, 0x85, 0x66, 0x47, 0x5e, 0xe5, 0xfa, 0xf4, 0x5f, 0xa4, 0x6a, 0x04, 0xdd, 0x82, 0xa3,
	0x2d, 0x7d, 0xc5, 0x95, 0x0a, 0x43, 0xac, 0x14, 0x43, 0x77, 0xe0, 0x58, 0xb6, 0xf1, 0xbc, 0x34,
	0x31, 0x44, 0xbd, 0x08, 0xa3, 0x65, 0x88, 0x1c, 0xe6, 0xfb, 0xd4, 0x11, 0xb4, 0xb5, 0xaf, 0x8b,
	0xe2, 0xb2, 0xdf, 0x0b, 0xf6, 0x74, 0x8a, 0xe8, 0xdd, 0xe2, 0xe8, 0x36, 0xcc, 0x82, 0xfb, 0xcd,
	0x90, 0x1d, 0xd2, 0x90, 0xcb, 0xae, 0x2e, 0xd8, 0x53, 0x29, 0x50, 0x57, 0xf1, 0xd5, 0xc7, 0x39,
	0x68, 0xda, 0x72, 0xb4, 0xa3, 0x2f, 0x61, 0xa1, 0x6f, 0xc7, 0xd1, 0xe0, 0xe6, 0x95, 0xe7, 0x2c,
	0x35, 0xfd, 0xad, 0x64, 0xae, 0x5b, 0x1b, 0xf1, 0xf4, 0x5f, 0x02, 0xe8, 0x0b, 0x68, 0xaa, 0x39,
	0x87, 0x8a, 0x96, 0xfe, 0xdf, 0xd0, 0x37, 0xf7, 0xde, 0x91, 0xfa, 0x15, 0xcc, 0xa7, 0x73, 0x13,
	0x95, 0x92, 0xec, 0xc1, 0x51, 0x5a, 0x9e, 0x4f, 0x90, 0x81, 0x19, 0xf2, 0x29, 0x40, 0xdb, 0x70,
	0x54, 0x1f, 0x03, 0x8a, 0x2a, 0x29, 0xed, 0xf2, 0xeb, 0xb3, 0xbc, 0x78, 0x35, 0x41, 0x35, 0xf8,
	0xea, 0x4f, 0x00, 0x16, 0x94, 0x25, 0xdb, 0xc4, 0x27, 0x2e, 0x0d, 0xd1, 0xd7, 0x83, 0xce, 0xdc,
	0x4c, 0x44, 0x2e, 0x3b, 0x68, 0xe5, 0x8f, 0xaf, 0x40, 0xf5, 0x01, 0x5a, 0x85, 0xf9, 0x4d, 0x2a,
	0xb4, 0x52, 0x6a, 0x57, 0xbf, 0xc4, 0x44, 0x7f, 0xb8, 0xfe, 0x27, 0x38, 0xeb, 0x62, 0xf0, 0xa2,
	0x8b, 0xc1, 0xcb, 0x2e, 0x36, 0x5e, 0x75, 0xb1, 0xf1, 0xba, 0x8b, 0x8d, 0x37, 0x5d, 0x6c, 0xbc,
	0xed, 0x62, 0xf0, 0x30, 0xc2, 0xe0, 0x51, 0x84, 0x8d, 0x27, 0x11, 0x06, 0x4f, 0x23, 0x6c, 0x3c,
	0x8b, 0xb0, 0xf1, 0x3c, 0xc2, 0xc6, 0x59, 0x84, 0xc1, 0x8b, 0x08, 0x83, 0x97, 0x11, 0x36, 0x5e,
	0x45, 0x18, 0xbc, 0x8e, 0xb0, 0xf1, 0x26, 0xc2, 0xe0, 0x6d, 0x84, 0x8d, 0x87, 0x3d, 0x6c, 0x3c,
	0xea, 0x61, 0xf0, 0xb8, 0x87, 0x8d, 0x9f, 0x7b, 0x18, 0xfc, 0xda, 0xc3, 0xc6, 0x93, 0x1e, 0x36,
	0x9e, 0xf6, 0x30, 0x78, 0xd6, 0xc3, 0xe0, 0x79, 0x0f, 0x03, 0x58, 0x61, 0xa1, 0x6b, 0x89, 0x03,
	0x2a, 0xe4, 0x35, 0xed, 0xab, 0x6b, 0x5a, 0xb6, 0xa9, 0x2a, 0xaf, 0x3e, 0xa6, 0x8c, 0xda, 0x89,
	0x37, 0x75, 0x07, 0x7c, 0x77, 0xeb, 0xfd, 0xfe, 0x5a, 0xfe, 0x9e, 0x5b, 0x18, 0x44, 0xad, 0xb5,
	0x9d, 0x2d, 0x4b, 0x89, 0x35, 0x4d, 0xd9, 0x23, 0x77, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x43,
	0x98, 0x69, 0x1c, 0xa9, 0x0a, 0x00, 0x00,
}
