/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: github.com/TheThingsNetwork/api/protocol/lorawan/device.proto */

#ifndef PROTOBUF_C_github_2ecom_2fTheThingsNetwork_2fapi_2fprotocol_2florawan_2fdevice_2eproto__INCLUDED
#define PROTOBUF_C_github_2ecom_2fTheThingsNetwork_2fapi_2fprotocol_2florawan_2fdevice_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/empty.pb-c.h"
#include "github.com/gogo/protobuf/gogoproto/gogo.pb-c.h"

typedef struct _Lorawan__DeviceIdentifier Lorawan__DeviceIdentifier;
typedef struct _Lorawan__Device Lorawan__Device;


/* --- enums --- */


/* --- messages --- */

struct  _Lorawan__DeviceIdentifier
{
  ProtobufCMessage base;
  /*
   * The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
   */
  ProtobufCBinaryData app_eui;
  /*
   * The DevEUI is a unique, 8 byte identifier for the device.
   */
  ProtobufCBinaryData dev_eui;
};
#define LORAWAN__DEVICE_IDENTIFIER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lorawan__device_identifier__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _Lorawan__Device
{
  ProtobufCMessage base;
  /*
   * The AppEUI is a unique, 8 byte identifier for the application a device belongs to.
   */
  ProtobufCBinaryData app_eui;
  /*
   * The DevEUI is a unique, 8 byte identifier for the device.
   */
  ProtobufCBinaryData dev_eui;
  /*
   * The AppID is a unique identifier for the application a device belongs to. It can contain lowercase letters, numbers, - and _.
   */
  char *app_id;
  /*
   * The DevID is a unique identifier for the device. It can contain lowercase letters, numbers, - and _.
   */
  char *dev_id;
  /*
   * The DevAddr is a dynamic, 4 byte session address for the device.
   */
  ProtobufCBinaryData dev_addr;
  /*
   * The NwkSKey is a 16 byte session key that is known by the device and the network. It is used for routing and MAC related functionality.
   * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
   */
  ProtobufCBinaryData nwk_s_key;
  /*
   * The AppSKey is a 16 byte session key that is known by the device and the application. It is used for payload encryption.
   * This key is negotiated during the OTAA join procedure, or statically configured using ABP.
   */
  ProtobufCBinaryData app_s_key;
  /*
   * The AppKey is a 16 byte static key that is known by the device and the application. It is used for negotiating session keys (OTAA).
   */
  ProtobufCBinaryData app_key;
  /*
   * FCntUp is the uplink frame counter for a device session.
   */
  uint32_t f_cnt_up;
  /*
   * FCntDown is the downlink frame counter for a device session.
   */
  uint32_t f_cnt_down;
  /*
   * The DisableFCntCheck option disables the frame counter check. Disabling this makes the device vulnerable to replay attacks, but makes ABP slightly easier.
   */
  protobuf_c_boolean disable_f_cnt_check;
  /*
   * The Uses32BitFCnt option indicates that the device keeps track of full 32 bit frame counters. As only the 16 lsb are actually transmitted, the 16 msb will have to be inferred.
   */
  protobuf_c_boolean uses32_bit_f_cnt;
  /*
   * The ActivationContstraints are used to allocate a device address for a device (comma-separated).
   * There are different prefixes for `otaa`, `abp`, `world`, `local`, `private`, `testing`.
   */
  char *activation_constraints;
  /*
   * The DevNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
   */
  size_t n_used_dev_nonces;
  ProtobufCBinaryData *used_dev_nonces;
  /*
   * The AppNonces that have been used in joins. This field is read-only. Reset the nonces by changing the AppKey.
   */
  size_t n_used_app_nonces;
  ProtobufCBinaryData *used_app_nonces;
  /*
   * When the device was last seen (Unix nanoseconds)
   */
  int64_t last_seen;
};
#define LORAWAN__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lorawan__device__descriptor) \
    , {0,NULL}, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, {0,NULL}, {0,NULL}, {0,NULL}, 0, 0, 0, 0, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0 }


/* Lorawan__DeviceIdentifier methods */
void   lorawan__device_identifier__init
                     (Lorawan__DeviceIdentifier         *message);
size_t lorawan__device_identifier__get_packed_size
                     (const Lorawan__DeviceIdentifier   *message);
size_t lorawan__device_identifier__pack
                     (const Lorawan__DeviceIdentifier   *message,
                      uint8_t             *out);
size_t lorawan__device_identifier__pack_to_buffer
                     (const Lorawan__DeviceIdentifier   *message,
                      ProtobufCBuffer     *buffer);
Lorawan__DeviceIdentifier *
       lorawan__device_identifier__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lorawan__device_identifier__free_unpacked
                     (Lorawan__DeviceIdentifier *message,
                      ProtobufCAllocator *allocator);
/* Lorawan__Device methods */
void   lorawan__device__init
                     (Lorawan__Device         *message);
size_t lorawan__device__get_packed_size
                     (const Lorawan__Device   *message);
size_t lorawan__device__pack
                     (const Lorawan__Device   *message,
                      uint8_t             *out);
size_t lorawan__device__pack_to_buffer
                     (const Lorawan__Device   *message,
                      ProtobufCBuffer     *buffer);
Lorawan__Device *
       lorawan__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lorawan__device__free_unpacked
                     (Lorawan__Device *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Lorawan__DeviceIdentifier_Closure)
                 (const Lorawan__DeviceIdentifier *message,
                  void *closure_data);
typedef void (*Lorawan__Device_Closure)
                 (const Lorawan__Device *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Lorawan__DeviceManager_Service Lorawan__DeviceManager_Service;
struct _Lorawan__DeviceManager_Service
{
  ProtobufCService base;
  void (*get_device)(Lorawan__DeviceManager_Service *service,
                     const Lorawan__DeviceIdentifier *input,
                     Lorawan__Device_Closure closure,
                     void *closure_data);
  void (*set_device)(Lorawan__DeviceManager_Service *service,
                     const Lorawan__Device *input,
                     Google__Protobuf__Empty_Closure closure,
                     void *closure_data);
  void (*delete_device)(Lorawan__DeviceManager_Service *service,
                        const Lorawan__DeviceIdentifier *input,
                        Google__Protobuf__Empty_Closure closure,
                        void *closure_data);
};
typedef void (*Lorawan__DeviceManager_ServiceDestroy)(Lorawan__DeviceManager_Service *);
void lorawan__device_manager__init (Lorawan__DeviceManager_Service *service,
                                    Lorawan__DeviceManager_ServiceDestroy destroy);
#define LORAWAN__DEVICE_MANAGER__BASE_INIT \
    { &lorawan__device_manager__descriptor, protobuf_c_service_invoke_internal, NULL }
#define LORAWAN__DEVICE_MANAGER__INIT(function_prefix__) \
    { LORAWAN__DEVICE_MANAGER__BASE_INIT,\
      function_prefix__ ## get_device,\
      function_prefix__ ## set_device,\
      function_prefix__ ## delete_device  }
void lorawan__device_manager__get_device(ProtobufCService *service,
                                         const Lorawan__DeviceIdentifier *input,
                                         Lorawan__Device_Closure closure,
                                         void *closure_data);
void lorawan__device_manager__set_device(ProtobufCService *service,
                                         const Lorawan__Device *input,
                                         Google__Protobuf__Empty_Closure closure,
                                         void *closure_data);
void lorawan__device_manager__delete_device(ProtobufCService *service,
                                            const Lorawan__DeviceIdentifier *input,
                                            Google__Protobuf__Empty_Closure closure,
                                            void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor lorawan__device_identifier__descriptor;
extern const ProtobufCMessageDescriptor lorawan__device__descriptor;
extern const ProtobufCServiceDescriptor lorawan__device_manager__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_github_2ecom_2fTheThingsNetwork_2fapi_2fprotocol_2florawan_2fdevice_2eproto__INCLUDED */
