// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/broker/broker.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Broker_DownlinkOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// String that identifies this downlink option in the Router
  var identifier: String {
    get {return _storage._identifier}
    set {_uniqueStorage()._identifier = newValue}
  }

  /// ID of the gateway where this downlink should be sent
  var gatewayID: String {
    get {return _storage._gatewayID}
    set {_uniqueStorage()._gatewayID = newValue}
  }

  /// Score of this downlink option. Lower is better.
  var score: UInt32 {
    get {return _storage._score}
    set {_uniqueStorage()._score = newValue}
  }

  /// deadline time at server represented as Unix nanoseconds
  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  var protocolConfiguration: Protocol_TxConfiguration {
    get {return _storage._protocolConfiguration ?? Protocol_TxConfiguration()}
    set {_uniqueStorage()._protocolConfiguration = newValue}
  }
  /// Returns true if `protocolConfiguration` has been explicitly set.
  var hasProtocolConfiguration: Bool {return _storage._protocolConfiguration != nil}
  /// Clears the value of `protocolConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearProtocolConfiguration() {_uniqueStorage()._protocolConfiguration = nil}

  var gatewayConfiguration: Gateway_TxConfiguration {
    get {return _storage._gatewayConfiguration ?? Gateway_TxConfiguration()}
    set {_uniqueStorage()._gatewayConfiguration = newValue}
  }
  /// Returns true if `gatewayConfiguration` has been explicitly set.
  var hasGatewayConfiguration: Bool {return _storage._gatewayConfiguration != nil}
  /// Clears the value of `gatewayConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearGatewayConfiguration() {_uniqueStorage()._gatewayConfiguration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// received from the Router
struct Broker_UplinkMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  var protocolMetadata: Protocol_RxMetadata {
    get {return _storage._protocolMetadata ?? Protocol_RxMetadata()}
    set {_uniqueStorage()._protocolMetadata = newValue}
  }
  /// Returns true if `protocolMetadata` has been explicitly set.
  var hasProtocolMetadata: Bool {return _storage._protocolMetadata != nil}
  /// Clears the value of `protocolMetadata`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMetadata() {_uniqueStorage()._protocolMetadata = nil}

  var gatewayMetadata: Gateway_RxMetadata {
    get {return _storage._gatewayMetadata ?? Gateway_RxMetadata()}
    set {_uniqueStorage()._gatewayMetadata = newValue}
  }
  /// Returns true if `gatewayMetadata` has been explicitly set.
  var hasGatewayMetadata: Bool {return _storage._gatewayMetadata != nil}
  /// Clears the value of `gatewayMetadata`. Subsequent reads from it will return its default value.
  mutating func clearGatewayMetadata() {_uniqueStorage()._gatewayMetadata = nil}

  var downlinkOptions: [Broker_DownlinkOption] {
    get {return _storage._downlinkOptions}
    set {_uniqueStorage()._downlinkOptions = newValue}
  }

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// received from the Handler, sent to the Router, used as Template
struct Broker_DownlinkMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  var downlinkOption: Broker_DownlinkOption {
    get {return _storage._downlinkOption ?? Broker_DownlinkOption()}
    set {_uniqueStorage()._downlinkOption = newValue}
  }
  /// Returns true if `downlinkOption` has been explicitly set.
  var hasDownlinkOption: Bool {return _storage._downlinkOption != nil}
  /// Clears the value of `downlinkOption`. Subsequent reads from it will return its default value.
  mutating func clearDownlinkOption() {_uniqueStorage()._downlinkOption = nil}

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// sent to the Router, used as Template
struct Broker_DeviceActivationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var downlinkOption: Broker_DownlinkOption {
    get {return _storage._downlinkOption ?? Broker_DownlinkOption()}
    set {_uniqueStorage()._downlinkOption = newValue}
  }
  /// Returns true if `downlinkOption` has been explicitly set.
  var hasDownlinkOption: Bool {return _storage._downlinkOption != nil}
  /// Clears the value of `downlinkOption`. Subsequent reads from it will return its default value.
  mutating func clearDownlinkOption() {_uniqueStorage()._downlinkOption = nil}

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// sent to the Handler
struct Broker_DeduplicatedUplinkMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  var protocolMetadata: Protocol_RxMetadata {
    get {return _storage._protocolMetadata ?? Protocol_RxMetadata()}
    set {_uniqueStorage()._protocolMetadata = newValue}
  }
  /// Returns true if `protocolMetadata` has been explicitly set.
  var hasProtocolMetadata: Bool {return _storage._protocolMetadata != nil}
  /// Clears the value of `protocolMetadata`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMetadata() {_uniqueStorage()._protocolMetadata = nil}

  var gatewayMetadata: [Gateway_RxMetadata] {
    get {return _storage._gatewayMetadata}
    set {_uniqueStorage()._gatewayMetadata = newValue}
  }

  var serverTime: Int64 {
    get {return _storage._serverTime}
    set {_uniqueStorage()._serverTime = newValue}
  }

  var responseTemplate: Broker_DownlinkMessage {
    get {return _storage._responseTemplate ?? Broker_DownlinkMessage()}
    set {_uniqueStorage()._responseTemplate = newValue}
  }
  /// Returns true if `responseTemplate` has been explicitly set.
  var hasResponseTemplate: Bool {return _storage._responseTemplate != nil}
  /// Clears the value of `responseTemplate`. Subsequent reads from it will return its default value.
  mutating func clearResponseTemplate() {_uniqueStorage()._responseTemplate = nil}

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// received from the Router
struct Broker_DeviceActivationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var protocolMetadata: Protocol_RxMetadata {
    get {return _storage._protocolMetadata ?? Protocol_RxMetadata()}
    set {_uniqueStorage()._protocolMetadata = newValue}
  }
  /// Returns true if `protocolMetadata` has been explicitly set.
  var hasProtocolMetadata: Bool {return _storage._protocolMetadata != nil}
  /// Clears the value of `protocolMetadata`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMetadata() {_uniqueStorage()._protocolMetadata = nil}

  var gatewayMetadata: Gateway_RxMetadata {
    get {return _storage._gatewayMetadata ?? Gateway_RxMetadata()}
    set {_uniqueStorage()._gatewayMetadata = newValue}
  }
  /// Returns true if `gatewayMetadata` has been explicitly set.
  var hasGatewayMetadata: Bool {return _storage._gatewayMetadata != nil}
  /// Clears the value of `gatewayMetadata`. Subsequent reads from it will return its default value.
  mutating func clearGatewayMetadata() {_uniqueStorage()._gatewayMetadata = nil}

  var activationMetadata: Protocol_ActivationMetadata {
    get {return _storage._activationMetadata ?? Protocol_ActivationMetadata()}
    set {_uniqueStorage()._activationMetadata = newValue}
  }
  /// Returns true if `activationMetadata` has been explicitly set.
  var hasActivationMetadata: Bool {return _storage._activationMetadata != nil}
  /// Clears the value of `activationMetadata`. Subsequent reads from it will return its default value.
  mutating func clearActivationMetadata() {_uniqueStorage()._activationMetadata = nil}

  var downlinkOptions: [Broker_DownlinkOption] {
    get {return _storage._downlinkOptions}
    set {_uniqueStorage()._downlinkOptions = newValue}
  }

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// sent to the Handler
struct Broker_DeduplicatedDeviceActivationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  var protocolMetadata: Protocol_RxMetadata {
    get {return _storage._protocolMetadata ?? Protocol_RxMetadata()}
    set {_uniqueStorage()._protocolMetadata = newValue}
  }
  /// Returns true if `protocolMetadata` has been explicitly set.
  var hasProtocolMetadata: Bool {return _storage._protocolMetadata != nil}
  /// Clears the value of `protocolMetadata`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMetadata() {_uniqueStorage()._protocolMetadata = nil}

  var gatewayMetadata: [Gateway_RxMetadata] {
    get {return _storage._gatewayMetadata}
    set {_uniqueStorage()._gatewayMetadata = newValue}
  }

  var activationMetadata: Protocol_ActivationMetadata {
    get {return _storage._activationMetadata ?? Protocol_ActivationMetadata()}
    set {_uniqueStorage()._activationMetadata = newValue}
  }
  /// Returns true if `activationMetadata` has been explicitly set.
  var hasActivationMetadata: Bool {return _storage._activationMetadata != nil}
  /// Clears the value of `activationMetadata`. Subsequent reads from it will return its default value.
  mutating func clearActivationMetadata() {_uniqueStorage()._activationMetadata = nil}

  var serverTime: Int64 {
    get {return _storage._serverTime}
    set {_uniqueStorage()._serverTime = newValue}
  }

  var responseTemplate: Broker_DeviceActivationResponse {
    get {return _storage._responseTemplate ?? Broker_DeviceActivationResponse()}
    set {_uniqueStorage()._responseTemplate = newValue}
  }
  /// Returns true if `responseTemplate` has been explicitly set.
  var hasResponseTemplate: Bool {return _storage._responseTemplate != nil}
  /// Clears the value of `responseTemplate`. Subsequent reads from it will return its default value.
  mutating func clearResponseTemplate() {_uniqueStorage()._responseTemplate = nil}

  var trace: Trace_Trace {
    get {return _storage._trace ?? Trace_Trace()}
    set {_uniqueStorage()._trace = newValue}
  }
  /// Returns true if `trace` has been explicitly set.
  var hasTrace: Bool {return _storage._trace != nil}
  /// Clears the value of `trace`. Subsequent reads from it will return its default value.
  mutating func clearTrace() {_uniqueStorage()._trace = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Broker_ActivationChallengeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var devEui: Data {
    get {return _storage._devEui}
    set {_uniqueStorage()._devEui = newValue}
  }

  var appEui: Data {
    get {return _storage._appEui}
    set {_uniqueStorage()._appEui = newValue}
  }

  var appID: String {
    get {return _storage._appID}
    set {_uniqueStorage()._appID = newValue}
  }

  var devID: String {
    get {return _storage._devID}
    set {_uniqueStorage()._devID = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Broker_ActivationChallengeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  var message: Protocol_Message {
    get {return _storage._message ?? Protocol_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// message SubscribeRequest is used by a Handler to subscribe to uplink messages
struct Broker_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// message StatusRequest is used to request the status of this Broker
struct Broker_StatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Broker_Status {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var system: Api_SystemStats {
    get {return _storage._system ?? Api_SystemStats()}
    set {_uniqueStorage()._system = newValue}
  }
  /// Returns true if `system` has been explicitly set.
  var hasSystem: Bool {return _storage._system != nil}
  /// Clears the value of `system`. Subsequent reads from it will return its default value.
  mutating func clearSystem() {_uniqueStorage()._system = nil}

  var component: Api_ComponentStats {
    get {return _storage._component ?? Api_ComponentStats()}
    set {_uniqueStorage()._component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return _storage._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {_uniqueStorage()._component = nil}

  var uplink: Api_Rates {
    get {return _storage._uplink ?? Api_Rates()}
    set {_uniqueStorage()._uplink = newValue}
  }
  /// Returns true if `uplink` has been explicitly set.
  var hasUplink: Bool {return _storage._uplink != nil}
  /// Clears the value of `uplink`. Subsequent reads from it will return its default value.
  mutating func clearUplink() {_uniqueStorage()._uplink = nil}

  var uplinkUnique: Api_Rates {
    get {return _storage._uplinkUnique ?? Api_Rates()}
    set {_uniqueStorage()._uplinkUnique = newValue}
  }
  /// Returns true if `uplinkUnique` has been explicitly set.
  var hasUplinkUnique: Bool {return _storage._uplinkUnique != nil}
  /// Clears the value of `uplinkUnique`. Subsequent reads from it will return its default value.
  mutating func clearUplinkUnique() {_uniqueStorage()._uplinkUnique = nil}

  var downlink: Api_Rates {
    get {return _storage._downlink ?? Api_Rates()}
    set {_uniqueStorage()._downlink = newValue}
  }
  /// Returns true if `downlink` has been explicitly set.
  var hasDownlink: Bool {return _storage._downlink != nil}
  /// Clears the value of `downlink`. Subsequent reads from it will return its default value.
  mutating func clearDownlink() {_uniqueStorage()._downlink = nil}

  var activations: Api_Rates {
    get {return _storage._activations ?? Api_Rates()}
    set {_uniqueStorage()._activations = newValue}
  }
  /// Returns true if `activations` has been explicitly set.
  var hasActivations: Bool {return _storage._activations != nil}
  /// Clears the value of `activations`. Subsequent reads from it will return its default value.
  mutating func clearActivations() {_uniqueStorage()._activations = nil}

  var activationsUnique: Api_Rates {
    get {return _storage._activationsUnique ?? Api_Rates()}
    set {_uniqueStorage()._activationsUnique = newValue}
  }
  /// Returns true if `activationsUnique` has been explicitly set.
  var hasActivationsUnique: Bool {return _storage._activationsUnique != nil}
  /// Clears the value of `activationsUnique`. Subsequent reads from it will return its default value.
  mutating func clearActivationsUnique() {_uniqueStorage()._activationsUnique = nil}

  var deduplication: Api_Percentiles {
    get {return _storage._deduplication ?? Api_Percentiles()}
    set {_uniqueStorage()._deduplication = newValue}
  }
  /// Returns true if `deduplication` has been explicitly set.
  var hasDeduplication: Bool {return _storage._deduplication != nil}
  /// Clears the value of `deduplication`. Subsequent reads from it will return its default value.
  mutating func clearDeduplication() {_uniqueStorage()._deduplication = nil}

  /// Connections
  var connectedRouters: UInt32 {
    get {return _storage._connectedRouters}
    set {_uniqueStorage()._connectedRouters = newValue}
  }

  var connectedHandlers: UInt32 {
    get {return _storage._connectedHandlers}
    set {_uniqueStorage()._connectedHandlers = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Broker_ApplicationHandlerRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var appID: String = String()

  var handlerID: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "broker"

extension Broker_DownlinkOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownlinkOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identifier"),
    2: .standard(proto: "gateway_id"),
    3: .same(proto: "score"),
    4: .same(proto: "deadline"),
    5: .standard(proto: "protocol_configuration"),
    6: .standard(proto: "gateway_configuration"),
  ]

  fileprivate class _StorageClass {
    var _identifier: String = String()
    var _gatewayID: String = String()
    var _score: UInt32 = 0
    var _deadline: Int64 = 0
    var _protocolConfiguration: Protocol_TxConfiguration? = nil
    var _gatewayConfiguration: Gateway_TxConfiguration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _gatewayID = source._gatewayID
      _score = source._score
      _deadline = source._deadline
      _protocolConfiguration = source._protocolConfiguration
      _gatewayConfiguration = source._gatewayConfiguration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._identifier)
        case 2: try decoder.decodeSingularStringField(value: &_storage._gatewayID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._score)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._deadline)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._protocolConfiguration)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._gatewayConfiguration)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._identifier.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identifier, fieldNumber: 1)
      }
      if !_storage._gatewayID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gatewayID, fieldNumber: 2)
      }
      if _storage._score != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._score, fieldNumber: 3)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 4)
      }
      if let v = _storage._protocolConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._gatewayConfiguration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DownlinkOption, rhs: Broker_DownlinkOption) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._gatewayID != rhs_storage._gatewayID {return false}
        if _storage._score != rhs_storage._score {return false}
        if _storage._deadline != rhs_storage._deadline {return false}
        if _storage._protocolConfiguration != rhs_storage._protocolConfiguration {return false}
        if _storage._gatewayConfiguration != rhs_storage._gatewayConfiguration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_UplinkMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UplinkMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    13: .standard(proto: "app_id"),
    14: .standard(proto: "dev_id"),
    21: .standard(proto: "protocol_metadata"),
    22: .standard(proto: "gateway_metadata"),
    31: .standard(proto: "downlink_options"),
    41: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _appID: String = String()
    var _devID: String = String()
    var _protocolMetadata: Protocol_RxMetadata? = nil
    var _gatewayMetadata: Gateway_RxMetadata? = nil
    var _downlinkOptions: [Broker_DownlinkOption] = []
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _appID = source._appID
      _devID = source._devID
      _protocolMetadata = source._protocolMetadata
      _gatewayMetadata = source._gatewayMetadata
      _downlinkOptions = source._downlinkOptions
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 13: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 14: try decoder.decodeSingularStringField(value: &_storage._devID)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._protocolMetadata)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._gatewayMetadata)
        case 31: try decoder.decodeRepeatedMessageField(value: &_storage._downlinkOptions)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 13)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 14)
      }
      if let v = _storage._protocolMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._gatewayMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if !_storage._downlinkOptions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._downlinkOptions, fieldNumber: 31)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_UplinkMessage, rhs: Broker_UplinkMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._devID != rhs_storage._devID {return false}
        if _storage._protocolMetadata != rhs_storage._protocolMetadata {return false}
        if _storage._gatewayMetadata != rhs_storage._gatewayMetadata {return false}
        if _storage._downlinkOptions != rhs_storage._downlinkOptions {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_DownlinkMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DownlinkMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    13: .standard(proto: "app_id"),
    14: .standard(proto: "dev_id"),
    21: .standard(proto: "downlink_option"),
    31: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _appID: String = String()
    var _devID: String = String()
    var _downlinkOption: Broker_DownlinkOption? = nil
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _appID = source._appID
      _devID = source._devID
      _downlinkOption = source._downlinkOption
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 13: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 14: try decoder.decodeSingularStringField(value: &_storage._devID)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._downlinkOption)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 13)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 14)
      }
      if let v = _storage._downlinkOption {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DownlinkMessage, rhs: Broker_DownlinkMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._devID != rhs_storage._devID {return false}
        if _storage._downlinkOption != rhs_storage._downlinkOption {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_DeviceActivationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceActivationResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "downlink_option"),
    21: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _downlinkOption: Broker_DownlinkOption? = nil
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _downlinkOption = source._downlinkOption
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._downlinkOption)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._downlinkOption {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DeviceActivationResponse, rhs: Broker_DeviceActivationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._downlinkOption != rhs_storage._downlinkOption {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_DeduplicatedUplinkMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeduplicatedUplinkMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    13: .standard(proto: "app_id"),
    14: .standard(proto: "dev_id"),
    21: .standard(proto: "protocol_metadata"),
    22: .standard(proto: "gateway_metadata"),
    23: .standard(proto: "server_time"),
    31: .standard(proto: "response_template"),
    41: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _appID: String = String()
    var _devID: String = String()
    var _protocolMetadata: Protocol_RxMetadata? = nil
    var _gatewayMetadata: [Gateway_RxMetadata] = []
    var _serverTime: Int64 = 0
    var _responseTemplate: Broker_DownlinkMessage? = nil
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _appID = source._appID
      _devID = source._devID
      _protocolMetadata = source._protocolMetadata
      _gatewayMetadata = source._gatewayMetadata
      _serverTime = source._serverTime
      _responseTemplate = source._responseTemplate
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 13: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 14: try decoder.decodeSingularStringField(value: &_storage._devID)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._protocolMetadata)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._gatewayMetadata)
        case 23: try decoder.decodeSingularInt64Field(value: &_storage._serverTime)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._responseTemplate)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 13)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 14)
      }
      if let v = _storage._protocolMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if !_storage._gatewayMetadata.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gatewayMetadata, fieldNumber: 22)
      }
      if _storage._serverTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._serverTime, fieldNumber: 23)
      }
      if let v = _storage._responseTemplate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DeduplicatedUplinkMessage, rhs: Broker_DeduplicatedUplinkMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._devID != rhs_storage._devID {return false}
        if _storage._protocolMetadata != rhs_storage._protocolMetadata {return false}
        if _storage._gatewayMetadata != rhs_storage._gatewayMetadata {return false}
        if _storage._serverTime != rhs_storage._serverTime {return false}
        if _storage._responseTemplate != rhs_storage._responseTemplate {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_DeviceActivationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceActivationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    21: .standard(proto: "protocol_metadata"),
    22: .standard(proto: "gateway_metadata"),
    23: .standard(proto: "activation_metadata"),
    31: .standard(proto: "downlink_options"),
    41: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _protocolMetadata: Protocol_RxMetadata? = nil
    var _gatewayMetadata: Gateway_RxMetadata? = nil
    var _activationMetadata: Protocol_ActivationMetadata? = nil
    var _downlinkOptions: [Broker_DownlinkOption] = []
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _protocolMetadata = source._protocolMetadata
      _gatewayMetadata = source._gatewayMetadata
      _activationMetadata = source._activationMetadata
      _downlinkOptions = source._downlinkOptions
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._protocolMetadata)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._gatewayMetadata)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._activationMetadata)
        case 31: try decoder.decodeRepeatedMessageField(value: &_storage._downlinkOptions)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if let v = _storage._protocolMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._gatewayMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._activationMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if !_storage._downlinkOptions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._downlinkOptions, fieldNumber: 31)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DeviceActivationRequest, rhs: Broker_DeviceActivationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._protocolMetadata != rhs_storage._protocolMetadata {return false}
        if _storage._gatewayMetadata != rhs_storage._gatewayMetadata {return false}
        if _storage._activationMetadata != rhs_storage._activationMetadata {return false}
        if _storage._downlinkOptions != rhs_storage._downlinkOptions {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_DeduplicatedDeviceActivationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeduplicatedDeviceActivationRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    13: .standard(proto: "app_id"),
    14: .standard(proto: "dev_id"),
    21: .standard(proto: "protocol_metadata"),
    22: .standard(proto: "gateway_metadata"),
    23: .standard(proto: "activation_metadata"),
    24: .standard(proto: "server_time"),
    31: .standard(proto: "response_template"),
    41: .same(proto: "trace"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _appID: String = String()
    var _devID: String = String()
    var _protocolMetadata: Protocol_RxMetadata? = nil
    var _gatewayMetadata: [Gateway_RxMetadata] = []
    var _activationMetadata: Protocol_ActivationMetadata? = nil
    var _serverTime: Int64 = 0
    var _responseTemplate: Broker_DeviceActivationResponse? = nil
    var _trace: Trace_Trace? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _appID = source._appID
      _devID = source._devID
      _protocolMetadata = source._protocolMetadata
      _gatewayMetadata = source._gatewayMetadata
      _activationMetadata = source._activationMetadata
      _serverTime = source._serverTime
      _responseTemplate = source._responseTemplate
      _trace = source._trace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 13: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 14: try decoder.decodeSingularStringField(value: &_storage._devID)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._protocolMetadata)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._gatewayMetadata)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._activationMetadata)
        case 24: try decoder.decodeSingularInt64Field(value: &_storage._serverTime)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._responseTemplate)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._trace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 13)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 14)
      }
      if let v = _storage._protocolMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if !_storage._gatewayMetadata.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gatewayMetadata, fieldNumber: 22)
      }
      if let v = _storage._activationMetadata {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if _storage._serverTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._serverTime, fieldNumber: 24)
      }
      if let v = _storage._responseTemplate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._trace {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_DeduplicatedDeviceActivationRequest, rhs: Broker_DeduplicatedDeviceActivationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._devID != rhs_storage._devID {return false}
        if _storage._protocolMetadata != rhs_storage._protocolMetadata {return false}
        if _storage._gatewayMetadata != rhs_storage._gatewayMetadata {return false}
        if _storage._activationMetadata != rhs_storage._activationMetadata {return false}
        if _storage._serverTime != rhs_storage._serverTime {return false}
        if _storage._responseTemplate != rhs_storage._responseTemplate {return false}
        if _storage._trace != rhs_storage._trace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_ActivationChallengeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivationChallengeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
    11: .standard(proto: "dev_eui"),
    12: .standard(proto: "app_eui"),
    13: .standard(proto: "app_id"),
    14: .standard(proto: "dev_id"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil
    var _devEui: Data = SwiftProtobuf.Internal.emptyData
    var _appEui: Data = SwiftProtobuf.Internal.emptyData
    var _appID: String = String()
    var _devID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
      _devEui = source._devEui
      _appEui = source._appEui
      _appID = source._appID
      _devID = source._devID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._devEui)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._appEui)
        case 13: try decoder.decodeSingularStringField(value: &_storage._appID)
        case 14: try decoder.decodeSingularStringField(value: &_storage._devID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._devEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._devEui, fieldNumber: 11)
      }
      if !_storage._appEui.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appEui, fieldNumber: 12)
      }
      if !_storage._appID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._appID, fieldNumber: 13)
      }
      if !_storage._devID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._devID, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_ActivationChallengeRequest, rhs: Broker_ActivationChallengeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._devEui != rhs_storage._devEui {return false}
        if _storage._appEui != rhs_storage._appEui {return false}
        if _storage._appID != rhs_storage._appID {return false}
        if _storage._devID != rhs_storage._devID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_ActivationChallengeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActivationChallengeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _payload: Data = SwiftProtobuf.Internal.emptyData
    var _message: Protocol_Message? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_ActivationChallengeResponse, rhs: Broker_ActivationChallengeResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_SubscribeRequest, rhs: Broker_SubscribeRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_StatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_StatusRequest, rhs: Broker_StatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "system"),
    2: .same(proto: "component"),
    11: .same(proto: "uplink"),
    12: .standard(proto: "uplink_unique"),
    13: .same(proto: "downlink"),
    14: .same(proto: "activations"),
    15: .standard(proto: "activations_unique"),
    16: .same(proto: "deduplication"),
    21: .standard(proto: "connected_routers"),
    22: .standard(proto: "connected_handlers"),
  ]

  fileprivate class _StorageClass {
    var _system: Api_SystemStats? = nil
    var _component: Api_ComponentStats? = nil
    var _uplink: Api_Rates? = nil
    var _uplinkUnique: Api_Rates? = nil
    var _downlink: Api_Rates? = nil
    var _activations: Api_Rates? = nil
    var _activationsUnique: Api_Rates? = nil
    var _deduplication: Api_Percentiles? = nil
    var _connectedRouters: UInt32 = 0
    var _connectedHandlers: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _system = source._system
      _component = source._component
      _uplink = source._uplink
      _uplinkUnique = source._uplinkUnique
      _downlink = source._downlink
      _activations = source._activations
      _activationsUnique = source._activationsUnique
      _deduplication = source._deduplication
      _connectedRouters = source._connectedRouters
      _connectedHandlers = source._connectedHandlers
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._system)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._component)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._uplink)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._uplinkUnique)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._downlink)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._activations)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._activationsUnique)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._deduplication)
        case 21: try decoder.decodeSingularUInt32Field(value: &_storage._connectedRouters)
        case 22: try decoder.decodeSingularUInt32Field(value: &_storage._connectedHandlers)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._system {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._component {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._uplink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._uplinkUnique {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._downlink {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._activations {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if let v = _storage._activationsUnique {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._deduplication {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if _storage._connectedRouters != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._connectedRouters, fieldNumber: 21)
      }
      if _storage._connectedHandlers != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._connectedHandlers, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_Status, rhs: Broker_Status) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._system != rhs_storage._system {return false}
        if _storage._component != rhs_storage._component {return false}
        if _storage._uplink != rhs_storage._uplink {return false}
        if _storage._uplinkUnique != rhs_storage._uplinkUnique {return false}
        if _storage._downlink != rhs_storage._downlink {return false}
        if _storage._activations != rhs_storage._activations {return false}
        if _storage._activationsUnique != rhs_storage._activationsUnique {return false}
        if _storage._deduplication != rhs_storage._deduplication {return false}
        if _storage._connectedRouters != rhs_storage._connectedRouters {return false}
        if _storage._connectedHandlers != rhs_storage._connectedHandlers {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Broker_ApplicationHandlerRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplicationHandlerRegistration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "app_id"),
    2: .standard(proto: "handler_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.appID)
      case 2: try decoder.decodeSingularStringField(value: &self.handlerID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.appID.isEmpty {
      try visitor.visitSingularStringField(value: self.appID, fieldNumber: 1)
    }
    if !self.handlerID.isEmpty {
      try visitor.visitSingularStringField(value: self.handlerID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Broker_ApplicationHandlerRegistration, rhs: Broker_ApplicationHandlerRegistration) -> Bool {
    if lhs.appID != rhs.appID {return false}
    if lhs.handlerID != rhs.handlerID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
