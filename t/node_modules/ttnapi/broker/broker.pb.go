// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/broker/broker.proto

package broker // import "github.com/TheThingsNetwork/api/broker"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/api"
import gateway "github.com/TheThingsNetwork/api/gateway"
import protocol "github.com/TheThingsNetwork/api/protocol"
import trace "github.com/TheThingsNetwork/api/trace"
import _ "github.com/gogo/protobuf/gogoproto"
import types "github.com/gogo/protobuf/types"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import bytes "bytes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DownlinkOption struct {
	// String that identifies this downlink option in the Router
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// ID of the gateway where this downlink should be sent
	GatewayID string `protobuf:"bytes,2,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Score of this downlink option. Lower is better.
	Score uint32 `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	// deadline time at server represented as Unix nanoseconds
	Deadline              int64                    `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty"`
	ProtocolConfiguration protocol.TxConfiguration `protobuf:"bytes,5,opt,name=protocol_configuration,json=protocolConfiguration" json:"protocol_configuration"`
	GatewayConfiguration  gateway.TxConfiguration  `protobuf:"bytes,6,opt,name=gateway_configuration,json=gatewayConfiguration" json:"gateway_configuration"`
	XXX_NoUnkeyedLiteral  struct{}                 `json:"-"`
	XXX_sizecache         int32                    `json:"-"`
}

func (m *DownlinkOption) Reset()      { *m = DownlinkOption{} }
func (*DownlinkOption) ProtoMessage() {}
func (*DownlinkOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{0}
}
func (m *DownlinkOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkOption.Merge(dst, src)
}
func (m *DownlinkOption) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkOption) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkOption.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkOption proto.InternalMessageInfo

func (m *DownlinkOption) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *DownlinkOption) GetGatewayID() string {
	if m != nil {
		return m.GatewayID
	}
	return ""
}

func (m *DownlinkOption) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *DownlinkOption) GetDeadline() int64 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

func (m *DownlinkOption) GetProtocolConfiguration() protocol.TxConfiguration {
	if m != nil {
		return m.ProtocolConfiguration
	}
	return protocol.TxConfiguration{}
}

func (m *DownlinkOption) GetGatewayConfiguration() gateway.TxConfiguration {
	if m != nil {
		return m.GatewayConfiguration
	}
	return gateway.TxConfiguration{}
}

// received from the Router
type UplinkMessage struct {
	Payload              []byte                                             `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               *github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	AppEUI               *github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	AppID                string                                             `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID                string                                             `protobuf:"bytes,14,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	ProtocolMetadata     protocol.RxMetadata                                `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      gateway.RxMetadata                                 `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata"`
	DownlinkOptions      []*DownlinkOption                                  `protobuf:"bytes,31,rep,name=downlink_options,json=downlinkOptions" json:"downlink_options,omitempty"`
	Trace                *trace.Trace                                       `protobuf:"bytes,41,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *UplinkMessage) Reset()      { *m = UplinkMessage{} }
func (*UplinkMessage) ProtoMessage() {}
func (*UplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{1}
}
func (m *UplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkMessage.Merge(dst, src)
}
func (m *UplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *UplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkMessage proto.InternalMessageInfo

func (m *UplinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UplinkMessage) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *UplinkMessage) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *UplinkMessage) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *UplinkMessage) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *UplinkMessage) GetGatewayMetadata() gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return gateway.RxMetadata{}
}

func (m *UplinkMessage) GetDownlinkOptions() []*DownlinkOption {
	if m != nil {
		return m.DownlinkOptions
	}
	return nil
}

func (m *UplinkMessage) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// received from the Handler, sent to the Router, used as Template
type DownlinkMessage struct {
	Payload              []byte                                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	AppID                string                                            `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID                string                                            `protobuf:"bytes,14,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	DownlinkOption       *DownlinkOption                                   `protobuf:"bytes,21,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
	Trace                *trace.Trace                                      `protobuf:"bytes,31,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DownlinkMessage) Reset()      { *m = DownlinkMessage{} }
func (*DownlinkMessage) ProtoMessage() {}
func (*DownlinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{2}
}
func (m *DownlinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownlinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownlinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DownlinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkMessage.Merge(dst, src)
}
func (m *DownlinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DownlinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkMessage proto.InternalMessageInfo

func (m *DownlinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DownlinkMessage) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DownlinkMessage) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *DownlinkMessage) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *DownlinkMessage) GetDownlinkOption() *DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

func (m *DownlinkMessage) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// sent to the Router, used as Template
type DeviceActivationResponse struct {
	Payload              []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DownlinkOption       *DownlinkOption   `protobuf:"bytes,11,opt,name=downlink_option,json=downlinkOption" json:"downlink_option,omitempty"`
	Trace                *trace.Trace      `protobuf:"bytes,21,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeviceActivationResponse) Reset()      { *m = DeviceActivationResponse{} }
func (*DeviceActivationResponse) ProtoMessage() {}
func (*DeviceActivationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{3}
}
func (m *DeviceActivationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceActivationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceActivationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceActivationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceActivationResponse.Merge(dst, src)
}
func (m *DeviceActivationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeviceActivationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceActivationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceActivationResponse proto.InternalMessageInfo

func (m *DeviceActivationResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeviceActivationResponse) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeviceActivationResponse) GetDownlinkOption() *DownlinkOption {
	if m != nil {
		return m.DownlinkOption
	}
	return nil
}

func (m *DeviceActivationResponse) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// sent to the Handler
type DeduplicatedUplinkMessage struct {
	Payload              []byte                                             `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               *github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui,omitempty"`
	AppEUI               *github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui,omitempty"`
	AppID                string                                             `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID                string                                             `protobuf:"bytes,14,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	ProtocolMetadata     protocol.RxMetadata                                `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      []*gateway.RxMetadata                              `protobuf:"bytes,22,rep,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	ServerTime           int64                                              `protobuf:"varint,23,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResponseTemplate     *DownlinkMessage                                   `protobuf:"bytes,31,opt,name=response_template,json=responseTemplate" json:"response_template,omitempty"`
	Trace                *trace.Trace                                       `protobuf:"bytes,41,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DeduplicatedUplinkMessage) Reset()      { *m = DeduplicatedUplinkMessage{} }
func (*DeduplicatedUplinkMessage) ProtoMessage() {}
func (*DeduplicatedUplinkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{4}
}
func (m *DeduplicatedUplinkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeduplicatedUplinkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeduplicatedUplinkMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeduplicatedUplinkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeduplicatedUplinkMessage.Merge(dst, src)
}
func (m *DeduplicatedUplinkMessage) XXX_Size() int {
	return m.Size()
}
func (m *DeduplicatedUplinkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeduplicatedUplinkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DeduplicatedUplinkMessage proto.InternalMessageInfo

func (m *DeduplicatedUplinkMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *DeduplicatedUplinkMessage) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *DeduplicatedUplinkMessage) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *DeduplicatedUplinkMessage) GetGatewayMetadata() []*gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *DeduplicatedUplinkMessage) GetResponseTemplate() *DownlinkMessage {
	if m != nil {
		return m.ResponseTemplate
	}
	return nil
}

func (m *DeduplicatedUplinkMessage) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// received from the Router
type DeviceActivationRequest struct {
	Payload              []byte                                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	ProtocolMetadata     protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      gateway.RxMetadata                                `protobuf:"bytes,22,opt,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata"`
	ActivationMetadata   *protocol.ActivationMetadata                      `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	DownlinkOptions      []*DownlinkOption                                 `protobuf:"bytes,31,rep,name=downlink_options,json=downlinkOptions" json:"downlink_options,omitempty"`
	Trace                *trace.Trace                                      `protobuf:"bytes,41,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DeviceActivationRequest) Reset()      { *m = DeviceActivationRequest{} }
func (*DeviceActivationRequest) ProtoMessage() {}
func (*DeviceActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{5}
}
func (m *DeviceActivationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceActivationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceActivationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeviceActivationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceActivationRequest.Merge(dst, src)
}
func (m *DeviceActivationRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeviceActivationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceActivationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceActivationRequest proto.InternalMessageInfo

func (m *DeviceActivationRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeviceActivationRequest) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeviceActivationRequest) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *DeviceActivationRequest) GetGatewayMetadata() gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return gateway.RxMetadata{}
}

func (m *DeviceActivationRequest) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeviceActivationRequest) GetDownlinkOptions() []*DownlinkOption {
	if m != nil {
		return m.DownlinkOptions
	}
	return nil
}

func (m *DeviceActivationRequest) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

// sent to the Handler
type DeduplicatedDeviceActivationRequest struct {
	Payload              []byte                                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	AppID                string                                            `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID                string                                            `protobuf:"bytes,14,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	ProtocolMetadata     protocol.RxMetadata                               `protobuf:"bytes,21,opt,name=protocol_metadata,json=protocolMetadata" json:"protocol_metadata"`
	GatewayMetadata      []*gateway.RxMetadata                             `protobuf:"bytes,22,rep,name=gateway_metadata,json=gatewayMetadata" json:"gateway_metadata,omitempty"`
	ActivationMetadata   *protocol.ActivationMetadata                      `protobuf:"bytes,23,opt,name=activation_metadata,json=activationMetadata" json:"activation_metadata,omitempty"`
	ServerTime           int64                                             `protobuf:"varint,24,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResponseTemplate     *DeviceActivationResponse                         `protobuf:"bytes,31,opt,name=response_template,json=responseTemplate" json:"response_template,omitempty"`
	Trace                *trace.Trace                                      `protobuf:"bytes,41,opt,name=trace" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DeduplicatedDeviceActivationRequest) Reset()      { *m = DeduplicatedDeviceActivationRequest{} }
func (*DeduplicatedDeviceActivationRequest) ProtoMessage() {}
func (*DeduplicatedDeviceActivationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{6}
}
func (m *DeduplicatedDeviceActivationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeduplicatedDeviceActivationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeduplicatedDeviceActivationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeduplicatedDeviceActivationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeduplicatedDeviceActivationRequest.Merge(dst, src)
}
func (m *DeduplicatedDeviceActivationRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeduplicatedDeviceActivationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeduplicatedDeviceActivationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeduplicatedDeviceActivationRequest proto.InternalMessageInfo

func (m *DeduplicatedDeviceActivationRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *DeduplicatedDeviceActivationRequest) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

func (m *DeduplicatedDeviceActivationRequest) GetProtocolMetadata() protocol.RxMetadata {
	if m != nil {
		return m.ProtocolMetadata
	}
	return protocol.RxMetadata{}
}

func (m *DeduplicatedDeviceActivationRequest) GetGatewayMetadata() []*gateway.RxMetadata {
	if m != nil {
		return m.GatewayMetadata
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetActivationMetadata() *protocol.ActivationMetadata {
	if m != nil {
		return m.ActivationMetadata
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetServerTime() int64 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *DeduplicatedDeviceActivationRequest) GetResponseTemplate() *DeviceActivationResponse {
	if m != nil {
		return m.ResponseTemplate
	}
	return nil
}

func (m *DeduplicatedDeviceActivationRequest) GetTrace() *trace.Trace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type ActivationChallengeRequest struct {
	Payload              []byte                                            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message                                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	DevEUI               github_com_TheThingsNetwork_ttn_core_types.DevEUI `protobuf:"bytes,11,opt,name=dev_eui,json=devEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevEUI" json:"dev_eui"`
	AppEUI               github_com_TheThingsNetwork_ttn_core_types.AppEUI `protobuf:"bytes,12,opt,name=app_eui,json=appEui,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.AppEUI" json:"app_eui"`
	AppID                string                                            `protobuf:"bytes,13,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DevID                string                                            `protobuf:"bytes,14,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *ActivationChallengeRequest) Reset()      { *m = ActivationChallengeRequest{} }
func (*ActivationChallengeRequest) ProtoMessage() {}
func (*ActivationChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{7}
}
func (m *ActivationChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActivationChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationChallengeRequest.Merge(dst, src)
}
func (m *ActivationChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ActivationChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationChallengeRequest proto.InternalMessageInfo

func (m *ActivationChallengeRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ActivationChallengeRequest) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ActivationChallengeRequest) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ActivationChallengeRequest) GetDevID() string {
	if m != nil {
		return m.DevID
	}
	return ""
}

type ActivationChallengeResponse struct {
	Payload              []byte            `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Message              *protocol.Message `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ActivationChallengeResponse) Reset()      { *m = ActivationChallengeResponse{} }
func (*ActivationChallengeResponse) ProtoMessage() {}
func (*ActivationChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{8}
}
func (m *ActivationChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivationChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivationChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActivationChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivationChallengeResponse.Merge(dst, src)
}
func (m *ActivationChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ActivationChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivationChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActivationChallengeResponse proto.InternalMessageInfo

func (m *ActivationChallengeResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *ActivationChallengeResponse) GetMessage() *protocol.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

// message SubscribeRequest is used by a Handler to subscribe to uplink messages
type SubscribeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()      { *m = SubscribeRequest{} }
func (*SubscribeRequest) ProtoMessage() {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{9}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

// message StatusRequest is used to request the status of this Broker
type StatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{10}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

type Status struct {
	System            api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system"`
	Component         api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component"`
	Uplink            *api.Rates         `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	UplinkUnique      *api.Rates         `protobuf:"bytes,12,opt,name=uplink_unique,json=uplinkUnique" json:"uplink_unique,omitempty"`
	Downlink          *api.Rates         `protobuf:"bytes,13,opt,name=downlink" json:"downlink,omitempty"`
	Activations       *api.Rates         `protobuf:"bytes,14,opt,name=activations" json:"activations,omitempty"`
	ActivationsUnique *api.Rates         `protobuf:"bytes,15,opt,name=activations_unique,json=activationsUnique" json:"activations_unique,omitempty"`
	Deduplication     *api.Percentiles   `protobuf:"bytes,16,opt,name=deduplication" json:"deduplication,omitempty"`
	// Connections
	ConnectedRouters     uint32   `protobuf:"varint,21,opt,name=connected_routers,json=connectedRouters,proto3" json:"connected_routers,omitempty"`
	ConnectedHandlers    uint32   `protobuf:"varint,22,opt,name=connected_handlers,json=connectedHandlers,proto3" json:"connected_handlers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{11}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSystem() api.SystemStats {
	if m != nil {
		return m.System
	}
	return api.SystemStats{}
}

func (m *Status) GetComponent() api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return api.ComponentStats{}
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetUplinkUnique() *api.Rates {
	if m != nil {
		return m.UplinkUnique
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *Status) GetActivationsUnique() *api.Rates {
	if m != nil {
		return m.ActivationsUnique
	}
	return nil
}

func (m *Status) GetDeduplication() *api.Percentiles {
	if m != nil {
		return m.Deduplication
	}
	return nil
}

func (m *Status) GetConnectedRouters() uint32 {
	if m != nil {
		return m.ConnectedRouters
	}
	return 0
}

func (m *Status) GetConnectedHandlers() uint32 {
	if m != nil {
		return m.ConnectedHandlers
	}
	return 0
}

type ApplicationHandlerRegistration struct {
	AppID                string   `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	HandlerID            string   `protobuf:"bytes,2,opt,name=handler_id,json=handlerId,proto3" json:"handler_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplicationHandlerRegistration) Reset()      { *m = ApplicationHandlerRegistration{} }
func (*ApplicationHandlerRegistration) ProtoMessage() {}
func (*ApplicationHandlerRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_broker_8e35c67ec6a61fd9, []int{12}
}
func (m *ApplicationHandlerRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ApplicationHandlerRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ApplicationHandlerRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ApplicationHandlerRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplicationHandlerRegistration.Merge(dst, src)
}
func (m *ApplicationHandlerRegistration) XXX_Size() int {
	return m.Size()
}
func (m *ApplicationHandlerRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplicationHandlerRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ApplicationHandlerRegistration proto.InternalMessageInfo

func (m *ApplicationHandlerRegistration) GetAppID() string {
	if m != nil {
		return m.AppID
	}
	return ""
}

func (m *ApplicationHandlerRegistration) GetHandlerID() string {
	if m != nil {
		return m.HandlerID
	}
	return ""
}

func init() {
	proto.RegisterType((*DownlinkOption)(nil), "broker.DownlinkOption")
	golang_proto.RegisterType((*DownlinkOption)(nil), "broker.DownlinkOption")
	proto.RegisterType((*UplinkMessage)(nil), "broker.UplinkMessage")
	golang_proto.RegisterType((*UplinkMessage)(nil), "broker.UplinkMessage")
	proto.RegisterType((*DownlinkMessage)(nil), "broker.DownlinkMessage")
	golang_proto.RegisterType((*DownlinkMessage)(nil), "broker.DownlinkMessage")
	proto.RegisterType((*DeviceActivationResponse)(nil), "broker.DeviceActivationResponse")
	golang_proto.RegisterType((*DeviceActivationResponse)(nil), "broker.DeviceActivationResponse")
	proto.RegisterType((*DeduplicatedUplinkMessage)(nil), "broker.DeduplicatedUplinkMessage")
	golang_proto.RegisterType((*DeduplicatedUplinkMessage)(nil), "broker.DeduplicatedUplinkMessage")
	proto.RegisterType((*DeviceActivationRequest)(nil), "broker.DeviceActivationRequest")
	golang_proto.RegisterType((*DeviceActivationRequest)(nil), "broker.DeviceActivationRequest")
	proto.RegisterType((*DeduplicatedDeviceActivationRequest)(nil), "broker.DeduplicatedDeviceActivationRequest")
	golang_proto.RegisterType((*DeduplicatedDeviceActivationRequest)(nil), "broker.DeduplicatedDeviceActivationRequest")
	proto.RegisterType((*ActivationChallengeRequest)(nil), "broker.ActivationChallengeRequest")
	golang_proto.RegisterType((*ActivationChallengeRequest)(nil), "broker.ActivationChallengeRequest")
	proto.RegisterType((*ActivationChallengeResponse)(nil), "broker.ActivationChallengeResponse")
	golang_proto.RegisterType((*ActivationChallengeResponse)(nil), "broker.ActivationChallengeResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "broker.SubscribeRequest")
	golang_proto.RegisterType((*SubscribeRequest)(nil), "broker.SubscribeRequest")
	proto.RegisterType((*StatusRequest)(nil), "broker.StatusRequest")
	golang_proto.RegisterType((*StatusRequest)(nil), "broker.StatusRequest")
	proto.RegisterType((*Status)(nil), "broker.Status")
	golang_proto.RegisterType((*Status)(nil), "broker.Status")
	proto.RegisterType((*ApplicationHandlerRegistration)(nil), "broker.ApplicationHandlerRegistration")
	golang_proto.RegisterType((*ApplicationHandlerRegistration)(nil), "broker.ApplicationHandlerRegistration")
}
func (this *DownlinkOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkOption)
	if !ok {
		that2, ok := that.(DownlinkOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.GatewayID != that1.GatewayID {
		return false
	}
	if this.Score != that1.Score {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	if !this.ProtocolConfiguration.Equal(&that1.ProtocolConfiguration) {
		return false
	}
	if !this.GatewayConfiguration.Equal(&that1.GatewayConfiguration) {
		return false
	}
	return true
}
func (this *UplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UplinkMessage)
	if !ok {
		that2, ok := that.(UplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if that1.DevEUI == nil {
		if this.DevEUI != nil {
			return false
		}
	} else if !this.DevEUI.Equal(*that1.DevEUI) {
		return false
	}
	if that1.AppEUI == nil {
		if this.AppEUI != nil {
			return false
		}
	} else if !this.AppEUI.Equal(*that1.AppEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if !this.GatewayMetadata.Equal(&that1.GatewayMetadata) {
		return false
	}
	if len(this.DownlinkOptions) != len(that1.DownlinkOptions) {
		return false
	}
	for i := range this.DownlinkOptions {
		if !this.DownlinkOptions[i].Equal(that1.DownlinkOptions[i]) {
			return false
		}
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DownlinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownlinkMessage)
	if !ok {
		that2, ok := that.(DownlinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	if !this.DownlinkOption.Equal(that1.DownlinkOption) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeviceActivationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceActivationResponse)
	if !ok {
		that2, ok := that.(DeviceActivationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DownlinkOption.Equal(that1.DownlinkOption) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeduplicatedUplinkMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeduplicatedUplinkMessage)
	if !ok {
		that2, ok := that.(DeduplicatedUplinkMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if that1.DevEUI == nil {
		if this.DevEUI != nil {
			return false
		}
	} else if !this.DevEUI.Equal(*that1.DevEUI) {
		return false
	}
	if that1.AppEUI == nil {
		if this.AppEUI != nil {
			return false
		}
	} else if !this.AppEUI.Equal(*that1.AppEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if len(this.GatewayMetadata) != len(that1.GatewayMetadata) {
		return false
	}
	for i := range this.GatewayMetadata {
		if !this.GatewayMetadata[i].Equal(that1.GatewayMetadata[i]) {
			return false
		}
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if !this.ResponseTemplate.Equal(that1.ResponseTemplate) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeviceActivationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeviceActivationRequest)
	if !ok {
		that2, ok := that.(DeviceActivationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if !this.GatewayMetadata.Equal(&that1.GatewayMetadata) {
		return false
	}
	if !this.ActivationMetadata.Equal(that1.ActivationMetadata) {
		return false
	}
	if len(this.DownlinkOptions) != len(that1.DownlinkOptions) {
		return false
	}
	for i := range this.DownlinkOptions {
		if !this.DownlinkOptions[i].Equal(that1.DownlinkOptions[i]) {
			return false
		}
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *DeduplicatedDeviceActivationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeduplicatedDeviceActivationRequest)
	if !ok {
		that2, ok := that.(DeduplicatedDeviceActivationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	if !this.ProtocolMetadata.Equal(&that1.ProtocolMetadata) {
		return false
	}
	if len(this.GatewayMetadata) != len(that1.GatewayMetadata) {
		return false
	}
	for i := range this.GatewayMetadata {
		if !this.GatewayMetadata[i].Equal(that1.GatewayMetadata[i]) {
			return false
		}
	}
	if !this.ActivationMetadata.Equal(that1.ActivationMetadata) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if !this.ResponseTemplate.Equal(that1.ResponseTemplate) {
		return false
	}
	if !this.Trace.Equal(that1.Trace) {
		return false
	}
	return true
}
func (this *ActivationChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationChallengeRequest)
	if !ok {
		that2, ok := that.(ActivationChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	if !this.AppEUI.Equal(that1.AppEUI) {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.DevID != that1.DevID {
		return false
	}
	return true
}
func (this *ActivationChallengeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActivationChallengeResponse)
	if !ok {
		that2, ok := that.(ActivationChallengeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *SubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeRequest)
	if !ok {
		that2, ok := that.(SubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.System.Equal(&that1.System) {
		return false
	}
	if !this.Component.Equal(&that1.Component) {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	if !this.UplinkUnique.Equal(that1.UplinkUnique) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if !this.Activations.Equal(that1.Activations) {
		return false
	}
	if !this.ActivationsUnique.Equal(that1.ActivationsUnique) {
		return false
	}
	if !this.Deduplication.Equal(that1.Deduplication) {
		return false
	}
	if this.ConnectedRouters != that1.ConnectedRouters {
		return false
	}
	if this.ConnectedHandlers != that1.ConnectedHandlers {
		return false
	}
	return true
}
func (this *ApplicationHandlerRegistration) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ApplicationHandlerRegistration)
	if !ok {
		that2, ok := that.(ApplicationHandlerRegistration)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppID != that1.AppID {
		return false
	}
	if this.HandlerID != that1.HandlerID {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Broker service

type BrokerClient interface {
	// Router initiates an Association with the Broker.
	Associate(ctx context.Context, opts ...grpc.CallOption) (Broker_AssociateClient, error)
	// Handler subscribes to uplink stream.
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Broker_SubscribeClient, error)
	// Handler initiates downlink stream.
	Publish(ctx context.Context, opts ...grpc.CallOption) (Broker_PublishClient, error)
	// Router requests device activation
	Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Associate(ctx context.Context, opts ...grpc.CallOption) (Broker_AssociateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[0], "/broker.Broker/Associate", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerAssociateClient{stream}
	return x, nil
}

type Broker_AssociateClient interface {
	Send(*UplinkMessage) error
	Recv() (*DownlinkMessage, error)
	grpc.ClientStream
}

type brokerAssociateClient struct {
	grpc.ClientStream
}

func (x *brokerAssociateClient) Send(m *UplinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerAssociateClient) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (Broker_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[1], "/broker.Broker/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Broker_SubscribeClient interface {
	Recv() (*DeduplicatedUplinkMessage, error)
	grpc.ClientStream
}

type brokerSubscribeClient struct {
	grpc.ClientStream
}

func (x *brokerSubscribeClient) Recv() (*DeduplicatedUplinkMessage, error) {
	m := new(DeduplicatedUplinkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Broker_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[2], "/broker.Broker/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerPublishClient{stream}
	return x, nil
}

type Broker_PublishClient interface {
	Send(*DownlinkMessage) error
	CloseAndRecv() (*types.Empty, error)
	grpc.ClientStream
}

type brokerPublishClient struct {
	grpc.ClientStream
}

func (x *brokerPublishClient) Send(m *DownlinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerPublishClient) CloseAndRecv() (*types.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(types.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brokerClient) Activate(ctx context.Context, in *DeviceActivationRequest, opts ...grpc.CallOption) (*DeviceActivationResponse, error) {
	out := new(DeviceActivationResponse)
	err := c.cc.Invoke(ctx, "/broker.Broker/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Broker service

type BrokerServer interface {
	// Router initiates an Association with the Broker.
	Associate(Broker_AssociateServer) error
	// Handler subscribes to uplink stream.
	Subscribe(*SubscribeRequest, Broker_SubscribeServer) error
	// Handler initiates downlink stream.
	Publish(Broker_PublishServer) error
	// Router requests device activation
	Activate(context.Context, *DeviceActivationRequest) (*DeviceActivationResponse, error)
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Associate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Associate(&brokerAssociateServer{stream})
}

type Broker_AssociateServer interface {
	Send(*DownlinkMessage) error
	Recv() (*UplinkMessage, error)
	grpc.ServerStream
}

type brokerAssociateServer struct {
	grpc.ServerStream
}

func (x *brokerAssociateServer) Send(m *DownlinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerAssociateServer) Recv() (*UplinkMessage, error) {
	m := new(UplinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerServer).Subscribe(m, &brokerSubscribeServer{stream})
}

type Broker_SubscribeServer interface {
	Send(*DeduplicatedUplinkMessage) error
	grpc.ServerStream
}

type brokerSubscribeServer struct {
	grpc.ServerStream
}

func (x *brokerSubscribeServer) Send(m *DeduplicatedUplinkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Broker_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Publish(&brokerPublishServer{stream})
}

type Broker_PublishServer interface {
	SendAndClose(*types.Empty) error
	Recv() (*DownlinkMessage, error)
	grpc.ServerStream
}

type brokerPublishServer struct {
	grpc.ServerStream
}

func (x *brokerPublishServer) SendAndClose(m *types.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerPublishServer) Recv() (*DownlinkMessage, error) {
	m := new(DownlinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Broker_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.Broker/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Activate(ctx, req.(*DeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Broker_Activate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Associate",
			Handler:       _Broker_Associate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Broker_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _Broker_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/TheThingsNetwork/api/broker/broker.proto",
}

// Client API for BrokerManager service

type BrokerManagerClient interface {
	// Handler announces a new application to Broker. This is a temporary method that will be removed
	// when we can push updates from the Discovery service to the routing services.
	RegisterApplicationHandler(ctx context.Context, in *ApplicationHandlerRegistration, opts ...grpc.CallOption) (*types.Empty, error)
	// Network operator requests Broker status
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type brokerManagerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerManagerClient(cc *grpc.ClientConn) BrokerManagerClient {
	return &brokerManagerClient{cc}
}

func (c *brokerManagerClient) RegisterApplicationHandler(ctx context.Context, in *ApplicationHandlerRegistration, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/broker.BrokerManager/RegisterApplicationHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/broker.BrokerManager/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BrokerManager service

type BrokerManagerServer interface {
	// Handler announces a new application to Broker. This is a temporary method that will be removed
	// when we can push updates from the Discovery service to the routing services.
	RegisterApplicationHandler(context.Context, *ApplicationHandlerRegistration) (*types.Empty, error)
	// Network operator requests Broker status
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterBrokerManagerServer(s *grpc.Server, srv BrokerManagerServer) {
	s.RegisterService(&_BrokerManager_serviceDesc, srv)
}

func _BrokerManager_RegisterApplicationHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationHandlerRegistration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).RegisterApplicationHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/RegisterApplicationHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).RegisterApplicationHandler(ctx, req.(*ApplicationHandlerRegistration))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker.BrokerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker.BrokerManager",
	HandlerType: (*BrokerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterApplicationHandler",
			Handler:    _BrokerManager_RegisterApplicationHandler_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _BrokerManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/broker/broker.proto",
}

func (m *DownlinkOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if len(m.GatewayID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.GatewayID)))
		i += copy(dAtA[i:], m.GatewayID)
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Score))
	}
	if m.Deadline != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Deadline))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.ProtocolConfiguration.Size()))
	n1, err := m.ProtocolConfiguration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x32
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.GatewayConfiguration.Size()))
	n2, err := m.GatewayConfiguration.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *UplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n3, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DevEUI != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
		n4, err := m.DevEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AppEUI != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
		n5, err := m.AppEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n6, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.GatewayMetadata.Size()))
	n7, err := m.GatewayMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.DownlinkOptions) > 0 {
		for _, msg := range m.DownlinkOptions {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Trace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n8, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *DownlinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownlinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n9, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
	n10, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	dAtA[i] = 0x62
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
	n11, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	if m.DownlinkOption != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.DownlinkOption.Size()))
		n12, err := m.DownlinkOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Trace != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n13, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *DeviceActivationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivationResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n14, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.DownlinkOption != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.DownlinkOption.Size()))
		n15, err := m.DownlinkOption.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Trace != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n16, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *DeduplicatedUplinkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeduplicatedUplinkMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n17, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.DevEUI != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
		n18, err := m.DevEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.AppEUI != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
		n19, err := m.AppEUI.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n20, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	if len(m.GatewayMetadata) > 0 {
		for _, msg := range m.GatewayMetadata {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ServerTime))
	}
	if m.ResponseTemplate != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ResponseTemplate.Size()))
		n21, err := m.ResponseTemplate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Trace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n22, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *DeviceActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n23, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
	n24, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x62
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
	n25, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n26, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.GatewayMetadata.Size()))
	n27, err := m.GatewayMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.ActivationMetadata != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ActivationMetadata.Size()))
		n28, err := m.ActivationMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if len(m.DownlinkOptions) > 0 {
		for _, msg := range m.DownlinkOptions {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Trace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n29, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *DeduplicatedDeviceActivationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeduplicatedDeviceActivationRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n30, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
	n31, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	dAtA[i] = 0x62
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
	n32, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n32
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.ProtocolMetadata.Size()))
	n33, err := m.ProtocolMetadata.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n33
	if len(m.GatewayMetadata) > 0 {
		for _, msg := range m.GatewayMetadata {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintBroker(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ActivationMetadata != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ActivationMetadata.Size()))
		n34, err := m.ActivationMetadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ServerTime))
	}
	if m.ResponseTemplate != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ResponseTemplate.Size()))
		n35, err := m.ResponseTemplate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Trace != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Trace.Size()))
		n36, err := m.Trace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	return i, nil
}

func (m *ActivationChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n37, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.DevEUI.Size()))
	n38, err := m.DevEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	dAtA[i] = 0x62
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.AppEUI.Size()))
	n39, err := m.AppEUI.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n39
	if len(m.AppID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.DevID) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.DevID)))
		i += copy(dAtA[i:], m.DevID)
	}
	return i, nil
}

func (m *ActivationChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivationChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.Message != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Message.Size()))
		n40, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.System.Size()))
	n41, err := m.System.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	dAtA[i] = 0x12
	i++
	i = encodeVarintBroker(dAtA, i, uint64(m.Component.Size()))
	n42, err := m.Component.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n42
	if m.Uplink != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Uplink.Size()))
		n43, err := m.Uplink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.UplinkUnique != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.UplinkUnique.Size()))
		n44, err := m.UplinkUnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.Downlink != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Downlink.Size()))
		n45, err := m.Downlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.Activations != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Activations.Size()))
		n46, err := m.Activations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.ActivationsUnique != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ActivationsUnique.Size()))
		n47, err := m.ActivationsUnique.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.Deduplication != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.Deduplication.Size()))
		n48, err := m.Deduplication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.ConnectedRouters != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ConnectedRouters))
	}
	if m.ConnectedHandlers != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBroker(dAtA, i, uint64(m.ConnectedHandlers))
	}
	return i, nil
}

func (m *ApplicationHandlerRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplicationHandlerRegistration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.AppID)))
		i += copy(dAtA[i:], m.AppID)
	}
	if len(m.HandlerID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBroker(dAtA, i, uint64(len(m.HandlerID)))
		i += copy(dAtA[i:], m.HandlerID)
	}
	return i, nil
}

func encodeVarintBroker(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDownlinkOption(r randyBroker, easy bool) *DownlinkOption {
	this := &DownlinkOption{}
	this.Identifier = string(randStringBroker(r))
	this.GatewayID = string(randStringBroker(r))
	this.Score = uint32(r.Uint32())
	this.Deadline = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Deadline *= -1
	}
	v1 := protocol.NewPopulatedTxConfiguration(r, easy)
	this.ProtocolConfiguration = *v1
	v2 := gateway.NewPopulatedTxConfiguration(r, easy)
	this.GatewayConfiguration = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUplinkMessage(r randyBroker, easy bool) *UplinkMessage {
	this := &UplinkMessage{}
	v3 := r.Intn(100)
	this.Payload = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	this.DevEUI = github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.AppEUI = github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppID = string(randStringBroker(r))
	this.DevID = string(randStringBroker(r))
	v4 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v4
	v5 := gateway.NewPopulatedRxMetadata(r, easy)
	this.GatewayMetadata = *v5
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.DownlinkOptions = make([]*DownlinkOption, v6)
		for i := 0; i < v6; i++ {
			this.DownlinkOptions[i] = NewPopulatedDownlinkOption(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDownlinkMessage(r randyBroker, easy bool) *DownlinkMessage {
	this := &DownlinkMessage{}
	v7 := r.Intn(100)
	this.Payload = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v8 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.DevEUI = *v8
	v9 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppEUI = *v9
	this.AppID = string(randStringBroker(r))
	this.DevID = string(randStringBroker(r))
	if r.Intn(10) != 0 {
		this.DownlinkOption = NewPopulatedDownlinkOption(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceActivationResponse(r randyBroker, easy bool) *DeviceActivationResponse {
	this := &DeviceActivationResponse{}
	v10 := r.Intn(100)
	this.Payload = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DownlinkOption = NewPopulatedDownlinkOption(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeduplicatedUplinkMessage(r randyBroker, easy bool) *DeduplicatedUplinkMessage {
	this := &DeduplicatedUplinkMessage{}
	v11 := r.Intn(100)
	this.Payload = make([]byte, v11)
	for i := 0; i < v11; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	this.DevEUI = github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.AppEUI = github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppID = string(randStringBroker(r))
	this.DevID = string(randStringBroker(r))
	v12 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v12
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.GatewayMetadata = make([]*gateway.RxMetadata, v13)
		for i := 0; i < v13; i++ {
			this.GatewayMetadata[i] = gateway.NewPopulatedRxMetadata(r, easy)
		}
	}
	this.ServerTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ServerTime *= -1
	}
	if r.Intn(10) != 0 {
		this.ResponseTemplate = NewPopulatedDownlinkMessage(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeviceActivationRequest(r randyBroker, easy bool) *DeviceActivationRequest {
	this := &DeviceActivationRequest{}
	v14 := r.Intn(100)
	this.Payload = make([]byte, v14)
	for i := 0; i < v14; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v15 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.DevEUI = *v15
	v16 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppEUI = *v16
	v17 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v17
	v18 := gateway.NewPopulatedRxMetadata(r, easy)
	this.GatewayMetadata = *v18
	if r.Intn(10) != 0 {
		this.ActivationMetadata = protocol.NewPopulatedActivationMetadata(r, easy)
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.DownlinkOptions = make([]*DownlinkOption, v19)
		for i := 0; i < v19; i++ {
			this.DownlinkOptions[i] = NewPopulatedDownlinkOption(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeduplicatedDeviceActivationRequest(r randyBroker, easy bool) *DeduplicatedDeviceActivationRequest {
	this := &DeduplicatedDeviceActivationRequest{}
	v20 := r.Intn(100)
	this.Payload = make([]byte, v20)
	for i := 0; i < v20; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v21 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.DevEUI = *v21
	v22 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppEUI = *v22
	this.AppID = string(randStringBroker(r))
	this.DevID = string(randStringBroker(r))
	v23 := protocol.NewPopulatedRxMetadata(r, easy)
	this.ProtocolMetadata = *v23
	if r.Intn(10) != 0 {
		v24 := r.Intn(5)
		this.GatewayMetadata = make([]*gateway.RxMetadata, v24)
		for i := 0; i < v24; i++ {
			this.GatewayMetadata[i] = gateway.NewPopulatedRxMetadata(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.ActivationMetadata = protocol.NewPopulatedActivationMetadata(r, easy)
	}
	this.ServerTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ServerTime *= -1
	}
	if r.Intn(10) != 0 {
		this.ResponseTemplate = NewPopulatedDeviceActivationResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Trace = trace.NewPopulatedTrace(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedActivationChallengeRequest(r randyBroker, easy bool) *ActivationChallengeRequest {
	this := &ActivationChallengeRequest{}
	v25 := r.Intn(100)
	this.Payload = make([]byte, v25)
	for i := 0; i < v25; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	v26 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevEUI(r)
	this.DevEUI = *v26
	v27 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedAppEUI(r)
	this.AppEUI = *v27
	this.AppID = string(randStringBroker(r))
	this.DevID = string(randStringBroker(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedActivationChallengeResponse(r randyBroker, easy bool) *ActivationChallengeResponse {
	this := &ActivationChallengeResponse{}
	v28 := r.Intn(100)
	this.Payload = make([]byte, v28)
	for i := 0; i < v28; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.Message = protocol.NewPopulatedMessage(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSubscribeRequest(r randyBroker, easy bool) *SubscribeRequest {
	this := &SubscribeRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyBroker, easy bool) *StatusRequest {
	this := &StatusRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus(r randyBroker, easy bool) *Status {
	this := &Status{}
	v29 := api.NewPopulatedSystemStats(r, easy)
	this.System = *v29
	v30 := api.NewPopulatedComponentStats(r, easy)
	this.Component = *v30
	if r.Intn(10) != 0 {
		this.Uplink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.UplinkUnique = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Downlink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Activations = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ActivationsUnique = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Deduplication = api.NewPopulatedPercentiles(r, easy)
	}
	this.ConnectedRouters = uint32(r.Uint32())
	this.ConnectedHandlers = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedApplicationHandlerRegistration(r randyBroker, easy bool) *ApplicationHandlerRegistration {
	this := &ApplicationHandlerRegistration{}
	this.AppID = string(randStringBroker(r))
	this.HandlerID = string(randStringBroker(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyBroker interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBroker(r randyBroker) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBroker(r randyBroker) string {
	v31 := r.Intn(100)
	tmps := make([]rune, v31)
	for i := 0; i < v31; i++ {
		tmps[i] = randUTF8RuneBroker(r)
	}
	return string(tmps)
}
func randUnrecognizedBroker(r randyBroker, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBroker(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBroker(dAtA []byte, r randyBroker, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(key))
		v32 := r.Int63()
		if r.Intn(2) == 0 {
			v32 *= -1
		}
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(v32))
	case 1:
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBroker(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBroker(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DownlinkOption) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.GatewayID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovBroker(uint64(m.Score))
	}
	if m.Deadline != 0 {
		n += 1 + sovBroker(uint64(m.Deadline))
	}
	l = m.ProtocolConfiguration.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.GatewayConfiguration.Size()
	n += 1 + l + sovBroker(uint64(l))
	return n
}

func (m *UplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DevEUI != nil {
		l = m.DevEUI.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.AppEUI != nil {
		l = m.AppEUI.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.ProtocolMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	l = m.GatewayMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	if len(m.DownlinkOptions) > 0 {
		for _, e := range m.DownlinkOptions {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DownlinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.AppEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeviceActivationResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DownlinkOption != nil {
		l = m.DownlinkOption.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeduplicatedUplinkMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.DevEUI != nil {
		l = m.DevEUI.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.AppEUI != nil {
		l = m.AppEUI.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.ProtocolMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	if len(m.GatewayMetadata) > 0 {
		for _, e := range m.GatewayMetadata {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	if m.ServerTime != 0 {
		n += 2 + sovBroker(uint64(m.ServerTime))
	}
	if m.ResponseTemplate != nil {
		l = m.ResponseTemplate.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.AppEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.ProtocolMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	l = m.GatewayMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if len(m.DownlinkOptions) > 0 {
		for _, e := range m.DownlinkOptions {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *DeduplicatedDeviceActivationRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.AppEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.ProtocolMetadata.Size()
	n += 2 + l + sovBroker(uint64(l))
	if len(m.GatewayMetadata) > 0 {
		for _, e := range m.GatewayMetadata {
			l = e.Size()
			n += 2 + l + sovBroker(uint64(l))
		}
	}
	if m.ActivationMetadata != nil {
		l = m.ActivationMetadata.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 2 + sovBroker(uint64(m.ServerTime))
	}
	if m.ResponseTemplate != nil {
		l = m.ResponseTemplate.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.Trace != nil {
		l = m.Trace.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *ActivationChallengeRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	l = m.DevEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.AppEUI.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.DevID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *ActivationChallengeResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	l = m.System.Size()
	n += 1 + l + sovBroker(uint64(l))
	l = m.Component.Size()
	n += 1 + l + sovBroker(uint64(l))
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.UplinkUnique != nil {
		l = m.UplinkUnique.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.ActivationsUnique != nil {
		l = m.ActivationsUnique.Size()
		n += 1 + l + sovBroker(uint64(l))
	}
	if m.Deduplication != nil {
		l = m.Deduplication.Size()
		n += 2 + l + sovBroker(uint64(l))
	}
	if m.ConnectedRouters != 0 {
		n += 2 + sovBroker(uint64(m.ConnectedRouters))
	}
	if m.ConnectedHandlers != 0 {
		n += 2 + sovBroker(uint64(m.ConnectedHandlers))
	}
	return n
}

func (m *ApplicationHandlerRegistration) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	l = len(m.HandlerID)
	if l > 0 {
		n += 1 + l + sovBroker(uint64(l))
	}
	return n
}

func sovBroker(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBroker(x uint64) (n int) {
	return sovBroker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DownlinkOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkOption{`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`GatewayID:` + fmt.Sprintf("%v", this.GatewayID) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Deadline:` + fmt.Sprintf("%v", this.Deadline) + `,`,
		`ProtocolConfiguration:` + strings.Replace(strings.Replace(this.ProtocolConfiguration.String(), "TxConfiguration", "protocol.TxConfiguration", 1), `&`, ``, 1) + `,`,
		`GatewayConfiguration:` + strings.Replace(strings.Replace(this.GatewayConfiguration.String(), "TxConfiguration", "gateway.TxConfiguration", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UplinkMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(strings.Replace(this.GatewayMetadata.String(), "RxMetadata", "gateway.RxMetadata", 1), `&`, ``, 1) + `,`,
		`DownlinkOptions:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkOptions), "DownlinkOption", "DownlinkOption", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DownlinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DownlinkMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`DownlinkOption:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkOption), "DownlinkOption", "DownlinkOption", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceActivationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceActivationResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DownlinkOption:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkOption), "DownlinkOption", "DownlinkOption", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeduplicatedUplinkMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeduplicatedUplinkMessage{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(fmt.Sprintf("%v", this.GatewayMetadata), "RxMetadata", "gateway.RxMetadata", 1) + `,`,
		`ServerTime:` + fmt.Sprintf("%v", this.ServerTime) + `,`,
		`ResponseTemplate:` + strings.Replace(fmt.Sprintf("%v", this.ResponseTemplate), "DownlinkMessage", "DownlinkMessage", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeviceActivationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeviceActivationRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(strings.Replace(this.GatewayMetadata.String(), "RxMetadata", "gateway.RxMetadata", 1), `&`, ``, 1) + `,`,
		`ActivationMetadata:` + strings.Replace(fmt.Sprintf("%v", this.ActivationMetadata), "ActivationMetadata", "protocol.ActivationMetadata", 1) + `,`,
		`DownlinkOptions:` + strings.Replace(fmt.Sprintf("%v", this.DownlinkOptions), "DownlinkOption", "DownlinkOption", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeduplicatedDeviceActivationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeduplicatedDeviceActivationRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`ProtocolMetadata:` + strings.Replace(strings.Replace(this.ProtocolMetadata.String(), "RxMetadata", "protocol.RxMetadata", 1), `&`, ``, 1) + `,`,
		`GatewayMetadata:` + strings.Replace(fmt.Sprintf("%v", this.GatewayMetadata), "RxMetadata", "gateway.RxMetadata", 1) + `,`,
		`ActivationMetadata:` + strings.Replace(fmt.Sprintf("%v", this.ActivationMetadata), "ActivationMetadata", "protocol.ActivationMetadata", 1) + `,`,
		`ServerTime:` + fmt.Sprintf("%v", this.ServerTime) + `,`,
		`ResponseTemplate:` + strings.Replace(fmt.Sprintf("%v", this.ResponseTemplate), "DeviceActivationResponse", "DeviceActivationResponse", 1) + `,`,
		`Trace:` + strings.Replace(fmt.Sprintf("%v", this.Trace), "Trace", "trace.Trace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationChallengeRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`AppEUI:` + fmt.Sprintf("%v", this.AppEUI) + `,`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`DevID:` + fmt.Sprintf("%v", this.DevID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ActivationChallengeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActivationChallengeResponse{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Message", "protocol.Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`System:` + strings.Replace(strings.Replace(this.System.String(), "SystemStats", "api.SystemStats", 1), `&`, ``, 1) + `,`,
		`Component:` + strings.Replace(strings.Replace(this.Component.String(), "ComponentStats", "api.ComponentStats", 1), `&`, ``, 1) + `,`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "Rates", "api.Rates", 1) + `,`,
		`UplinkUnique:` + strings.Replace(fmt.Sprintf("%v", this.UplinkUnique), "Rates", "api.Rates", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "Rates", "api.Rates", 1) + `,`,
		`Activations:` + strings.Replace(fmt.Sprintf("%v", this.Activations), "Rates", "api.Rates", 1) + `,`,
		`ActivationsUnique:` + strings.Replace(fmt.Sprintf("%v", this.ActivationsUnique), "Rates", "api.Rates", 1) + `,`,
		`Deduplication:` + strings.Replace(fmt.Sprintf("%v", this.Deduplication), "Percentiles", "api.Percentiles", 1) + `,`,
		`ConnectedRouters:` + fmt.Sprintf("%v", this.ConnectedRouters) + `,`,
		`ConnectedHandlers:` + fmt.Sprintf("%v", this.ConnectedHandlers) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ApplicationHandlerRegistration) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ApplicationHandlerRegistration{`,
		`AppID:` + fmt.Sprintf("%v", this.AppID) + `,`,
		`HandlerID:` + fmt.Sprintf("%v", this.HandlerID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBroker(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DownlinkOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEUI = &v
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEUI = &v
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkOptions = append(m.DownlinkOptions, &DownlinkOption{})
			if err := m.DownlinkOptions[len(m.DownlinkOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownlinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownlinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownlinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOption", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DownlinkOption == nil {
				m.DownlinkOption = &DownlinkOption{}
			}
			if err := m.DownlinkOption.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeduplicatedUplinkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeduplicatedUplinkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeduplicatedUplinkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.DevEUI
			m.DevEUI = &v
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_TheThingsNetwork_ttn_core_types.AppEUI
			m.AppEUI = &v
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayMetadata = append(m.GatewayMetadata, &gateway.RxMetadata{})
			if err := m.GatewayMetadata[len(m.GatewayMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseTemplate == nil {
				m.ResponseTemplate = &DownlinkMessage{}
			}
			if err := m.ResponseTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GatewayMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownlinkOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownlinkOptions = append(m.DownlinkOptions, &DownlinkOption{})
			if err := m.DownlinkOptions[len(m.DownlinkOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeduplicatedDeviceActivationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeduplicatedDeviceActivationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeduplicatedDeviceActivationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayMetadata = append(m.GatewayMetadata, &gateway.RxMetadata{})
			if err := m.GatewayMetadata[len(m.GatewayMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationMetadata == nil {
				m.ActivationMetadata = &protocol.ActivationMetadata{}
			}
			if err := m.ActivationMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResponseTemplate == nil {
				m.ResponseTemplate = &DeviceActivationResponse{}
			}
			if err := m.ResponseTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trace == nil {
				m.Trace = &trace.Trace{}
			}
			if err := m.Trace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivationChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivationChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivationChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &protocol.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UplinkUnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UplinkUnique == nil {
				m.UplinkUnique = &api.Rates{}
			}
			if err := m.UplinkUnique.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationsUnique", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationsUnique == nil {
				m.ActivationsUnique = &api.Rates{}
			}
			if err := m.ActivationsUnique.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deduplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deduplication == nil {
				m.Deduplication = &api.Percentiles{}
			}
			if err := m.Deduplication.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedRouters", wireType)
			}
			m.ConnectedRouters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedRouters |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectedHandlers", wireType)
			}
			m.ConnectedHandlers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectedHandlers |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplicationHandlerRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplicationHandlerRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplicationHandlerRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HandlerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBroker
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HandlerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBroker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBroker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBroker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBroker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBroker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBroker
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBroker
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBroker(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBroker = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBroker   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/broker/broker.proto", fileDescriptor_broker_8e35c67ec6a61fd9)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/broker/broker.proto", fileDescriptor_broker_8e35c67ec6a61fd9)
}

var fileDescriptor_broker_8e35c67ec6a61fd9 = []byte{
	// 1434 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4d, 0x6c, 0x13, 0x47,
	0x14, 0xde, 0xc9, 0x8f, 0x83, 0x9f, 0xe3, 0xc4, 0x19, 0x48, 0xb2, 0x98, 0x6a, 0x9c, 0xba, 0x12,
	0x0a, 0x02, 0xd6, 0x34, 0xa8, 0x45, 0x95, 0xaa, 0xa2, 0x24, 0x46, 0xd4, 0x95, 0xd2, 0x46, 0x9b,
	0x50, 0x55, 0x15, 0x92, 0xb5, 0xf1, 0x0e, 0xce, 0x08, 0x7b, 0x77, 0xd9, 0x1d, 0x1b, 0x72, 0xe3,
	0xc8, 0xb1, 0xc7, 0x1e, 0xdb, 0x9e, 0x50, 0x4f, 0x1c, 0xb9, 0x20, 0x71, 0xa8, 0x2a, 0x8e, 0x1c,
	0x51, 0x0f, 0x11, 0x5e, 0x5f, 0x50, 0x2b, 0x55, 0x1c, 0x39, 0x56, 0x3b, 0x3b, 0xbb, 0x6b, 0x3b,
	0x31, 0x41, 0x51, 0x5a, 0x21, 0x35, 0x17, 0x7b, 0xe6, 0xbd, 0xef, 0xbd, 0x99, 0x79, 0x3f, 0xdf,
	0xce, 0x2e, 0x5c, 0xae, 0x33, 0xbe, 0xdd, 0xda, 0xd2, 0x6a, 0x76, 0xb3, 0xb4, 0xb9, 0x4d, 0x37,
	0xb7, 0x99, 0x55, 0xf7, 0xbe, 0xa6, 0xfc, 0xae, 0xed, 0xde, 0x2e, 0x19, 0x0e, 0x2b, 0x6d, 0xb9,
	0xf6, 0x6d, 0xea, 0xca, 0x3f, 0xcd, 0x71, 0x6d, 0x6e, 0xe3, 0x54, 0x38, 0xcb, 0x9f, 0xa9, 0xdb,
	0x76, 0xbd, 0x41, 0x4b, 0x42, 0xba, 0xd5, 0xba, 0x55, 0xa2, 0x4d, 0x87, 0xef, 0x84, 0xa0, 0xfc,
	0xc5, 0x1e, 0xcf, 0x75, 0xbb, 0x6e, 0x27, 0xa8, 0x60, 0x26, 0x26, 0x62, 0x24, 0xe1, 0xe7, 0x0e,
	0xda, 0x88, 0xe1, 0x30, 0x09, 0xbd, 0x72, 0x10, 0x54, 0xc0, 0x6a, 0x76, 0x23, 0x1e, 0x48, 0xc3,
	0x4f, 0x0e, 0x32, 0xac, 0x1b, 0x9c, 0xde, 0x35, 0x76, 0xa2, 0x7f, 0x69, 0xf6, 0xf1, 0x41, 0x66,
	0xdc, 0x35, 0x6a, 0x34, 0xfc, 0x0d, 0x4d, 0x8a, 0x4f, 0x46, 0x60, 0xaa, 0x6c, 0xdf, 0xb5, 0x1a,
	0xcc, 0xba, 0xfd, 0x8d, 0xc3, 0x99, 0x6d, 0x61, 0x02, 0xc0, 0x4c, 0x6a, 0x71, 0x76, 0x8b, 0x51,
	0x57, 0x45, 0x0b, 0x68, 0x31, 0xad, 0xf7, 0x48, 0xf0, 0x05, 0x00, 0xb9, 0x6c, 0x95, 0x99, 0xea,
	0x48, 0xa0, 0x5f, 0xc9, 0xfa, 0xbb, 0x85, 0xf4, 0xf5, 0x50, 0x5a, 0x29, 0xeb, 0x69, 0x09, 0xa8,
	0x98, 0xf8, 0x14, 0x8c, 0x7b, 0x35, 0xdb, 0xa5, 0xea, 0xe8, 0x02, 0x5a, 0xcc, 0xea, 0xe1, 0x04,
	0xe7, 0xe1, 0x84, 0x49, 0x0d, 0xb3, 0xc1, 0x2c, 0xaa, 0x8e, 0x2d, 0xa0, 0xc5, 0x51, 0x3d, 0x9e,
	0xe3, 0x6f, 0x61, 0x2e, 0x0a, 0x47, 0xb5, 0x66, 0x5b, 0xb7, 0x58, 0xbd, 0xe5, 0x1a, 0xc1, 0xce,
	0xd4, 0xf1, 0x05, 0xb4, 0x98, 0x59, 0x3a, 0xad, 0xc5, 0xd1, 0xda, 0xbc, 0xb7, 0xda, 0x0b, 0x58,
	0x19, 0x7b, 0xb6, 0x5b, 0x50, 0xf4, 0xd9, 0x48, 0xdf, 0xa7, 0xc4, 0x1b, 0x30, 0x1b, 0xed, 0xbb,
	0xdf, 0x6d, 0x4a, 0xb8, 0x55, 0xb5, 0x28, 0x98, 0xfb, 0x7b, 0x3d, 0x25, 0xd5, 0x7d, 0xba, 0xe2,
	0x6f, 0x63, 0x90, 0xbd, 0xe1, 0x04, 0xd1, 0x5b, 0xa3, 0x9e, 0x67, 0xd4, 0x29, 0x56, 0x61, 0xc2,
	0x31, 0x76, 0x1a, 0xb6, 0x61, 0x8a, 0xd8, 0x4d, 0xea, 0xd1, 0x14, 0x9f, 0x87, 0x89, 0x66, 0x08,
	0x12, 0x51, 0xcb, 0x2c, 0xcd, 0x24, 0x27, 0x91, 0xd6, 0x7a, 0x84, 0xc0, 0xdf, 0xc1, 0x84, 0x49,
	0xdb, 0x55, 0xda, 0x62, 0x6a, 0x26, 0x70, 0xb3, 0x72, 0xf5, 0x8f, 0xdd, 0xc2, 0x5b, 0x13, 0xcc,
	0xb9, 0x55, 0x0a, 0x82, 0x5b, 0xe2, 0x3b, 0x0e, 0xf5, 0xb4, 0x32, 0x6d, 0x5f, 0xbb, 0x51, 0xf1,
	0x77, 0x0b, 0xa9, 0x70, 0xa4, 0xa7, 0x4c, 0xda, 0xbe, 0xd6, 0x62, 0x81, 0x67, 0xc3, 0x71, 0x84,
	0xe7, 0xc9, 0x43, 0x79, 0x5e, 0x76, 0x1c, 0xe9, 0x39, 0x1c, 0xe9, 0x29, 0xc3, 0x71, 0x02, 0xcf,
	0x0b, 0x10, 0x8c, 0x82, 0xaa, 0xc8, 0x8a, 0xaa, 0x48, 0xfb, 0xbb, 0x85, 0xf1, 0x65, 0xc7, 0xa9,
	0x94, 0xf5, 0x71, 0xc3, 0x71, 0x2a, 0x66, 0x80, 0x08, 0x4e, 0xc5, 0x4c, 0x75, 0x2a, 0x41, 0x94,
	0x69, 0x3b, 0x40, 0x98, 0xb4, 0x5d, 0x31, 0xf1, 0x75, 0x98, 0x89, 0xb3, 0xdf, 0xa4, 0xdc, 0x30,
	0x0d, 0x6e, 0xa8, 0xb3, 0x22, 0x5c, 0xa7, 0x92, 0x70, 0xe9, 0xf7, 0xd6, 0xa4, 0x4e, 0x66, 0x27,
	0x17, 0xa9, 0x22, 0x39, 0x2e, 0x43, 0x2e, 0x4a, 0x77, 0xec, 0x67, 0x4e, 0xf8, 0x39, 0x19, 0x67,
	0x7a, 0x8f, 0x9b, 0x69, 0xa9, 0x89, 0xbd, 0x2c, 0x43, 0xce, 0x94, 0xed, 0x51, 0xb5, 0x45, 0x7f,
	0x78, 0x6a, 0x61, 0x61, 0x74, 0x31, 0xb3, 0x34, 0xa7, 0x49, 0xaa, 0xe9, 0x6f, 0x1f, 0x7d, 0xda,
	0xec, 0x9b, 0x7b, 0xb8, 0x08, 0xe3, 0xa2, 0xe3, 0xd4, 0x73, 0x62, 0xf5, 0x49, 0x2d, 0xec, 0xbf,
	0xcd, 0xe0, 0x57, 0x0f, 0x55, 0xc5, 0x27, 0xa3, 0x30, 0x1d, 0xf9, 0x39, 0xe2, 0x42, 0xba, 0x39,
	0x58, 0x48, 0xab, 0xc1, 0x49, 0x8f, 0xaa, 0x98, 0x6e, 0x0e, 0x16, 0xd3, 0x61, 0xbc, 0xff, 0xab,
	0x05, 0x75, 0x15, 0xa6, 0x07, 0x32, 0x28, 0xcb, 0x69, 0x58, 0x02, 0xa7, 0xfa, 0x13, 0x98, 0xe4,
	0xaf, 0x30, 0x3c, 0x7f, 0xbf, 0x23, 0x50, 0xcb, 0xb4, 0xcd, 0x6a, 0x74, 0xb9, 0xc6, 0x59, 0x5b,
	0x70, 0x83, 0x4e, 0x3d, 0xc7, 0xb6, 0xbc, 0x23, 0x4b, 0xe4, 0x3e, 0x07, 0xc9, 0x1c, 0xee, 0x20,
	0xb3, 0xc3, 0x0f, 0xf2, 0xf7, 0x18, 0x9c, 0x2e, 0x53, 0xb3, 0xe5, 0x34, 0x58, 0xcd, 0xe0, 0xd4,
	0x3c, 0xe6, 0xb6, 0xf7, 0x91, 0xdb, 0xbe, 0xd8, 0x97, 0xdb, 0x46, 0x87, 0x70, 0xdb, 0x5e, 0x56,
	0x2b, 0x40, 0xc6, 0xa3, 0x6e, 0x9b, 0xba, 0x55, 0xce, 0x9a, 0x54, 0x9d, 0x17, 0x4f, 0x60, 0x08,
	0x45, 0x9b, 0xac, 0x49, 0x71, 0x19, 0x66, 0x5c, 0x59, 0xbe, 0x55, 0x4e, 0x9b, 0x4e, 0xc3, 0xe0,
	0x51, 0xfd, 0xcf, 0x0f, 0x56, 0x5b, 0x94, 0xde, 0x5c, 0x64, 0xb1, 0x29, 0x0d, 0xde, 0x89, 0xf9,
	0x3a, 0x63, 0x30, 0xbf, 0xb7, 0x73, 0xee, 0xb4, 0xa8, 0xc7, 0x8f, 0x19, 0x90, 0xbd, 0x6f, 0x8f,
	0xc3, 0x35, 0x38, 0x69, 0xc4, 0x69, 0x4a, 0x1c, 0xcd, 0x0b, 0x47, 0x1f, 0x24, 0x1b, 0x4a, 0x72,
	0x19, 0x17, 0x21, 0x36, 0xf6, 0xc8, 0xfe, 0xab, 0xa7, 0xeb, 0x8b, 0x71, 0xf8, 0xa8, 0x97, 0xd4,
	0x8e, 0xeb, 0xed, 0xff, 0x41, 0x73, 0x47, 0x5c, 0xad, 0x03, 0xac, 0xa9, 0xee, 0x61, 0xcd, 0xb5,
	0xe1, 0xac, 0xb9, 0x10, 0xd7, 0xf3, 0x90, 0x5b, 0xc2, 0x21, 0xe9, 0xb3, 0x3b, 0x02, 0xf9, 0xc4,
	0xd9, 0xea, 0xb6, 0xd1, 0x68, 0x50, 0xab, 0x4e, 0x8f, 0x2b, 0xfa, 0x28, 0x2b, 0xba, 0x68, 0xc2,
	0x99, 0x7d, 0x83, 0x7c, 0xa4, 0x17, 0xbc, 0x22, 0x86, 0xdc, 0x46, 0x6b, 0xcb, 0xab, 0xb9, 0x6c,
	0x2b, 0x4a, 0x60, 0x71, 0x1a, 0xb2, 0x1b, 0xdc, 0xe0, 0x2d, 0x2f, 0x12, 0xfc, 0x35, 0x0a, 0xa9,
	0x50, 0x82, 0x35, 0x48, 0x79, 0x3b, 0x1e, 0xa7, 0x4d, 0xb1, 0x6a, 0x66, 0x29, 0xa7, 0x19, 0x0e,
	0xd3, 0x36, 0x84, 0x28, 0x80, 0x78, 0xb2, 0xb1, 0x24, 0x0a, 0x5f, 0x81, 0x74, 0xcd, 0x6e, 0x3a,
	0xb6, 0x45, 0x2d, 0x2e, 0xb7, 0x73, 0x52, 0x98, 0xac, 0x46, 0xd2, 0x5e, 0xab, 0x04, 0x8b, 0x8b,
	0x90, 0x6a, 0x89, 0x7b, 0xa0, 0xbc, 0x70, 0x82, 0xb0, 0xd2, 0x0d, 0x4e, 0x3d, 0x5d, 0x6a, 0x70,
	0x09, 0xb2, 0xe1, 0xa8, 0xda, 0xb2, 0xd8, 0x9d, 0x16, 0x15, 0xa9, 0xec, 0x87, 0x4e, 0x86, 0x80,
	0x1b, 0x42, 0x8f, 0xcf, 0xc2, 0x89, 0x88, 0xcb, 0x45, 0x66, 0xfa, 0xb1, 0xb1, 0x0e, 0x5f, 0x80,
	0x4c, 0xd2, 0x8b, 0x9e, 0x48, 0x51, 0x3f, 0xb4, 0x57, 0x8d, 0x3f, 0x83, 0x9e, 0xce, 0xf5, 0xa2,
	0xbd, 0x4c, 0xef, 0x31, 0x9a, 0xe9, 0x41, 0xc9, 0x0d, 0x7d, 0x0a, 0x59, 0x33, 0x7e, 0x48, 0x04,
	0xb7, 0xeb, 0x5c, 0x4f, 0x54, 0xd7, 0xa9, 0x5b, 0xa3, 0x16, 0x67, 0x0d, 0xea, 0xe9, 0xfd, 0x30,
	0x7c, 0x1e, 0x66, 0x6a, 0xb6, 0x65, 0xd1, 0x1a, 0xa7, 0x66, 0xd5, 0xb5, 0x5b, 0x9c, 0xba, 0x9e,
	0xa0, 0xbb, 0xac, 0x9e, 0x8b, 0x15, 0x7a, 0x28, 0xc7, 0x17, 0x01, 0x27, 0xe0, 0x6d, 0xc3, 0x32,
	0x1b, 0x01, 0x7a, 0x4e, 0xa0, 0x13, 0x37, 0x5f, 0x4a, 0x45, 0xd1, 0x01, 0xb2, 0xec, 0xc4, 0x4b,
	0x49, 0xb1, 0x4e, 0xeb, 0xcc, 0xe3, 0xf2, 0xab, 0x46, 0x52, 0xde, 0x68, 0x48, 0x79, 0x5f, 0x00,
	0x90, 0x0b, 0x0d, 0x7c, 0xaf, 0x91, 0xee, 0x2a, 0x65, 0x3d, 0x2d, 0x01, 0x15, 0x73, 0xe9, 0x97,
	0x11, 0x48, 0xad, 0x08, 0xaa, 0xc2, 0x57, 0x21, 0xbd, 0xec, 0x79, 0x76, 0x8d, 0x05, 0x64, 0x34,
	0x1b, 0x11, 0x58, 0xdf, 0x1b, 0x41, 0x7e, 0xd8, 0x6d, 0x70, 0x11, 0x5d, 0x42, 0xf8, 0x2b, 0x48,
	0xc7, 0x05, 0x8d, 0xd5, 0x08, 0x39, 0x58, 0xe3, 0xf9, 0x0f, 0x13, 0x6e, 0x1c, 0xf2, 0xe2, 0x71,
	0x09, 0xe1, 0xcf, 0x61, 0x62, 0xbd, 0xb5, 0xd5, 0x60, 0xde, 0x36, 0x1e, 0xb6, 0x66, 0x7e, 0x4e,
	0x0b, 0xbf, 0xf3, 0x69, 0xd1, 0x17, 0x3c, 0xed, 0x5a, 0xd3, 0xe1, 0x3b, 0x8b, 0x08, 0xaf, 0xc1,
	0x09, 0xd9, 0xc0, 0x14, 0x17, 0x86, 0x53, 0x71, 0xb8, 0x9f, 0x03, 0xb9, 0x7a, 0xe9, 0x67, 0x04,
	0xd9, 0x30, 0x48, 0x6b, 0x86, 0x65, 0xd4, 0xa9, 0x8b, 0x6f, 0x42, 0x3e, 0x4c, 0x0b, 0x75, 0xf7,
	0x26, 0x0c, 0x9f, 0x8d, 0x3c, 0xbe, 0x3d, 0x99, 0xc3, 0x0e, 0x80, 0x97, 0x20, 0x7d, 0x9d, 0x72,
	0xd9, 0xf6, 0x71, 0x26, 0xfa, 0x88, 0x21, 0x3f, 0xd5, 0x2f, 0x5e, 0xf9, 0x13, 0x3d, 0xeb, 0x10,
	0xf4, 0xbc, 0x43, 0xd0, 0x8b, 0x0e, 0x51, 0x5e, 0x76, 0x88, 0xf2, 0xaa, 0x43, 0x94, 0xd7, 0x1d,
	0xa2, 0xbc, 0xe9, 0x10, 0x74, 0xdf, 0x27, 0xe8, 0x81, 0x4f, 0x94, 0x87, 0x3e, 0x41, 0x8f, 0x7c,
	0xa2, 0x3c, 0xf6, 0x89, 0xf2, 0xd4, 0x27, 0xca, 0x33, 0x9f, 0xa0, 0xe7, 0x3e, 0x41, 0x2f, 0x7c,
	0xa2, 0xbc, 0xf4, 0x09, 0x7a, 0xe5, 0x13, 0xe5, 0xb5, 0x4f, 0xd0, 0x1b, 0x9f, 0x28, 0xf7, 0xbb,
	0x44, 0x79, 0xd0, 0x25, 0xe8, 0x87, 0x2e, 0x51, 0x7e, 0xec, 0x12, 0xf4, 0x53, 0x97, 0x28, 0x0f,
	0xbb, 0x44, 0x79, 0xd4, 0x25, 0xe8, 0x71, 0x97, 0xa0, 0xa7, 0x5d, 0x82, 0xa0, 0x60, 0xbb, 0x75,
	0x8d, 0x6f, 0x53, 0x2e, 0xc8, 0xda, 0x0a, 0xc9, 0x5a, 0xb4, 0x50, 0xb8, 0xbd, 0x95, 0x4c, 0x18,
	0xb8, 0xf5, 0xe0, 0x84, 0xeb, 0xe8, 0xfb, 0xb3, 0xef, 0xf6, 0x5d, 0xf7, 0xd7, 0x91, 0x33, 0x83,
	0x5a, 0x6d, 0x79, 0xbd, 0xa2, 0x85, 0xce, 0xb6, 0x52, 0x22, 0x60, 0x97, 0xff, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x42, 0x0a, 0xa8, 0xc5, 0x26, 0x16, 0x00, 0x00,
}
