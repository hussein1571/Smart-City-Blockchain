//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/networkserver/networkserver.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Networkserver_NetworkServerGetDevicesCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerGetDevicesCallBase: ClientCallUnaryBase<Networkserver_DevicesRequest, Networkserver_DevicesResponse>, Networkserver_NetworkServerGetDevicesCall {
  override class var method: String { return "/networkserver.NetworkServer/GetDevices" }
}

internal protocol Networkserver_NetworkServerPrepareActivationCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerPrepareActivationCallBase: ClientCallUnaryBase<Broker_DeduplicatedDeviceActivationRequest, Broker_DeduplicatedDeviceActivationRequest>, Networkserver_NetworkServerPrepareActivationCall {
  override class var method: String { return "/networkserver.NetworkServer/PrepareActivation" }
}

internal protocol Networkserver_NetworkServerActivateCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerActivateCallBase: ClientCallUnaryBase<Handler_DeviceActivationResponse, Handler_DeviceActivationResponse>, Networkserver_NetworkServerActivateCall {
  override class var method: String { return "/networkserver.NetworkServer/Activate" }
}

internal protocol Networkserver_NetworkServerUplinkCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerUplinkCallBase: ClientCallUnaryBase<Broker_DeduplicatedUplinkMessage, Broker_DeduplicatedUplinkMessage>, Networkserver_NetworkServerUplinkCall {
  override class var method: String { return "/networkserver.NetworkServer/Uplink" }
}

internal protocol Networkserver_NetworkServerDownlinkCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerDownlinkCallBase: ClientCallUnaryBase<Broker_DownlinkMessage, Broker_DownlinkMessage>, Networkserver_NetworkServerDownlinkCall {
  override class var method: String { return "/networkserver.NetworkServer/Downlink" }
}


/// Instantiate Networkserver_NetworkServerServiceClient, then call methods of this protocol to make API calls.
internal protocol Networkserver_NetworkServerService: ServiceClient {
  /// Synchronous. Unary.
  func getDevices(_ request: Networkserver_DevicesRequest) throws -> Networkserver_DevicesResponse
  /// Asynchronous. Unary.
  func getDevices(_ request: Networkserver_DevicesRequest, completion: @escaping (Networkserver_DevicesResponse?, CallResult) -> Void) throws -> Networkserver_NetworkServerGetDevicesCall

  /// Synchronous. Unary.
  func prepareActivation(_ request: Broker_DeduplicatedDeviceActivationRequest) throws -> Broker_DeduplicatedDeviceActivationRequest
  /// Asynchronous. Unary.
  func prepareActivation(_ request: Broker_DeduplicatedDeviceActivationRequest, completion: @escaping (Broker_DeduplicatedDeviceActivationRequest?, CallResult) -> Void) throws -> Networkserver_NetworkServerPrepareActivationCall

  /// Synchronous. Unary.
  func activate(_ request: Handler_DeviceActivationResponse) throws -> Handler_DeviceActivationResponse
  /// Asynchronous. Unary.
  func activate(_ request: Handler_DeviceActivationResponse, completion: @escaping (Handler_DeviceActivationResponse?, CallResult) -> Void) throws -> Networkserver_NetworkServerActivateCall

  /// Synchronous. Unary.
  func uplink(_ request: Broker_DeduplicatedUplinkMessage) throws -> Broker_DeduplicatedUplinkMessage
  /// Asynchronous. Unary.
  func uplink(_ request: Broker_DeduplicatedUplinkMessage, completion: @escaping (Broker_DeduplicatedUplinkMessage?, CallResult) -> Void) throws -> Networkserver_NetworkServerUplinkCall

  /// Synchronous. Unary.
  func downlink(_ request: Broker_DownlinkMessage) throws -> Broker_DownlinkMessage
  /// Asynchronous. Unary.
  func downlink(_ request: Broker_DownlinkMessage, completion: @escaping (Broker_DownlinkMessage?, CallResult) -> Void) throws -> Networkserver_NetworkServerDownlinkCall

}

internal final class Networkserver_NetworkServerServiceClient: ServiceClientBase, Networkserver_NetworkServerService {
  /// Synchronous. Unary.
  internal func getDevices(_ request: Networkserver_DevicesRequest) throws -> Networkserver_DevicesResponse {
    return try Networkserver_NetworkServerGetDevicesCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getDevices(_ request: Networkserver_DevicesRequest, completion: @escaping (Networkserver_DevicesResponse?, CallResult) -> Void) throws -> Networkserver_NetworkServerGetDevicesCall {
    return try Networkserver_NetworkServerGetDevicesCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func prepareActivation(_ request: Broker_DeduplicatedDeviceActivationRequest) throws -> Broker_DeduplicatedDeviceActivationRequest {
    return try Networkserver_NetworkServerPrepareActivationCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func prepareActivation(_ request: Broker_DeduplicatedDeviceActivationRequest, completion: @escaping (Broker_DeduplicatedDeviceActivationRequest?, CallResult) -> Void) throws -> Networkserver_NetworkServerPrepareActivationCall {
    return try Networkserver_NetworkServerPrepareActivationCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func activate(_ request: Handler_DeviceActivationResponse) throws -> Handler_DeviceActivationResponse {
    return try Networkserver_NetworkServerActivateCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func activate(_ request: Handler_DeviceActivationResponse, completion: @escaping (Handler_DeviceActivationResponse?, CallResult) -> Void) throws -> Networkserver_NetworkServerActivateCall {
    return try Networkserver_NetworkServerActivateCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func uplink(_ request: Broker_DeduplicatedUplinkMessage) throws -> Broker_DeduplicatedUplinkMessage {
    return try Networkserver_NetworkServerUplinkCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func uplink(_ request: Broker_DeduplicatedUplinkMessage, completion: @escaping (Broker_DeduplicatedUplinkMessage?, CallResult) -> Void) throws -> Networkserver_NetworkServerUplinkCall {
    return try Networkserver_NetworkServerUplinkCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func downlink(_ request: Broker_DownlinkMessage) throws -> Broker_DownlinkMessage {
    return try Networkserver_NetworkServerDownlinkCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func downlink(_ request: Broker_DownlinkMessage, completion: @escaping (Broker_DownlinkMessage?, CallResult) -> Void) throws -> Networkserver_NetworkServerDownlinkCall {
    return try Networkserver_NetworkServerDownlinkCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol Networkserver_NetworkServerManagerGetStatusCall: ClientCallUnary {}

fileprivate final class Networkserver_NetworkServerManagerGetStatusCallBase: ClientCallUnaryBase<Networkserver_StatusRequest, Networkserver_Status>, Networkserver_NetworkServerManagerGetStatusCall {
  override class var method: String { return "/networkserver.NetworkServerManager/GetStatus" }
}


/// Instantiate Networkserver_NetworkServerManagerServiceClient, then call methods of this protocol to make API calls.
internal protocol Networkserver_NetworkServerManagerService: ServiceClient {
  /// Synchronous. Unary.
  func getStatus(_ request: Networkserver_StatusRequest) throws -> Networkserver_Status
  /// Asynchronous. Unary.
  func getStatus(_ request: Networkserver_StatusRequest, completion: @escaping (Networkserver_Status?, CallResult) -> Void) throws -> Networkserver_NetworkServerManagerGetStatusCall

}

internal final class Networkserver_NetworkServerManagerServiceClient: ServiceClientBase, Networkserver_NetworkServerManagerService {
  /// Synchronous. Unary.
  internal func getStatus(_ request: Networkserver_StatusRequest) throws -> Networkserver_Status {
    return try Networkserver_NetworkServerManagerGetStatusCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getStatus(_ request: Networkserver_StatusRequest, completion: @escaping (Networkserver_Status?, CallResult) -> Void) throws -> Networkserver_NetworkServerManagerGetStatusCall {
    return try Networkserver_NetworkServerManagerGetStatusCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Networkserver_NetworkServerProvider {
  func getDevices(request: Networkserver_DevicesRequest, session: Networkserver_NetworkServerGetDevicesSession) throws -> Networkserver_DevicesResponse
  func prepareActivation(request: Broker_DeduplicatedDeviceActivationRequest, session: Networkserver_NetworkServerPrepareActivationSession) throws -> Broker_DeduplicatedDeviceActivationRequest
  func activate(request: Handler_DeviceActivationResponse, session: Networkserver_NetworkServerActivateSession) throws -> Handler_DeviceActivationResponse
  func uplink(request: Broker_DeduplicatedUplinkMessage, session: Networkserver_NetworkServerUplinkSession) throws -> Broker_DeduplicatedUplinkMessage
  func downlink(request: Broker_DownlinkMessage, session: Networkserver_NetworkServerDownlinkSession) throws -> Broker_DownlinkMessage
}

internal protocol Networkserver_NetworkServerGetDevicesSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerGetDevicesSessionBase: ServerSessionUnaryBase<Networkserver_DevicesRequest, Networkserver_DevicesResponse>, Networkserver_NetworkServerGetDevicesSession {}

internal protocol Networkserver_NetworkServerPrepareActivationSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerPrepareActivationSessionBase: ServerSessionUnaryBase<Broker_DeduplicatedDeviceActivationRequest, Broker_DeduplicatedDeviceActivationRequest>, Networkserver_NetworkServerPrepareActivationSession {}

internal protocol Networkserver_NetworkServerActivateSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerActivateSessionBase: ServerSessionUnaryBase<Handler_DeviceActivationResponse, Handler_DeviceActivationResponse>, Networkserver_NetworkServerActivateSession {}

internal protocol Networkserver_NetworkServerUplinkSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerUplinkSessionBase: ServerSessionUnaryBase<Broker_DeduplicatedUplinkMessage, Broker_DeduplicatedUplinkMessage>, Networkserver_NetworkServerUplinkSession {}

internal protocol Networkserver_NetworkServerDownlinkSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerDownlinkSessionBase: ServerSessionUnaryBase<Broker_DownlinkMessage, Broker_DownlinkMessage>, Networkserver_NetworkServerDownlinkSession {}


/// Main server for generated service
internal final class Networkserver_NetworkServerServer: ServiceServer {
  private let provider: Networkserver_NetworkServerProvider

  internal init(address: String, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Networkserver_NetworkServerProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/networkserver.NetworkServer/GetDevices":
      try Networkserver_NetworkServerGetDevicesSessionBase(
        handler: handler,
        providerBlock: { try provider.getDevices(request: $0, session: $1 as! Networkserver_NetworkServerGetDevicesSessionBase) })
          .run(queue: queue)
      return true
    case "/networkserver.NetworkServer/PrepareActivation":
      try Networkserver_NetworkServerPrepareActivationSessionBase(
        handler: handler,
        providerBlock: { try provider.prepareActivation(request: $0, session: $1 as! Networkserver_NetworkServerPrepareActivationSessionBase) })
          .run(queue: queue)
      return true
    case "/networkserver.NetworkServer/Activate":
      try Networkserver_NetworkServerActivateSessionBase(
        handler: handler,
        providerBlock: { try provider.activate(request: $0, session: $1 as! Networkserver_NetworkServerActivateSessionBase) })
          .run(queue: queue)
      return true
    case "/networkserver.NetworkServer/Uplink":
      try Networkserver_NetworkServerUplinkSessionBase(
        handler: handler,
        providerBlock: { try provider.uplink(request: $0, session: $1 as! Networkserver_NetworkServerUplinkSessionBase) })
          .run(queue: queue)
      return true
    case "/networkserver.NetworkServer/Downlink":
      try Networkserver_NetworkServerDownlinkSessionBase(
        handler: handler,
        providerBlock: { try provider.downlink(request: $0, session: $1 as! Networkserver_NetworkServerDownlinkSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Networkserver_NetworkServerManagerProvider {
  func getStatus(request: Networkserver_StatusRequest, session: Networkserver_NetworkServerManagerGetStatusSession) throws -> Networkserver_Status
}

internal protocol Networkserver_NetworkServerManagerGetStatusSession: ServerSessionUnary {}

fileprivate final class Networkserver_NetworkServerManagerGetStatusSessionBase: ServerSessionUnaryBase<Networkserver_StatusRequest, Networkserver_Status>, Networkserver_NetworkServerManagerGetStatusSession {}


/// Main server for generated service
internal final class Networkserver_NetworkServerManagerServer: ServiceServer {
  private let provider: Networkserver_NetworkServerManagerProvider

  internal init(address: String, provider: Networkserver_NetworkServerManagerProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Networkserver_NetworkServerManagerProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Networkserver_NetworkServerManagerProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/networkserver.NetworkServerManager/GetStatus":
      try Networkserver_NetworkServerManagerGetStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.getStatus(request: $0, session: $1 as! Networkserver_NetworkServerManagerGetStatusSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

