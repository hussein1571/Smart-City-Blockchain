// Code generated by MockGen. DO NOT EDIT.
// Source: ./networkserver/networkserver.pb.go

// Package networkserver is a generated GoMock package.
package networkserver

import (
	broker "github.com/TheThingsNetwork/api/broker"
	handler "github.com/TheThingsNetwork/api/handler"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockNetworkServerClient is a mock of NetworkServerClient interface
type MockNetworkServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServerClientMockRecorder
}

// MockNetworkServerClientMockRecorder is the mock recorder for MockNetworkServerClient
type MockNetworkServerClientMockRecorder struct {
	mock *MockNetworkServerClient
}

// NewMockNetworkServerClient creates a new mock instance
func NewMockNetworkServerClient(ctrl *gomock.Controller) *MockNetworkServerClient {
	mock := &MockNetworkServerClient{ctrl: ctrl}
	mock.recorder = &MockNetworkServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServerClient) EXPECT() *MockNetworkServerClientMockRecorder {
	return m.recorder
}

// GetDevices mocks base method
func (m *MockNetworkServerClient) GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDevices", varargs...)
	ret0, _ := ret[0].(*DevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockNetworkServerClientMockRecorder) GetDevices(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockNetworkServerClient)(nil).GetDevices), varargs...)
}

// PrepareActivation mocks base method
func (m *MockNetworkServerClient) PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareActivation", varargs...)
	ret0, _ := ret[0].(*broker.DeduplicatedDeviceActivationRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareActivation indicates an expected call of PrepareActivation
func (mr *MockNetworkServerClientMockRecorder) PrepareActivation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareActivation", reflect.TypeOf((*MockNetworkServerClient)(nil).PrepareActivation), varargs...)
}

// Activate mocks base method
func (m *MockNetworkServerClient) Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Activate", varargs...)
	ret0, _ := ret[0].(*handler.DeviceActivationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate
func (mr *MockNetworkServerClientMockRecorder) Activate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockNetworkServerClient)(nil).Activate), varargs...)
}

// Uplink mocks base method
func (m *MockNetworkServerClient) Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Uplink", varargs...)
	ret0, _ := ret[0].(*broker.DeduplicatedUplinkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uplink indicates an expected call of Uplink
func (mr *MockNetworkServerClientMockRecorder) Uplink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uplink", reflect.TypeOf((*MockNetworkServerClient)(nil).Uplink), varargs...)
}

// Downlink mocks base method
func (m *MockNetworkServerClient) Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Downlink", varargs...)
	ret0, _ := ret[0].(*broker.DownlinkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downlink indicates an expected call of Downlink
func (mr *MockNetworkServerClientMockRecorder) Downlink(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downlink", reflect.TypeOf((*MockNetworkServerClient)(nil).Downlink), varargs...)
}

// MockNetworkServerServer is a mock of NetworkServerServer interface
type MockNetworkServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServerServerMockRecorder
}

// MockNetworkServerServerMockRecorder is the mock recorder for MockNetworkServerServer
type MockNetworkServerServerMockRecorder struct {
	mock *MockNetworkServerServer
}

// NewMockNetworkServerServer creates a new mock instance
func NewMockNetworkServerServer(ctrl *gomock.Controller) *MockNetworkServerServer {
	mock := &MockNetworkServerServer{ctrl: ctrl}
	mock.recorder = &MockNetworkServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServerServer) EXPECT() *MockNetworkServerServerMockRecorder {
	return m.recorder
}

// GetDevices mocks base method
func (m *MockNetworkServerServer) GetDevices(arg0 context.Context, arg1 *DevicesRequest) (*DevicesResponse, error) {
	ret := m.ctrl.Call(m, "GetDevices", arg0, arg1)
	ret0, _ := ret[0].(*DevicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevices indicates an expected call of GetDevices
func (mr *MockNetworkServerServerMockRecorder) GetDevices(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevices", reflect.TypeOf((*MockNetworkServerServer)(nil).GetDevices), arg0, arg1)
}

// PrepareActivation mocks base method
func (m *MockNetworkServerServer) PrepareActivation(arg0 context.Context, arg1 *broker.DeduplicatedDeviceActivationRequest) (*broker.DeduplicatedDeviceActivationRequest, error) {
	ret := m.ctrl.Call(m, "PrepareActivation", arg0, arg1)
	ret0, _ := ret[0].(*broker.DeduplicatedDeviceActivationRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareActivation indicates an expected call of PrepareActivation
func (mr *MockNetworkServerServerMockRecorder) PrepareActivation(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareActivation", reflect.TypeOf((*MockNetworkServerServer)(nil).PrepareActivation), arg0, arg1)
}

// Activate mocks base method
func (m *MockNetworkServerServer) Activate(arg0 context.Context, arg1 *handler.DeviceActivationResponse) (*handler.DeviceActivationResponse, error) {
	ret := m.ctrl.Call(m, "Activate", arg0, arg1)
	ret0, _ := ret[0].(*handler.DeviceActivationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate
func (mr *MockNetworkServerServerMockRecorder) Activate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockNetworkServerServer)(nil).Activate), arg0, arg1)
}

// Uplink mocks base method
func (m *MockNetworkServerServer) Uplink(arg0 context.Context, arg1 *broker.DeduplicatedUplinkMessage) (*broker.DeduplicatedUplinkMessage, error) {
	ret := m.ctrl.Call(m, "Uplink", arg0, arg1)
	ret0, _ := ret[0].(*broker.DeduplicatedUplinkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uplink indicates an expected call of Uplink
func (mr *MockNetworkServerServerMockRecorder) Uplink(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uplink", reflect.TypeOf((*MockNetworkServerServer)(nil).Uplink), arg0, arg1)
}

// Downlink mocks base method
func (m *MockNetworkServerServer) Downlink(arg0 context.Context, arg1 *broker.DownlinkMessage) (*broker.DownlinkMessage, error) {
	ret := m.ctrl.Call(m, "Downlink", arg0, arg1)
	ret0, _ := ret[0].(*broker.DownlinkMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Downlink indicates an expected call of Downlink
func (mr *MockNetworkServerServerMockRecorder) Downlink(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downlink", reflect.TypeOf((*MockNetworkServerServer)(nil).Downlink), arg0, arg1)
}

// MockNetworkServerManagerClient is a mock of NetworkServerManagerClient interface
type MockNetworkServerManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServerManagerClientMockRecorder
}

// MockNetworkServerManagerClientMockRecorder is the mock recorder for MockNetworkServerManagerClient
type MockNetworkServerManagerClientMockRecorder struct {
	mock *MockNetworkServerManagerClient
}

// NewMockNetworkServerManagerClient creates a new mock instance
func NewMockNetworkServerManagerClient(ctrl *gomock.Controller) *MockNetworkServerManagerClient {
	mock := &MockNetworkServerManagerClient{ctrl: ctrl}
	mock.recorder = &MockNetworkServerManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServerManagerClient) EXPECT() *MockNetworkServerManagerClientMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockNetworkServerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockNetworkServerManagerClientMockRecorder) GetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockNetworkServerManagerClient)(nil).GetStatus), varargs...)
}

// MockNetworkServerManagerServer is a mock of NetworkServerManagerServer interface
type MockNetworkServerManagerServer struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServerManagerServerMockRecorder
}

// MockNetworkServerManagerServerMockRecorder is the mock recorder for MockNetworkServerManagerServer
type MockNetworkServerManagerServerMockRecorder struct {
	mock *MockNetworkServerManagerServer
}

// NewMockNetworkServerManagerServer creates a new mock instance
func NewMockNetworkServerManagerServer(ctrl *gomock.Controller) *MockNetworkServerManagerServer {
	mock := &MockNetworkServerManagerServer{ctrl: ctrl}
	mock.recorder = &MockNetworkServerManagerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkServerManagerServer) EXPECT() *MockNetworkServerManagerServerMockRecorder {
	return m.recorder
}

// GetStatus mocks base method
func (m *MockNetworkServerManagerServer) GetStatus(arg0 context.Context, arg1 *StatusRequest) (*Status, error) {
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockNetworkServerManagerServerMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockNetworkServerManagerServer)(nil).GetStatus), arg0, arg1)
}

// MockrandyNetworkserver is a mock of randyNetworkserver interface
type MockrandyNetworkserver struct {
	ctrl     *gomock.Controller
	recorder *MockrandyNetworkserverMockRecorder
}

// MockrandyNetworkserverMockRecorder is the mock recorder for MockrandyNetworkserver
type MockrandyNetworkserverMockRecorder struct {
	mock *MockrandyNetworkserver
}

// NewMockrandyNetworkserver creates a new mock instance
func NewMockrandyNetworkserver(ctrl *gomock.Controller) *MockrandyNetworkserver {
	mock := &MockrandyNetworkserver{ctrl: ctrl}
	mock.recorder = &MockrandyNetworkserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockrandyNetworkserver) EXPECT() *MockrandyNetworkserverMockRecorder {
	return m.recorder
}

// Float32 mocks base method
func (m *MockrandyNetworkserver) Float32() float32 {
	ret := m.ctrl.Call(m, "Float32")
	ret0, _ := ret[0].(float32)
	return ret0
}

// Float32 indicates an expected call of Float32
func (mr *MockrandyNetworkserverMockRecorder) Float32() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float32", reflect.TypeOf((*MockrandyNetworkserver)(nil).Float32))
}

// Float64 mocks base method
func (m *MockrandyNetworkserver) Float64() float64 {
	ret := m.ctrl.Call(m, "Float64")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float64 indicates an expected call of Float64
func (mr *MockrandyNetworkserverMockRecorder) Float64() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float64", reflect.TypeOf((*MockrandyNetworkserver)(nil).Float64))
}

// Int63 mocks base method
func (m *MockrandyNetworkserver) Int63() int64 {
	ret := m.ctrl.Call(m, "Int63")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Int63 indicates an expected call of Int63
func (mr *MockrandyNetworkserverMockRecorder) Int63() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int63", reflect.TypeOf((*MockrandyNetworkserver)(nil).Int63))
}

// Int31 mocks base method
func (m *MockrandyNetworkserver) Int31() int32 {
	ret := m.ctrl.Call(m, "Int31")
	ret0, _ := ret[0].(int32)
	return ret0
}

// Int31 indicates an expected call of Int31
func (mr *MockrandyNetworkserverMockRecorder) Int31() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int31", reflect.TypeOf((*MockrandyNetworkserver)(nil).Int31))
}

// Uint32 mocks base method
func (m *MockrandyNetworkserver) Uint32() uint32 {
	ret := m.ctrl.Call(m, "Uint32")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// Uint32 indicates an expected call of Uint32
func (mr *MockrandyNetworkserverMockRecorder) Uint32() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uint32", reflect.TypeOf((*MockrandyNetworkserver)(nil).Uint32))
}

// Intn mocks base method
func (m *MockrandyNetworkserver) Intn(n int) int {
	ret := m.ctrl.Call(m, "Intn", n)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn
func (mr *MockrandyNetworkserverMockRecorder) Intn(n interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*MockrandyNetworkserver)(nil).Intn), n)
}
