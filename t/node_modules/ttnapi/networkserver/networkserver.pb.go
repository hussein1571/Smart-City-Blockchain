// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/TheThingsNetwork/api/networkserver/networkserver.proto

package networkserver // import "github.com/TheThingsNetwork/api/networkserver"

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import api "github.com/TheThingsNetwork/api"
import broker "github.com/TheThingsNetwork/api/broker"
import handler "github.com/TheThingsNetwork/api/handler"
import lorawan "github.com/TheThingsNetwork/api/protocol/lorawan"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_TheThingsNetwork_ttn_core_types "github.com/TheThingsNetwork/ttn/core/types"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DevicesRequest struct {
	// Device address from the uplink message
	DevAddr github_com_TheThingsNetwork_ttn_core_types.DevAddr `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3,customtype=github.com/TheThingsNetwork/ttn/core/types.DevAddr" json:"dev_addr"`
	// Frame counter from the uplink message
	FCnt                 uint32   `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DevicesRequest) Reset()      { *m = DevicesRequest{} }
func (*DevicesRequest) ProtoMessage() {}
func (*DevicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_networkserver_f664bff0dc7d561a, []int{0}
}
func (m *DevicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicesRequest.Merge(dst, src)
}
func (m *DevicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DevicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DevicesRequest proto.InternalMessageInfo

func (m *DevicesRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type DevicesResponse struct {
	Results              []*lorawan.Device `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DevicesResponse) Reset()      { *m = DevicesResponse{} }
func (*DevicesResponse) ProtoMessage() {}
func (*DevicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_networkserver_f664bff0dc7d561a, []int{1}
}
func (m *DevicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DevicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicesResponse.Merge(dst, src)
}
func (m *DevicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DevicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DevicesResponse proto.InternalMessageInfo

func (m *DevicesResponse) GetResults() []*lorawan.Device {
	if m != nil {
		return m.Results
	}
	return nil
}

// message StatusRequest is used to request the status of this NetworkServer
type StatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRequest) Reset()      { *m = StatusRequest{} }
func (*StatusRequest) ProtoMessage() {}
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_networkserver_f664bff0dc7d561a, []int{2}
}
func (m *StatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRequest.Merge(dst, src)
}
func (m *StatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *StatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRequest proto.InternalMessageInfo

// message Status is the response to the StatusRequest
type Status struct {
	System               api.SystemStats    `protobuf:"bytes,1,opt,name=system" json:"system"`
	Component            api.ComponentStats `protobuf:"bytes,2,opt,name=component" json:"component"`
	Uplink               *api.Rates         `protobuf:"bytes,11,opt,name=uplink" json:"uplink,omitempty"`
	Downlink             *api.Rates         `protobuf:"bytes,12,opt,name=downlink" json:"downlink,omitempty"`
	Activations          *api.Rates         `protobuf:"bytes,13,opt,name=activations" json:"activations,omitempty"`
	DevicesPerAddress    *api.Percentiles   `protobuf:"bytes,21,opt,name=devices_per_address,json=devicesPerAddress" json:"devices_per_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_networkserver_f664bff0dc7d561a, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetSystem() api.SystemStats {
	if m != nil {
		return m.System
	}
	return api.SystemStats{}
}

func (m *Status) GetComponent() api.ComponentStats {
	if m != nil {
		return m.Component
	}
	return api.ComponentStats{}
}

func (m *Status) GetUplink() *api.Rates {
	if m != nil {
		return m.Uplink
	}
	return nil
}

func (m *Status) GetDownlink() *api.Rates {
	if m != nil {
		return m.Downlink
	}
	return nil
}

func (m *Status) GetActivations() *api.Rates {
	if m != nil {
		return m.Activations
	}
	return nil
}

func (m *Status) GetDevicesPerAddress() *api.Percentiles {
	if m != nil {
		return m.DevicesPerAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*DevicesRequest)(nil), "networkserver.DevicesRequest")
	golang_proto.RegisterType((*DevicesRequest)(nil), "networkserver.DevicesRequest")
	proto.RegisterType((*DevicesResponse)(nil), "networkserver.DevicesResponse")
	golang_proto.RegisterType((*DevicesResponse)(nil), "networkserver.DevicesResponse")
	proto.RegisterType((*StatusRequest)(nil), "networkserver.StatusRequest")
	golang_proto.RegisterType((*StatusRequest)(nil), "networkserver.StatusRequest")
	proto.RegisterType((*Status)(nil), "networkserver.Status")
	golang_proto.RegisterType((*Status)(nil), "networkserver.Status")
}
func (this *DevicesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevicesRequest)
	if !ok {
		that2, ok := that.(DevicesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DevAddr.Equal(that1.DevAddr) {
		return false
	}
	if this.FCnt != that1.FCnt {
		return false
	}
	return true
}
func (this *DevicesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DevicesResponse)
	if !ok {
		that2, ok := that.(DevicesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	return true
}
func (this *StatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StatusRequest)
	if !ok {
		that2, ok := that.(StatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Status) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Status)
	if !ok {
		that2, ok := that.(Status)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.System.Equal(&that1.System) {
		return false
	}
	if !this.Component.Equal(&that1.Component) {
		return false
	}
	if !this.Uplink.Equal(that1.Uplink) {
		return false
	}
	if !this.Downlink.Equal(that1.Downlink) {
		return false
	}
	if !this.Activations.Equal(that1.Activations) {
		return false
	}
	if !this.DevicesPerAddress.Equal(that1.DevicesPerAddress) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServer service

type NetworkServerClient interface {
	// Broker requests devices with DevAddr and matching FCnt (or disabled FCnt check)
	GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation (after response from Handler)
	Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer may add MAC commands and re-set MIC
	Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error)
}

type networkServerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerClient(cc *grpc.ClientConn) NetworkServerClient {
	return &networkServerClient{cc}
}

func (c *networkServerClient) GetDevices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServer/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) PrepareActivation(ctx context.Context, in *broker.DeduplicatedDeviceActivationRequest, opts ...grpc.CallOption) (*broker.DeduplicatedDeviceActivationRequest, error) {
	out := new(broker.DeduplicatedDeviceActivationRequest)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServer/PrepareActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Activate(ctx context.Context, in *handler.DeviceActivationResponse, opts ...grpc.CallOption) (*handler.DeviceActivationResponse, error) {
	out := new(handler.DeviceActivationResponse)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServer/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Uplink(ctx context.Context, in *broker.DeduplicatedUplinkMessage, opts ...grpc.CallOption) (*broker.DeduplicatedUplinkMessage, error) {
	out := new(broker.DeduplicatedUplinkMessage)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServer/Uplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerClient) Downlink(ctx context.Context, in *broker.DownlinkMessage, opts ...grpc.CallOption) (*broker.DownlinkMessage, error) {
	out := new(broker.DownlinkMessage)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServer/Downlink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServer service

type NetworkServerServer interface {
	// Broker requests devices with DevAddr and matching FCnt (or disabled FCnt check)
	GetDevices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	// Broker requests device activation "template" from Network Server
	PrepareActivation(context.Context, *broker.DeduplicatedDeviceActivationRequest) (*broker.DeduplicatedDeviceActivationRequest, error)
	// Broker confirms device activation (after response from Handler)
	Activate(context.Context, *handler.DeviceActivationResponse) (*handler.DeviceActivationResponse, error)
	// Broker informs Network Server about Uplink
	Uplink(context.Context, *broker.DeduplicatedUplinkMessage) (*broker.DeduplicatedUplinkMessage, error)
	// Broker informs Network Server about Downlink, NetworkServer may add MAC commands and re-set MIC
	Downlink(context.Context, *broker.DownlinkMessage) (*broker.DownlinkMessage, error)
}

func RegisterNetworkServerServer(s *grpc.Server, srv NetworkServerServer) {
	s.RegisterService(&_NetworkServer_serviceDesc, srv)
}

func _NetworkServer_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).GetDevices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_PrepareActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).PrepareActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/PrepareActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).PrepareActivation(ctx, req.(*broker.DeduplicatedDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(handler.DeviceActivationResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Activate(ctx, req.(*handler.DeviceActivationResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Uplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DeduplicatedUplinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Uplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Uplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Uplink(ctx, req.(*broker.DeduplicatedUplinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServer_Downlink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(broker.DownlinkMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServer).Downlink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServer/Downlink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServer).Downlink(ctx, req.(*broker.DownlinkMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServer",
	HandlerType: (*NetworkServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _NetworkServer_GetDevices_Handler,
		},
		{
			MethodName: "PrepareActivation",
			Handler:    _NetworkServer_PrepareActivation_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _NetworkServer_Activate_Handler,
		},
		{
			MethodName: "Uplink",
			Handler:    _NetworkServer_Uplink_Handler,
		},
		{
			MethodName: "Downlink",
			Handler:    _NetworkServer_Downlink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/networkserver/networkserver.proto",
}

// Client API for NetworkServerManager service

type NetworkServerManagerClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error)
}

type networkServerManagerClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerManagerClient(cc *grpc.ClientConn) NetworkServerManagerClient {
	return &networkServerManagerClient{cc}
}

func (c *networkServerManagerClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/networkserver.NetworkServerManager/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServerManager service

type NetworkServerManagerServer interface {
	GetStatus(context.Context, *StatusRequest) (*Status, error)
}

func RegisterNetworkServerManagerServer(s *grpc.Server, srv NetworkServerManagerServer) {
	s.RegisterService(&_NetworkServerManager_serviceDesc, srv)
}

func _NetworkServerManager_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/networkserver.NetworkServerManager/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerManagerServer).GetStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServerManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "networkserver.NetworkServerManager",
	HandlerType: (*NetworkServerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _NetworkServerManager_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/TheThingsNetwork/api/networkserver/networkserver.proto",
}

func (m *DevicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.DevAddr.Size()))
	n1, err := m.DevAddr.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.FCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.FCnt))
	}
	return i, nil
}

func (m *DevicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, msg := range m.Results {
			dAtA[i] = 0xa
			i++
			i = encodeVarintNetworkserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.System.Size()))
	n2, err := m.System.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x12
	i++
	i = encodeVarintNetworkserver(dAtA, i, uint64(m.Component.Size()))
	n3, err := m.Component.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.Uplink != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Uplink.Size()))
		n4, err := m.Uplink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Downlink != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Downlink.Size()))
		n5, err := m.Downlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Activations != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.Activations.Size()))
		n6, err := m.Activations.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.DevicesPerAddress != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintNetworkserver(dAtA, i, uint64(m.DevicesPerAddress.Size()))
		n7, err := m.DevicesPerAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func encodeVarintNetworkserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedDevicesRequest(r randyNetworkserver, easy bool) *DevicesRequest {
	this := &DevicesRequest{}
	v1 := github_com_TheThingsNetwork_ttn_core_types.NewPopulatedDevAddr(r)
	this.DevAddr = *v1
	this.FCnt = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDevicesResponse(r randyNetworkserver, easy bool) *DevicesResponse {
	this := &DevicesResponse{}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Results = make([]*lorawan.Device, v2)
		for i := 0; i < v2; i++ {
			this.Results[i] = lorawan.NewPopulatedDevice(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatusRequest(r randyNetworkserver, easy bool) *StatusRequest {
	this := &StatusRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedStatus(r randyNetworkserver, easy bool) *Status {
	this := &Status{}
	v3 := api.NewPopulatedSystemStats(r, easy)
	this.System = *v3
	v4 := api.NewPopulatedComponentStats(r, easy)
	this.Component = *v4
	if r.Intn(10) != 0 {
		this.Uplink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Downlink = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Activations = api.NewPopulatedRates(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DevicesPerAddress = api.NewPopulatedPercentiles(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyNetworkserver interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneNetworkserver(r randyNetworkserver) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringNetworkserver(r randyNetworkserver) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneNetworkserver(r)
	}
	return string(tmps)
}
func randUnrecognizedNetworkserver(r randyNetworkserver, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldNetworkserver(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldNetworkserver(dAtA []byte, r randyNetworkserver, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateNetworkserver(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateNetworkserver(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DevicesRequest) Size() (n int) {
	var l int
	_ = l
	l = m.DevAddr.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	if m.FCnt != 0 {
		n += 1 + sovNetworkserver(uint64(m.FCnt))
	}
	return n
}

func (m *DevicesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovNetworkserver(uint64(l))
		}
	}
	return n
}

func (m *StatusRequest) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	l = m.System.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	l = m.Component.Size()
	n += 1 + l + sovNetworkserver(uint64(l))
	if m.Uplink != nil {
		l = m.Uplink.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.Downlink != nil {
		l = m.Downlink.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.Activations != nil {
		l = m.Activations.Size()
		n += 1 + l + sovNetworkserver(uint64(l))
	}
	if m.DevicesPerAddress != nil {
		l = m.DevicesPerAddress.Size()
		n += 2 + l + sovNetworkserver(uint64(l))
	}
	return n
}

func sovNetworkserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNetworkserver(x uint64) (n int) {
	return sovNetworkserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *DevicesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesRequest{`,
		`DevAddr:` + fmt.Sprintf("%v", this.DevAddr) + `,`,
		`FCnt:` + fmt.Sprintf("%v", this.FCnt) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DevicesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DevicesResponse{`,
		`Results:` + strings.Replace(fmt.Sprintf("%v", this.Results), "Device", "lorawan.Device", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StatusRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`System:` + strings.Replace(strings.Replace(this.System.String(), "SystemStats", "api.SystemStats", 1), `&`, ``, 1) + `,`,
		`Component:` + strings.Replace(strings.Replace(this.Component.String(), "ComponentStats", "api.ComponentStats", 1), `&`, ``, 1) + `,`,
		`Uplink:` + strings.Replace(fmt.Sprintf("%v", this.Uplink), "Rates", "api.Rates", 1) + `,`,
		`Downlink:` + strings.Replace(fmt.Sprintf("%v", this.Downlink), "Rates", "api.Rates", 1) + `,`,
		`Activations:` + strings.Replace(fmt.Sprintf("%v", this.Activations), "Rates", "api.Rates", 1) + `,`,
		`DevicesPerAddress:` + strings.Replace(fmt.Sprintf("%v", this.DevicesPerAddress), "Percentiles", "api.Percentiles", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNetworkserver(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *DevicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevAddr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &lorawan.Device{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.System.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Component", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Component.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uplink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Uplink == nil {
				m.Uplink = &api.Rates{}
			}
			if err := m.Uplink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Downlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Downlink == nil {
				m.Downlink = &api.Rates{}
			}
			if err := m.Downlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Activations == nil {
				m.Activations = &api.Rates{}
			}
			if err := m.Activations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevicesPerAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DevicesPerAddress == nil {
				m.DevicesPerAddress = &api.Percentiles{}
			}
			if err := m.DevicesPerAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNetworkserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNetworkserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNetworkserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNetworkserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNetworkserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkserver   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/TheThingsNetwork/api/networkserver/networkserver.proto", fileDescriptor_networkserver_f664bff0dc7d561a)
}
func init() {
	golang_proto.RegisterFile("github.com/TheThingsNetwork/api/networkserver/networkserver.proto", fileDescriptor_networkserver_f664bff0dc7d561a)
}

var fileDescriptor_networkserver_f664bff0dc7d561a = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x4f, 0x68, 0x1b, 0x47,
	0x14, 0xc6, 0x67, 0x94, 0x54, 0x51, 0x46, 0x51, 0xdd, 0x8c, 0x1b, 0x2a, 0x44, 0x3a, 0x71, 0x74,
	0x08, 0x0e, 0x6d, 0x76, 0x41, 0xa1, 0x14, 0x4a, 0x0a, 0x91, 0x22, 0x08, 0xa5, 0x38, 0x88, 0x75,
	0x02, 0xa5, 0x17, 0xb3, 0xda, 0x7d, 0x96, 0x16, 0x4b, 0x3b, 0xdb, 0x99, 0x91, 0x4c, 0xa0, 0x07,
	0x1f, 0x73, 0xec, 0xb1, 0xc7, 0x1e, 0x43, 0x4b, 0x21, 0xc7, 0x1c, 0x7d, 0xf4, 0xd1, 0x47, 0xd3,
	0x83, 0xb1, 0x76, 0x2f, 0x3e, 0xfa, 0xe8, 0x63, 0xd1, 0xec, 0xac, 0xac, 0xf5, 0x9f, 0x08, 0x9f,
	0x34, 0xf3, 0xde, 0xef, 0x9b, 0x79, 0xb3, 0xdf, 0x9b, 0x11, 0x69, 0xf6, 0x02, 0xd5, 0x1f, 0x75,
	0x2d, 0x8f, 0x0f, 0xed, 0xd7, 0x7d, 0x78, 0xdd, 0x0f, 0xc2, 0x9e, 0x7c, 0x05, 0x6a, 0x9b, 0x8b,
	0x2d, 0xdb, 0x8d, 0x02, 0x3b, 0x4c, 0xc7, 0x12, 0xc4, 0x18, 0x44, 0x7e, 0x66, 0x45, 0x82, 0x2b,
	0x4e, 0x2b, 0xb9, 0x60, 0xed, 0xc9, 0xdc, 0x8a, 0x3d, 0xde, 0xe3, 0xb6, 0xa6, 0xba, 0xa3, 0x4d,
	0x3d, 0xd3, 0x13, 0x3d, 0x4a, 0xd5, 0xb5, 0xc7, 0x8b, 0x0a, 0x70, 0xa3, 0xc0, 0xa0, 0x3f, 0x2e,
	0x42, 0x35, 0xe6, 0xf1, 0x81, 0x3d, 0xe0, 0xc2, 0xdd, 0x76, 0x43, 0xdb, 0x87, 0x71, 0xe0, 0x81,
	0x91, 0x3f, 0x5d, 0x24, 0xef, 0x0a, 0xbe, 0x05, 0xc2, 0xfc, 0x18, 0xd1, 0x77, 0x8b, 0x44, 0x7d,
	0x37, 0xf4, 0x07, 0x20, 0xb2, 0xdf, 0x54, 0x56, 0xff, 0x9d, 0x7c, 0xde, 0xd6, 0x7b, 0x4b, 0x07,
	0x7e, 0x1b, 0x81, 0x54, 0xf4, 0x0d, 0x29, 0xf9, 0x30, 0xde, 0x70, 0x7d, 0x5f, 0x54, 0xf1, 0x0a,
	0x5e, 0xbd, 0xd3, 0xfa, 0x61, 0xef, 0xf0, 0x01, 0xfa, 0xef, 0xf0, 0x41, 0xe3, 0x53, 0x5b, 0x28,
	0x15, 0xda, 0x1e, 0x17, 0x60, 0xab, 0xb7, 0x11, 0x48, 0xab, 0x0d, 0xe3, 0xa6, 0xef, 0x0b, 0xe7,
	0x96, 0x9f, 0x0e, 0xe8, 0x32, 0xf9, 0x6c, 0x73, 0xc3, 0x0b, 0x55, 0xb5, 0xb0, 0x82, 0x57, 0x2b,
	0xce, 0xcd, 0xcd, 0x17, 0xa1, 0xaa, 0x3f, 0x23, 0x4b, 0xb3, 0xdd, 0x65, 0xc4, 0x43, 0x09, 0xf4,
	0x31, 0xb9, 0x25, 0x40, 0x8e, 0x06, 0x4a, 0x56, 0xf1, 0xca, 0x8d, 0xd5, 0x72, 0x63, 0xc9, 0x32,
	0x1f, 0xc9, 0x4a, 0x51, 0x27, 0xcb, 0xd7, 0x97, 0x48, 0x65, 0x5d, 0xb9, 0x6a, 0x94, 0x95, 0x5e,
	0xff, 0xb7, 0x40, 0x8a, 0x69, 0x84, 0x5a, 0xa4, 0x28, 0xdf, 0x4a, 0x05, 0x43, 0x7d, 0x86, 0x72,
	0xe3, 0x0b, 0x6b, 0x6a, 0xcf, 0xba, 0x0e, 0x4d, 0x11, 0xd9, 0xba, 0x39, 0x3d, 0x95, 0x63, 0x28,
	0xfa, 0x3d, 0xb9, 0xed, 0xf1, 0x61, 0xc4, 0x43, 0x30, 0x25, 0x96, 0x1b, 0xcb, 0x5a, 0xf2, 0x22,
	0x8b, 0xce, 0xab, 0xce, 0x58, 0x5a, 0x27, 0xc5, 0x51, 0x34, 0x08, 0xc2, 0xad, 0x6a, 0x59, 0xab,
	0x88, 0x56, 0x39, 0xae, 0x02, 0xe9, 0x98, 0x0c, 0x7d, 0x44, 0x4a, 0x3e, 0xdf, 0x0e, 0x35, 0x75,
	0xe7, 0x02, 0x35, 0xcb, 0xd1, 0x6f, 0x49, 0xd9, 0xf5, 0x54, 0x30, 0x76, 0x55, 0xc0, 0x43, 0x59,
	0xad, 0x5c, 0x40, 0xe7, 0xd3, 0xf4, 0x39, 0x59, 0x4e, 0xdb, 0x46, 0x6e, 0x44, 0x20, 0xb4, 0x61,
	0x20, 0x65, 0xf5, 0xde, 0xdc, 0x79, 0x3b, 0x20, 0x3c, 0x08, 0x55, 0x30, 0x00, 0xe9, 0xdc, 0x35,
	0x70, 0x07, 0x44, 0x33, 0x45, 0x1b, 0xff, 0xdc, 0x20, 0x15, 0xe3, 0xdf, 0xba, 0xbe, 0x13, 0xf4,
	0x67, 0x42, 0x5e, 0x82, 0x32, 0x9e, 0xd0, 0xaf, 0xad, 0xfc, 0x35, 0xca, 0x77, 0x4a, 0x8d, 0x5d,
	0x95, 0x36, 0x56, 0x0e, 0xc9, 0xdd, 0x8e, 0x80, 0xc8, 0x15, 0xd0, 0x9c, 0x95, 0x4d, 0xbf, 0xb1,
	0x4c, 0xdb, 0xb6, 0xc1, 0x9f, 0x7e, 0x1e, 0xcf, 0x55, 0xe0, 0xa7, 0xca, 0x33, 0x2a, 0xdb, 0xe1,
	0x3a, 0x30, 0xed, 0x90, 0x92, 0x09, 0x02, 0x7d, 0x68, 0x65, 0x6d, 0x7e, 0x91, 0x4e, 0xab, 0xab,
	0x2d, 0x46, 0xe8, 0x2b, 0x52, 0x7c, 0x93, 0x3a, 0xf8, 0xf0, 0xb2, 0x42, 0xd2, 0xdc, 0x1a, 0x48,
	0xe9, 0xf6, 0xa6, 0xeb, 0x2d, 0x42, 0xe8, 0x33, 0x52, 0x6a, 0x67, 0x5e, 0x7f, 0x35, 0xc3, 0x4d,
	0x24, 0x5b, 0xe7, 0xaa, 0x44, 0xe3, 0x17, 0xf2, 0x65, 0xce, 0xac, 0x35, 0x37, 0x74, 0x7b, 0x20,
	0xe8, 0x73, 0x72, 0xfb, 0x25, 0x28, 0xd3, 0xf7, 0xf7, 0xcf, 0x79, 0x92, 0xbb, 0x20, 0xb5, 0x7b,
	0x97, 0x66, 0x5b, 0x3b, 0x85, 0xbd, 0x09, 0xc3, 0xfb, 0x13, 0x86, 0x0f, 0x26, 0x0c, 0x1d, 0x4d,
	0x18, 0x3a, 0x9e, 0x30, 0x74, 0x32, 0x61, 0xe8, 0x74, 0xc2, 0xf0, 0x4e, 0xcc, 0xf0, 0xbb, 0x98,
	0xa1, 0xf7, 0x31, 0xc3, 0x1f, 0x62, 0x86, 0x3e, 0xc6, 0x0c, 0xed, 0xc6, 0x0c, 0xed, 0xc5, 0x0c,
	0xef, 0xc7, 0x0c, 0x1f, 0xc4, 0x0c, 0x1d, 0xc5, 0x0c, 0x1f, 0xc7, 0x0c, 0x9d, 0xc4, 0x0c, 0x9f,
	0xc6, 0x0c, 0xed, 0x24, 0x0c, 0xbd, 0x4b, 0x18, 0xfe, 0x23, 0x61, 0xe8, 0xcf, 0x84, 0xe1, 0xbf,
	0x12, 0x86, 0xde, 0x27, 0x0c, 0x7d, 0x48, 0x18, 0xfe, 0x98, 0x30, 0xbc, 0x9b, 0x30, 0x4c, 0x1e,
	0x71, 0xd1, 0xb3, 0x54, 0x1f, 0x94, 0x7e, 0x48, 0x4c, 0x65, 0xba, 0x6f, 0x73, 0x55, 0xb6, 0x68,
	0xee, 0xd8, 0x9d, 0xe9, 0xbb, 0xd5, 0xc1, 0xbf, 0x3e, 0xb9, 0xd6, 0x1f, 0xc2, 0xdf, 0x85, 0xfb,
	0xe7, 0x21, 0xab, 0xd9, 0xf9, 0xc9, 0x5a, 0xe3, 0x61, 0xa0, 0xb8, 0xe8, 0x16, 0xf5, 0x73, 0xf8,
	0xf4, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xc0, 0xc6, 0x4b, 0x67, 0x06, 0x00, 0x00,
}
