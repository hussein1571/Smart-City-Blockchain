// Code generated by MockGen. DO NOT EDIT.
// Source: ./discovery/discoveryclient/client.go

// Package discoveryclient is a generated GoMock package.
package discoveryclient

import (
	discovery "github.com/TheThingsNetwork/api/discovery"
	types "github.com/TheThingsNetwork/ttn/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Announce mocks base method
func (m *MockClient) Announce(token string) error {
	ret := m.ctrl.Call(m, "Announce", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Announce indicates an expected call of Announce
func (mr *MockClientMockRecorder) Announce(token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Announce", reflect.TypeOf((*MockClient)(nil).Announce), token)
}

// GetAll mocks base method
func (m *MockClient) GetAll(serviceName string) ([]*discovery.Announcement, error) {
	ret := m.ctrl.Call(m, "GetAll", serviceName)
	ret0, _ := ret[0].([]*discovery.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockClientMockRecorder) GetAll(serviceName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClient)(nil).GetAll), serviceName)
}

// Get mocks base method
func (m *MockClient) Get(serviceName, id string) (*discovery.Announcement, error) {
	ret := m.ctrl.Call(m, "Get", serviceName, id)
	ret0, _ := ret[0].(*discovery.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClientMockRecorder) Get(serviceName, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClient)(nil).Get), serviceName, id)
}

// AddDevAddrPrefix mocks base method
func (m *MockClient) AddDevAddrPrefix(prefix types.DevAddrPrefix) error {
	ret := m.ctrl.Call(m, "AddDevAddrPrefix", prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDevAddrPrefix indicates an expected call of AddDevAddrPrefix
func (mr *MockClientMockRecorder) AddDevAddrPrefix(prefix interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDevAddrPrefix", reflect.TypeOf((*MockClient)(nil).AddDevAddrPrefix), prefix)
}

// AddAppID mocks base method
func (m *MockClient) AddAppID(appID, token string) error {
	ret := m.ctrl.Call(m, "AddAppID", appID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppID indicates an expected call of AddAppID
func (mr *MockClientMockRecorder) AddAppID(appID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppID", reflect.TypeOf((*MockClient)(nil).AddAppID), appID, token)
}

// AddGatewayID mocks base method
func (m *MockClient) AddGatewayID(gatewayID, token string) error {
	ret := m.ctrl.Call(m, "AddGatewayID", gatewayID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGatewayID indicates an expected call of AddGatewayID
func (mr *MockClientMockRecorder) AddGatewayID(gatewayID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGatewayID", reflect.TypeOf((*MockClient)(nil).AddGatewayID), gatewayID, token)
}

// RemoveDevAddrPrefix mocks base method
func (m *MockClient) RemoveDevAddrPrefix(prefix types.DevAddrPrefix) error {
	ret := m.ctrl.Call(m, "RemoveDevAddrPrefix", prefix)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDevAddrPrefix indicates an expected call of RemoveDevAddrPrefix
func (mr *MockClientMockRecorder) RemoveDevAddrPrefix(prefix interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDevAddrPrefix", reflect.TypeOf((*MockClient)(nil).RemoveDevAddrPrefix), prefix)
}

// RemoveAppID mocks base method
func (m *MockClient) RemoveAppID(appID, token string) error {
	ret := m.ctrl.Call(m, "RemoveAppID", appID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAppID indicates an expected call of RemoveAppID
func (mr *MockClientMockRecorder) RemoveAppID(appID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAppID", reflect.TypeOf((*MockClient)(nil).RemoveAppID), appID, token)
}

// RemoveGatewayID mocks base method
func (m *MockClient) RemoveGatewayID(gatewayID, token string) error {
	ret := m.ctrl.Call(m, "RemoveGatewayID", gatewayID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGatewayID indicates an expected call of RemoveGatewayID
func (mr *MockClientMockRecorder) RemoveGatewayID(gatewayID, token interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGatewayID", reflect.TypeOf((*MockClient)(nil).RemoveGatewayID), gatewayID, token)
}

// GetAllBrokersForDevAddr mocks base method
func (m *MockClient) GetAllBrokersForDevAddr(devAddr types.DevAddr) ([]*discovery.Announcement, error) {
	ret := m.ctrl.Call(m, "GetAllBrokersForDevAddr", devAddr)
	ret0, _ := ret[0].([]*discovery.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBrokersForDevAddr indicates an expected call of GetAllBrokersForDevAddr
func (mr *MockClientMockRecorder) GetAllBrokersForDevAddr(devAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBrokersForDevAddr", reflect.TypeOf((*MockClient)(nil).GetAllBrokersForDevAddr), devAddr)
}

// GetAllHandlersForAppID mocks base method
func (m *MockClient) GetAllHandlersForAppID(appID string) ([]*discovery.Announcement, error) {
	ret := m.ctrl.Call(m, "GetAllHandlersForAppID", appID)
	ret0, _ := ret[0].([]*discovery.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHandlersForAppID indicates an expected call of GetAllHandlersForAppID
func (mr *MockClientMockRecorder) GetAllHandlersForAppID(appID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHandlersForAppID", reflect.TypeOf((*MockClient)(nil).GetAllHandlersForAppID), appID)
}

// GetAllRoutersForGatewayID mocks base method
func (m *MockClient) GetAllRoutersForGatewayID(gatewayID string) ([]*discovery.Announcement, error) {
	ret := m.ctrl.Call(m, "GetAllRoutersForGatewayID", gatewayID)
	ret0, _ := ret[0].([]*discovery.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoutersForGatewayID indicates an expected call of GetAllRoutersForGatewayID
func (mr *MockClientMockRecorder) GetAllRoutersForGatewayID(gatewayID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoutersForGatewayID", reflect.TypeOf((*MockClient)(nil).GetAllRoutersForGatewayID), gatewayID)
}

// Close mocks base method
func (m *MockClient) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}
