/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');


goog.exportSymbol('proto.discovery.Announcement', null, global);
goog.exportSymbol('proto.discovery.AnnouncementsResponse', null, global);
goog.exportSymbol('proto.discovery.GetByAppEUIRequest', null, global);
goog.exportSymbol('proto.discovery.GetByAppIDRequest', null, global);
goog.exportSymbol('proto.discovery.GetByGatewayIDRequest', null, global);
goog.exportSymbol('proto.discovery.GetRequest', null, global);
goog.exportSymbol('proto.discovery.GetServiceRequest', null, global);
goog.exportSymbol('proto.discovery.Metadata', null, global);
goog.exportSymbol('proto.discovery.MetadataRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.discovery.Metadata.oneofGroups_);
};
goog.inherits(proto.discovery.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.Metadata.displayName = 'proto.discovery.Metadata';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.discovery.Metadata.oneofGroups_ = [[10,20,30,31]];

/**
 * @enum {number}
 */
proto.discovery.Metadata.MetadataCase = {
  METADATA_NOT_SET: 0,
  GATEWAY_ID: 10,
  DEV_ADDR_PREFIX: 20,
  APP_ID: 30,
  APP_EUI: 31
};

/**
 * @return {proto.discovery.Metadata.MetadataCase}
 */
proto.discovery.Metadata.prototype.getMetadataCase = function() {
  return /** @type {proto.discovery.Metadata.MetadataCase} */(jspb.Message.computeOneofCase(this, proto.discovery.Metadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    devAddrPrefix: msg.getDevAddrPrefix_asB64(),
    appId: jspb.Message.getFieldWithDefault(msg, 30, ""),
    appEui: msg.getAppEui_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Metadata}
 */
proto.discovery.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Metadata;
  return proto.discovery.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Metadata}
 */
proto.discovery.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddrPrefix(value);
      break;
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 31:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppEui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 30));
  if (f != null) {
    writer.writeString(
      30,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 31));
  if (f != null) {
    writer.writeBytes(
      31,
      f
    );
  }
};


/**
 * optional string gateway_id = 10;
 * @return {string}
 */
proto.discovery.Metadata.prototype.getGatewayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.discovery.Metadata.prototype.setGatewayId = function(value) {
  jspb.Message.setOneofField(this, 10, proto.discovery.Metadata.oneofGroups_[0], value);
};


proto.discovery.Metadata.prototype.clearGatewayId = function() {
  jspb.Message.setOneofField(this, 10, proto.discovery.Metadata.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.discovery.Metadata.prototype.hasGatewayId = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes dev_addr_prefix = 20;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.Metadata.prototype.getDevAddrPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes dev_addr_prefix = 20;
 * This is a type-conversion wrapper around `getDevAddrPrefix()`
 * @return {string}
 */
proto.discovery.Metadata.prototype.getDevAddrPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddrPrefix()));
};


/**
 * optional bytes dev_addr_prefix = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddrPrefix()`
 * @return {!Uint8Array}
 */
proto.discovery.Metadata.prototype.getDevAddrPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddrPrefix()));
};


/** @param {!(string|Uint8Array)} value */
proto.discovery.Metadata.prototype.setDevAddrPrefix = function(value) {
  jspb.Message.setOneofField(this, 20, proto.discovery.Metadata.oneofGroups_[0], value);
};


proto.discovery.Metadata.prototype.clearDevAddrPrefix = function() {
  jspb.Message.setOneofField(this, 20, proto.discovery.Metadata.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.discovery.Metadata.prototype.hasDevAddrPrefix = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string app_id = 30;
 * @return {string}
 */
proto.discovery.Metadata.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.discovery.Metadata.prototype.setAppId = function(value) {
  jspb.Message.setOneofField(this, 30, proto.discovery.Metadata.oneofGroups_[0], value);
};


proto.discovery.Metadata.prototype.clearAppId = function() {
  jspb.Message.setOneofField(this, 30, proto.discovery.Metadata.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.discovery.Metadata.prototype.hasAppId = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional bytes app_eui = 31;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.Metadata.prototype.getAppEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * optional bytes app_eui = 31;
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {string}
 */
proto.discovery.Metadata.prototype.getAppEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppEui()));
};


/**
 * optional bytes app_eui = 31;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {!Uint8Array}
 */
proto.discovery.Metadata.prototype.getAppEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.discovery.Metadata.prototype.setAppEui = function(value) {
  jspb.Message.setOneofField(this, 31, proto.discovery.Metadata.oneofGroups_[0], value);
};


proto.discovery.Metadata.prototype.clearAppEui = function() {
  jspb.Message.setOneofField(this, 31, proto.discovery.Metadata.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.discovery.Metadata.prototype.hasAppEui = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Announcement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.Announcement.repeatedFields_, null);
};
goog.inherits(proto.discovery.Announcement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.Announcement.displayName = 'proto.discovery.Announcement';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.Announcement.repeatedFields_ = [22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Announcement.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Announcement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Announcement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Announcement.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    serviceVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    url: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_public: jspb.Message.getFieldWithDefault(msg, 6, false),
    netAddress: jspb.Message.getFieldWithDefault(msg, 11, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 12, ""),
    certificate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    apiAddress: jspb.Message.getFieldWithDefault(msg, 14, ""),
    mqttAddress: jspb.Message.getFieldWithDefault(msg, 15, ""),
    amqpAddress: jspb.Message.getFieldWithDefault(msg, 16, ""),
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    proto.discovery.Metadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Announcement}
 */
proto.discovery.Announcement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Announcement;
  return proto.discovery.Announcement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Announcement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Announcement}
 */
proto.discovery.Announcement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetAddress(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setCertificate(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiAddress(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMqttAddress(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmqpAddress(value);
      break;
    case 22:
      var value = new proto.discovery.Metadata;
      reader.readMessage(value,proto.discovery.Metadata.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Announcement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Announcement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Announcement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Announcement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getServiceVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPublic();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNetAddress();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getCertificate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getApiAddress();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getMqttAddress();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getAmqpAddress();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.discovery.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string service_version = 3;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getServiceVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setServiceVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string url = 5;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setUrl = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool public = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.discovery.Announcement.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.discovery.Announcement.prototype.setPublic = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string net_address = 11;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getNetAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setNetAddress = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string public_key = 12;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string certificate = 13;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getCertificate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setCertificate = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string api_address = 14;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getApiAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setApiAddress = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string mqtt_address = 15;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getMqttAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setMqttAddress = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string amqp_address = 16;
 * @return {string}
 */
proto.discovery.Announcement.prototype.getAmqpAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.discovery.Announcement.prototype.setAmqpAddress = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * repeated Metadata metadata = 22;
 * @return {!Array<!proto.discovery.Metadata>}
 */
proto.discovery.Announcement.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.discovery.Metadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Metadata, 22));
};


/** @param {!Array<!proto.discovery.Metadata>} value */
proto.discovery.Announcement.prototype.setMetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.discovery.Metadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Metadata}
 */
proto.discovery.Announcement.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.discovery.Metadata, opt_index);
};


proto.discovery.Announcement.prototype.clearMetadataList = function() {
  this.setMetadataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.GetServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.GetServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.GetServiceRequest.displayName = 'proto.discovery.GetServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.GetServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.GetServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.GetServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.GetServiceRequest}
 */
proto.discovery.GetServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.GetServiceRequest;
  return proto.discovery.GetServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.GetServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.GetServiceRequest}
 */
proto.discovery.GetServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.GetServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.GetServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.GetServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string service_name = 1;
 * @return {string}
 */
proto.discovery.GetServiceRequest.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.discovery.GetServiceRequest.prototype.setServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.GetRequest.displayName = 'proto.discovery.GetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.GetRequest}
 */
proto.discovery.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.GetRequest;
  return proto.discovery.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.GetRequest}
 */
proto.discovery.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.discovery.GetRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.discovery.GetRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.discovery.GetRequest.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.discovery.GetRequest.prototype.setServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.MetadataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.MetadataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.MetadataRequest.displayName = 'proto.discovery.MetadataRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.MetadataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.MetadataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.MetadataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.MetadataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: (f = msg.getMetadata()) && proto.discovery.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.MetadataRequest}
 */
proto.discovery.MetadataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.MetadataRequest;
  return proto.discovery.MetadataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.MetadataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.MetadataRequest}
 */
proto.discovery.MetadataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceName(value);
      break;
    case 12:
      var value = new proto.discovery.Metadata;
      reader.readMessage(value,proto.discovery.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.MetadataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.MetadataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.MetadataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.MetadataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.discovery.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.discovery.MetadataRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.discovery.MetadataRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_name = 2;
 * @return {string}
 */
proto.discovery.MetadataRequest.prototype.getServiceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.discovery.MetadataRequest.prototype.setServiceName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Metadata metadata = 12;
 * @return {?proto.discovery.Metadata}
 */
proto.discovery.MetadataRequest.prototype.getMetadata = function() {
  return /** @type{?proto.discovery.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.discovery.Metadata, 12));
};


/** @param {?proto.discovery.Metadata|undefined} value */
proto.discovery.MetadataRequest.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.discovery.MetadataRequest.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.discovery.MetadataRequest.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.AnnouncementsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.AnnouncementsResponse.repeatedFields_, null);
};
goog.inherits(proto.discovery.AnnouncementsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.AnnouncementsResponse.displayName = 'proto.discovery.AnnouncementsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.AnnouncementsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.AnnouncementsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.AnnouncementsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.AnnouncementsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.AnnouncementsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.discovery.Announcement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.AnnouncementsResponse}
 */
proto.discovery.AnnouncementsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.AnnouncementsResponse;
  return proto.discovery.AnnouncementsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.AnnouncementsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.AnnouncementsResponse}
 */
proto.discovery.AnnouncementsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.Announcement;
      reader.readMessage(value,proto.discovery.Announcement.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.AnnouncementsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.AnnouncementsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.AnnouncementsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.AnnouncementsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.discovery.Announcement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Announcement services = 1;
 * @return {!Array<!proto.discovery.Announcement>}
 */
proto.discovery.AnnouncementsResponse.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.discovery.Announcement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Announcement, 1));
};


/** @param {!Array<!proto.discovery.Announcement>} value */
proto.discovery.AnnouncementsResponse.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.discovery.Announcement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Announcement}
 */
proto.discovery.AnnouncementsResponse.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.discovery.Announcement, opt_index);
};


proto.discovery.AnnouncementsResponse.prototype.clearServicesList = function() {
  this.setServicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.GetByAppIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.GetByAppIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.GetByAppIDRequest.displayName = 'proto.discovery.GetByAppIDRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.GetByAppIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.GetByAppIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.GetByAppIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByAppIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.GetByAppIDRequest}
 */
proto.discovery.GetByAppIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.GetByAppIDRequest;
  return proto.discovery.GetByAppIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.GetByAppIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.GetByAppIDRequest}
 */
proto.discovery.GetByAppIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.GetByAppIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.GetByAppIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.GetByAppIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByAppIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional string app_id = 30;
 * @return {string}
 */
proto.discovery.GetByAppIDRequest.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.discovery.GetByAppIDRequest.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.GetByGatewayIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.GetByGatewayIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.GetByGatewayIDRequest.displayName = 'proto.discovery.GetByGatewayIDRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.GetByGatewayIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.GetByGatewayIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.GetByGatewayIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByGatewayIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: jspb.Message.getFieldWithDefault(msg, 30, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.GetByGatewayIDRequest}
 */
proto.discovery.GetByGatewayIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.GetByGatewayIDRequest;
  return proto.discovery.GetByGatewayIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.GetByGatewayIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.GetByGatewayIDRequest}
 */
proto.discovery.GetByGatewayIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 30:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.GetByGatewayIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.GetByGatewayIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.GetByGatewayIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByGatewayIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayId();
  if (f.length > 0) {
    writer.writeString(
      30,
      f
    );
  }
};


/**
 * optional string gateway_id = 30;
 * @return {string}
 */
proto.discovery.GetByGatewayIDRequest.prototype.getGatewayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 30, ""));
};


/** @param {string} value */
proto.discovery.GetByGatewayIDRequest.prototype.setGatewayId = function(value) {
  jspb.Message.setProto3StringField(this, 30, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.GetByAppEUIRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.GetByAppEUIRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.discovery.GetByAppEUIRequest.displayName = 'proto.discovery.GetByAppEUIRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.GetByAppEUIRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.GetByAppEUIRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.GetByAppEUIRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByAppEUIRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    appEui: msg.getAppEui_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.GetByAppEUIRequest}
 */
proto.discovery.GetByAppEUIRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.GetByAppEUIRequest;
  return proto.discovery.GetByAppEUIRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.GetByAppEUIRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.GetByAppEUIRequest}
 */
proto.discovery.GetByAppEUIRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 31:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppEui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.GetByAppEUIRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.GetByAppEUIRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.GetByAppEUIRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.GetByAppEUIRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      31,
      f
    );
  }
};


/**
 * optional bytes app_eui = 31;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.GetByAppEUIRequest.prototype.getAppEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 31, ""));
};


/**
 * optional bytes app_eui = 31;
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {string}
 */
proto.discovery.GetByAppEUIRequest.prototype.getAppEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppEui()));
};


/**
 * optional bytes app_eui = 31;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppEui()`
 * @return {!Uint8Array}
 */
proto.discovery.GetByAppEUIRequest.prototype.getAppEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppEui()));
};


/** @param {!(string|Uint8Array)} value */
proto.discovery.GetByAppEUIRequest.prototype.setAppEui = function(value) {
  jspb.Message.setProto3BytesField(this, 31, value);
};


goog.object.extend(exports, proto.discovery);
