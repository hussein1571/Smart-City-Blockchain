/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();


goog.exportSymbol('proto.gateway.LocationMetadata', null, global);
goog.exportSymbol('proto.gateway.LocationMetadata.LocationSource', null, global);
goog.exportSymbol('proto.gateway.RxMetadata', null, global);
goog.exportSymbol('proto.gateway.RxMetadata.Antenna', null, global);
goog.exportSymbol('proto.gateway.Status', null, global);
goog.exportSymbol('proto.gateway.Status.OSMetrics', null, global);
goog.exportSymbol('proto.gateway.TxConfiguration', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.LocationMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.LocationMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.LocationMetadata.displayName = 'proto.gateway.LocationMetadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.LocationMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.LocationMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.LocationMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.LocationMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: jspb.Message.getFieldWithDefault(msg, 1, 0),
    latitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    altitude: jspb.Message.getFieldWithDefault(msg, 4, 0),
    accuracy: jspb.Message.getFieldWithDefault(msg, 5, 0),
    source: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.LocationMetadata}
 */
proto.gateway.LocationMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.LocationMetadata;
  return proto.gateway.LocationMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.LocationMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.LocationMetadata}
 */
proto.gateway.LocationMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAltitude(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAccuracy(value);
      break;
    case 6:
      var value = /** @type {!proto.gateway.LocationMetadata.LocationSource} */ (reader.readEnum());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.LocationMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.LocationMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.LocationMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.LocationMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getAccuracy();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSource();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.gateway.LocationMetadata.LocationSource = {
  UNKNOWN: 0,
  GPS: 1,
  CONFIG: 2,
  REGISTRY: 3,
  IP_GEOLOCATION: 4
};

/**
 * optional int64 time = 1;
 * @return {number}
 */
proto.gateway.LocationMetadata.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.gateway.LocationMetadata.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float latitude = 2;
 * @return {number}
 */
proto.gateway.LocationMetadata.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.gateway.LocationMetadata.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float longitude = 3;
 * @return {number}
 */
proto.gateway.LocationMetadata.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.gateway.LocationMetadata.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int32 altitude = 4;
 * @return {number}
 */
proto.gateway.LocationMetadata.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.gateway.LocationMetadata.prototype.setAltitude = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 accuracy = 5;
 * @return {number}
 */
proto.gateway.LocationMetadata.prototype.getAccuracy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.gateway.LocationMetadata.prototype.setAccuracy = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional LocationSource source = 6;
 * @return {!proto.gateway.LocationMetadata.LocationSource}
 */
proto.gateway.LocationMetadata.prototype.getSource = function() {
  return /** @type {!proto.gateway.LocationMetadata.LocationSource} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.gateway.LocationMetadata.LocationSource} value */
proto.gateway.LocationMetadata.prototype.setSource = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.RxMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.RxMetadata.repeatedFields_, null);
};
goog.inherits(proto.gateway.RxMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.RxMetadata.displayName = 'proto.gateway.RxMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.RxMetadata.repeatedFields_ = [30];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.RxMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.RxMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.RxMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.RxMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    gatewayTrusted: jspb.Message.getFieldWithDefault(msg, 2, false),
    timestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    time: jspb.Message.getFieldWithDefault(msg, 12, 0),
    encryptedTime: msg.getEncryptedTime_asB64(),
    rfChain: jspb.Message.getFieldWithDefault(msg, 21, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 22, 0),
    antennasList: jspb.Message.toObjectList(msg.getAntennasList(),
    proto.gateway.RxMetadata.Antenna.toObject, includeInstance),
    frequency: jspb.Message.getFieldWithDefault(msg, 31, 0),
    rssi: +jspb.Message.getFieldWithDefault(msg, 32, 0.0),
    snr: +jspb.Message.getFieldWithDefault(msg, 33, 0.0),
    location: (f = msg.getLocation()) && proto.gateway.LocationMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.RxMetadata}
 */
proto.gateway.RxMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.RxMetadata;
  return proto.gateway.RxMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.RxMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.RxMetadata}
 */
proto.gateway.RxMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGatewayId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGatewayTrusted(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedTime(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRfChain(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel(value);
      break;
    case 30:
      var value = new proto.gateway.RxMetadata.Antenna;
      reader.readMessage(value,proto.gateway.RxMetadata.Antenna.deserializeBinaryFromReader);
      msg.addAntennas(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrequency(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRssi(value);
      break;
    case 33:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSnr(value);
      break;
    case 41:
      var value = new proto.gateway.LocationMetadata;
      reader.readMessage(value,proto.gateway.LocationMetadata.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.RxMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.RxMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.RxMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.RxMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGatewayId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGatewayTrusted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getEncryptedTime_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getRfChain();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeUint32(
      22,
      f
    );
  }
  f = message.getAntennasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      30,
      f,
      proto.gateway.RxMetadata.Antenna.serializeBinaryToWriter
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint64(
      31,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0.0) {
    writer.writeFloat(
      32,
      f
    );
  }
  f = message.getSnr();
  if (f !== 0.0) {
    writer.writeFloat(
      33,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.gateway.LocationMetadata.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.RxMetadata.Antenna = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.RxMetadata.Antenna, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.RxMetadata.Antenna.displayName = 'proto.gateway.RxMetadata.Antenna';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.RxMetadata.Antenna.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.RxMetadata.Antenna.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.RxMetadata.Antenna} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.RxMetadata.Antenna.toObject = function(includeInstance, msg) {
  var f, obj = {
    antenna: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rssi: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    channelRssi: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    rssiStandardDeviation: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    frequencyOffset: jspb.Message.getFieldWithDefault(msg, 7, 0),
    snr: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    encryptedTime: msg.getEncryptedTime_asB64(),
    fineTime: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.RxMetadata.Antenna}
 */
proto.gateway.RxMetadata.Antenna.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.RxMetadata.Antenna;
  return proto.gateway.RxMetadata.Antenna.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.RxMetadata.Antenna} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.RxMetadata.Antenna}
 */
proto.gateway.RxMetadata.Antenna.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAntenna(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRssi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setChannelRssi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRssiStandardDeviation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrequencyOffset(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSnr(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFineTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.RxMetadata.Antenna.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.RxMetadata.Antenna.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.RxMetadata.Antenna} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.RxMetadata.Antenna.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAntenna();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getChannel();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getChannelRssi();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getRssiStandardDeviation();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getFrequencyOffset();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getSnr();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getEncryptedTime_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getFineTime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
};


/**
 * optional uint32 antenna = 1;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getAntenna = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setAntenna = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 channel = 2;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float rssi = 3;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getRssi = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setRssi = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float channel_rssi = 5;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getChannelRssi = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setChannelRssi = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float rssi_standard_deviation = 6;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getRssiStandardDeviation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setRssiStandardDeviation = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int64 frequency_offset = 7;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getFrequencyOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setFrequencyOffset = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional float snr = 4;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getSnr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setSnr = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional bytes encrypted_time = 10;
 * @return {!(string|Uint8Array)}
 */
proto.gateway.RxMetadata.Antenna.prototype.getEncryptedTime = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes encrypted_time = 10;
 * This is a type-conversion wrapper around `getEncryptedTime()`
 * @return {string}
 */
proto.gateway.RxMetadata.Antenna.prototype.getEncryptedTime_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedTime()));
};


/**
 * optional bytes encrypted_time = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedTime()`
 * @return {!Uint8Array}
 */
proto.gateway.RxMetadata.Antenna.prototype.getEncryptedTime_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedTime()));
};


/** @param {!(string|Uint8Array)} value */
proto.gateway.RxMetadata.Antenna.prototype.setEncryptedTime = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional int64 fine_time = 11;
 * @return {number}
 */
proto.gateway.RxMetadata.Antenna.prototype.getFineTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.Antenna.prototype.setFineTime = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional string gateway_id = 1;
 * @return {string}
 */
proto.gateway.RxMetadata.prototype.getGatewayId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.gateway.RxMetadata.prototype.setGatewayId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool gateway_trusted = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.gateway.RxMetadata.prototype.getGatewayTrusted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.gateway.RxMetadata.prototype.setGatewayTrusted = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 timestamp = 11;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 time = 12;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes encrypted_time = 13;
 * @return {!(string|Uint8Array)}
 */
proto.gateway.RxMetadata.prototype.getEncryptedTime = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes encrypted_time = 13;
 * This is a type-conversion wrapper around `getEncryptedTime()`
 * @return {string}
 */
proto.gateway.RxMetadata.prototype.getEncryptedTime_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedTime()));
};


/**
 * optional bytes encrypted_time = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedTime()`
 * @return {!Uint8Array}
 */
proto.gateway.RxMetadata.prototype.getEncryptedTime_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedTime()));
};


/** @param {!(string|Uint8Array)} value */
proto.gateway.RxMetadata.prototype.setEncryptedTime = function(value) {
  jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional uint32 rf_chain = 21;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getRfChain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setRfChain = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint32 channel = 22;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getChannel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setChannel = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * repeated Antenna antennas = 30;
 * @return {!Array<!proto.gateway.RxMetadata.Antenna>}
 */
proto.gateway.RxMetadata.prototype.getAntennasList = function() {
  return /** @type{!Array<!proto.gateway.RxMetadata.Antenna>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gateway.RxMetadata.Antenna, 30));
};


/** @param {!Array<!proto.gateway.RxMetadata.Antenna>} value */
proto.gateway.RxMetadata.prototype.setAntennasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 30, value);
};


/**
 * @param {!proto.gateway.RxMetadata.Antenna=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gateway.RxMetadata.Antenna}
 */
proto.gateway.RxMetadata.prototype.addAntennas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 30, opt_value, proto.gateway.RxMetadata.Antenna, opt_index);
};


proto.gateway.RxMetadata.prototype.clearAntennasList = function() {
  this.setAntennasList([]);
};


/**
 * optional uint64 frequency = 31;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setFrequency = function(value) {
  jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional float rssi = 32;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getRssi = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 32, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setRssi = function(value) {
  jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * optional float snr = 33;
 * @return {number}
 */
proto.gateway.RxMetadata.prototype.getSnr = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 33, 0.0));
};


/** @param {number} value */
proto.gateway.RxMetadata.prototype.setSnr = function(value) {
  jspb.Message.setProto3FloatField(this, 33, value);
};


/**
 * optional LocationMetadata location = 41;
 * @return {?proto.gateway.LocationMetadata}
 */
proto.gateway.RxMetadata.prototype.getLocation = function() {
  return /** @type{?proto.gateway.LocationMetadata} */ (
    jspb.Message.getWrapperField(this, proto.gateway.LocationMetadata, 41));
};


/** @param {?proto.gateway.LocationMetadata|undefined} value */
proto.gateway.RxMetadata.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 41, value);
};


proto.gateway.RxMetadata.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.RxMetadata.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 41) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.TxConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.TxConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.TxConfiguration.displayName = 'proto.gateway.TxConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.TxConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.TxConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.TxConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TxConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 11, 0),
    rfChain: jspb.Message.getFieldWithDefault(msg, 21, 0),
    frequency: jspb.Message.getFieldWithDefault(msg, 22, 0),
    power: jspb.Message.getFieldWithDefault(msg, 23, 0),
    polarizationInversion: jspb.Message.getFieldWithDefault(msg, 31, false),
    frequencyDeviation: jspb.Message.getFieldWithDefault(msg, 32, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.TxConfiguration}
 */
proto.gateway.TxConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.TxConfiguration;
  return proto.gateway.TxConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.TxConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.TxConfiguration}
 */
proto.gateway.TxConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRfChain(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFrequency(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPower(value);
      break;
    case 31:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPolarizationInversion(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequencyDeviation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.TxConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.TxConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.TxConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.TxConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getRfChain();
  if (f !== 0) {
    writer.writeUint32(
      21,
      f
    );
  }
  f = message.getFrequency();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getPower();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getPolarizationInversion();
  if (f) {
    writer.writeBool(
      31,
      f
    );
  }
  f = message.getFrequencyDeviation();
  if (f !== 0) {
    writer.writeUint32(
      32,
      f
    );
  }
};


/**
 * optional uint32 timestamp = 11;
 * @return {number}
 */
proto.gateway.TxConfiguration.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.gateway.TxConfiguration.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint32 rf_chain = 21;
 * @return {number}
 */
proto.gateway.TxConfiguration.prototype.getRfChain = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.gateway.TxConfiguration.prototype.setRfChain = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional uint64 frequency = 22;
 * @return {number}
 */
proto.gateway.TxConfiguration.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.gateway.TxConfiguration.prototype.setFrequency = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 power = 23;
 * @return {number}
 */
proto.gateway.TxConfiguration.prototype.getPower = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.gateway.TxConfiguration.prototype.setPower = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional bool polarization_inversion = 31;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.gateway.TxConfiguration.prototype.getPolarizationInversion = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 31, false));
};


/** @param {boolean} value */
proto.gateway.TxConfiguration.prototype.setPolarizationInversion = function(value) {
  jspb.Message.setProto3BooleanField(this, 31, value);
};


/**
 * optional uint32 frequency_deviation = 32;
 * @return {number}
 */
proto.gateway.TxConfiguration.prototype.getFrequencyDeviation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 32, 0));
};


/** @param {number} value */
proto.gateway.TxConfiguration.prototype.setFrequencyDeviation = function(value) {
  jspb.Message.setProto3IntField(this, 32, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gateway.Status.repeatedFields_, null);
};
goog.inherits(proto.gateway.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.Status.displayName = 'proto.gateway.Status';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gateway.Status.repeatedFields_ = [11,52];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gatewayTrusted: jspb.Message.getFieldWithDefault(msg, 3, false),
    bootTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ipList: jspb.Message.getRepeatedField(msg, 11),
    platform: jspb.Message.getFieldWithDefault(msg, 12, ""),
    contactEmail: jspb.Message.getFieldWithDefault(msg, 13, ""),
    description: jspb.Message.getFieldWithDefault(msg, 14, ""),
    frequencyPlan: jspb.Message.getFieldWithDefault(msg, 15, ""),
    bridge: jspb.Message.getFieldWithDefault(msg, 16, ""),
    router: jspb.Message.getFieldWithDefault(msg, 17, ""),
    fpga: jspb.Message.getFieldWithDefault(msg, 18, 0),
    dsp: jspb.Message.getFieldWithDefault(msg, 19, 0),
    hal: jspb.Message.getFieldWithDefault(msg, 20, ""),
    location: (f = msg.getLocation()) && proto.gateway.LocationMetadata.toObject(includeInstance, f),
    rtt: jspb.Message.getFieldWithDefault(msg, 31, 0),
    rxIn: jspb.Message.getFieldWithDefault(msg, 41, 0),
    rxOk: jspb.Message.getFieldWithDefault(msg, 42, 0),
    txIn: jspb.Message.getFieldWithDefault(msg, 43, 0),
    txOk: jspb.Message.getFieldWithDefault(msg, 44, 0),
    lmOk: jspb.Message.getFieldWithDefault(msg, 45, 0),
    lmSt: jspb.Message.getFieldWithDefault(msg, 46, 0),
    lmNw: jspb.Message.getFieldWithDefault(msg, 47, 0),
    lPps: jspb.Message.getFieldWithDefault(msg, 48, 0),
    os: (f = msg.getOs()) && proto.gateway.Status.OSMetrics.toObject(includeInstance, f),
    messagesList: jspb.Message.getRepeatedField(msg, 52)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Status}
 */
proto.gateway.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Status;
  return proto.gateway.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Status}
 */
proto.gateway.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGatewayTrusted(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBootTime(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addIp(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setContactEmail(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrequencyPlan(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setBridge(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouter(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFpga(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDsp(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setHal(value);
      break;
    case 21:
      var value = new proto.gateway.LocationMetadata;
      reader.readMessage(value,proto.gateway.LocationMetadata.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRtt(value);
      break;
    case 41:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxIn(value);
      break;
    case 42:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxOk(value);
      break;
    case 43:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxIn(value);
      break;
    case 44:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxOk(value);
      break;
    case 45:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLmOk(value);
      break;
    case 46:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLmSt(value);
      break;
    case 47:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLmNw(value);
      break;
    case 48:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLPps(value);
      break;
    case 51:
      var value = new proto.gateway.Status.OSMetrics;
      reader.readMessage(value,proto.gateway.Status.OSMetrics.deserializeBinaryFromReader);
      msg.setOs(value);
      break;
    case 52:
      var value = /** @type {string} */ (reader.readString());
      msg.addMessages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getGatewayTrusted();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getBootTime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getIpList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getContactEmail();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getFrequencyPlan();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getBridge();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getRouter();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getFpga();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getDsp();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = message.getHal();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.gateway.LocationMetadata.serializeBinaryToWriter
    );
  }
  f = message.getRtt();
  if (f !== 0) {
    writer.writeUint32(
      31,
      f
    );
  }
  f = message.getRxIn();
  if (f !== 0) {
    writer.writeUint32(
      41,
      f
    );
  }
  f = message.getRxOk();
  if (f !== 0) {
    writer.writeUint32(
      42,
      f
    );
  }
  f = message.getTxIn();
  if (f !== 0) {
    writer.writeUint32(
      43,
      f
    );
  }
  f = message.getTxOk();
  if (f !== 0) {
    writer.writeUint32(
      44,
      f
    );
  }
  f = message.getLmOk();
  if (f !== 0) {
    writer.writeUint32(
      45,
      f
    );
  }
  f = message.getLmSt();
  if (f !== 0) {
    writer.writeUint32(
      46,
      f
    );
  }
  f = message.getLmNw();
  if (f !== 0) {
    writer.writeUint32(
      47,
      f
    );
  }
  f = message.getLPps();
  if (f !== 0) {
    writer.writeUint32(
      48,
      f
    );
  }
  f = message.getOs();
  if (f != null) {
    writer.writeMessage(
      51,
      f,
      proto.gateway.Status.OSMetrics.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      52,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gateway.Status.OSMetrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gateway.Status.OSMetrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.gateway.Status.OSMetrics.displayName = 'proto.gateway.Status.OSMetrics';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gateway.Status.OSMetrics.prototype.toObject = function(opt_includeInstance) {
  return proto.gateway.Status.OSMetrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gateway.Status.OSMetrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Status.OSMetrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    load1: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    load5: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    load15: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    cpuPercentage: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    memoryPercentage: +jspb.Message.getFieldWithDefault(msg, 21, 0.0),
    temperature: +jspb.Message.getFieldWithDefault(msg, 31, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gateway.Status.OSMetrics}
 */
proto.gateway.Status.OSMetrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gateway.Status.OSMetrics;
  return proto.gateway.Status.OSMetrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gateway.Status.OSMetrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gateway.Status.OSMetrics}
 */
proto.gateway.Status.OSMetrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad5(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad15(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpuPercentage(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMemoryPercentage(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gateway.Status.OSMetrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gateway.Status.OSMetrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gateway.Status.OSMetrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gateway.Status.OSMetrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoad1();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLoad5();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLoad15();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCpuPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getMemoryPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      21,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0.0) {
    writer.writeFloat(
      31,
      f
    );
  }
};


/**
 * optional float load_1 = 1;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getLoad1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setLoad1 = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float load_5 = 2;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getLoad5 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setLoad5 = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float load_15 = 3;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getLoad15 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setLoad15 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float cpu_percentage = 11;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getCpuPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setCpuPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float memory_percentage = 21;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getMemoryPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 21, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setMemoryPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional float temperature = 31;
 * @return {number}
 */
proto.gateway.Status.OSMetrics.prototype.getTemperature = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 31, 0.0));
};


/** @param {number} value */
proto.gateway.Status.OSMetrics.prototype.setTemperature = function(value) {
  jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional uint32 timestamp = 1;
 * @return {number}
 */
proto.gateway.Status.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.gateway.Status.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setTime = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool gateway_trusted = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.gateway.Status.prototype.getGatewayTrusted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.gateway.Status.prototype.setGatewayTrusted = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int64 boot_time = 4;
 * @return {number}
 */
proto.gateway.Status.prototype.getBootTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setBootTime = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string ip = 11;
 * @return {!Array<string>}
 */
proto.gateway.Status.prototype.getIpList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/** @param {!Array<string>} value */
proto.gateway.Status.prototype.setIpList = function(value) {
  jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gateway.Status.prototype.addIp = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


proto.gateway.Status.prototype.clearIpList = function() {
  this.setIpList([]);
};


/**
 * optional string platform = 12;
 * @return {string}
 */
proto.gateway.Status.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setPlatform = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string contact_email = 13;
 * @return {string}
 */
proto.gateway.Status.prototype.getContactEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setContactEmail = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string description = 14;
 * @return {string}
 */
proto.gateway.Status.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string frequency_plan = 15;
 * @return {string}
 */
proto.gateway.Status.prototype.getFrequencyPlan = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setFrequencyPlan = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string bridge = 16;
 * @return {string}
 */
proto.gateway.Status.prototype.getBridge = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setBridge = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string router = 17;
 * @return {string}
 */
proto.gateway.Status.prototype.getRouter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setRouter = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional uint32 fpga = 18;
 * @return {number}
 */
proto.gateway.Status.prototype.getFpga = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setFpga = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional uint32 dsp = 19;
 * @return {number}
 */
proto.gateway.Status.prototype.getDsp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setDsp = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional string hal = 20;
 * @return {string}
 */
proto.gateway.Status.prototype.getHal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.gateway.Status.prototype.setHal = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional LocationMetadata location = 21;
 * @return {?proto.gateway.LocationMetadata}
 */
proto.gateway.Status.prototype.getLocation = function() {
  return /** @type{?proto.gateway.LocationMetadata} */ (
    jspb.Message.getWrapperField(this, proto.gateway.LocationMetadata, 21));
};


/** @param {?proto.gateway.LocationMetadata|undefined} value */
proto.gateway.Status.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.gateway.Status.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.Status.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional uint32 rtt = 31;
 * @return {number}
 */
proto.gateway.Status.prototype.getRtt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setRtt = function(value) {
  jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional uint32 rx_in = 41;
 * @return {number}
 */
proto.gateway.Status.prototype.getRxIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 41, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setRxIn = function(value) {
  jspb.Message.setProto3IntField(this, 41, value);
};


/**
 * optional uint32 rx_ok = 42;
 * @return {number}
 */
proto.gateway.Status.prototype.getRxOk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 42, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setRxOk = function(value) {
  jspb.Message.setProto3IntField(this, 42, value);
};


/**
 * optional uint32 tx_in = 43;
 * @return {number}
 */
proto.gateway.Status.prototype.getTxIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 43, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setTxIn = function(value) {
  jspb.Message.setProto3IntField(this, 43, value);
};


/**
 * optional uint32 tx_ok = 44;
 * @return {number}
 */
proto.gateway.Status.prototype.getTxOk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 44, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setTxOk = function(value) {
  jspb.Message.setProto3IntField(this, 44, value);
};


/**
 * optional uint32 lm_ok = 45;
 * @return {number}
 */
proto.gateway.Status.prototype.getLmOk = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 45, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setLmOk = function(value) {
  jspb.Message.setProto3IntField(this, 45, value);
};


/**
 * optional uint32 lm_st = 46;
 * @return {number}
 */
proto.gateway.Status.prototype.getLmSt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 46, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setLmSt = function(value) {
  jspb.Message.setProto3IntField(this, 46, value);
};


/**
 * optional uint32 lm_nw = 47;
 * @return {number}
 */
proto.gateway.Status.prototype.getLmNw = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 47, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setLmNw = function(value) {
  jspb.Message.setProto3IntField(this, 47, value);
};


/**
 * optional uint32 l_pps = 48;
 * @return {number}
 */
proto.gateway.Status.prototype.getLPps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 48, 0));
};


/** @param {number} value */
proto.gateway.Status.prototype.setLPps = function(value) {
  jspb.Message.setProto3IntField(this, 48, value);
};


/**
 * optional OSMetrics os = 51;
 * @return {?proto.gateway.Status.OSMetrics}
 */
proto.gateway.Status.prototype.getOs = function() {
  return /** @type{?proto.gateway.Status.OSMetrics} */ (
    jspb.Message.getWrapperField(this, proto.gateway.Status.OSMetrics, 51));
};


/** @param {?proto.gateway.Status.OSMetrics|undefined} value */
proto.gateway.Status.prototype.setOs = function(value) {
  jspb.Message.setWrapperField(this, 51, value);
};


proto.gateway.Status.prototype.clearOs = function() {
  this.setOs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.gateway.Status.prototype.hasOs = function() {
  return jspb.Message.getField(this, 51) != null;
};


/**
 * repeated string messages = 52;
 * @return {!Array<string>}
 */
proto.gateway.Status.prototype.getMessagesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 52));
};


/** @param {!Array<string>} value */
proto.gateway.Status.prototype.setMessagesList = function(value) {
  jspb.Message.setField(this, 52, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.gateway.Status.prototype.addMessages = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 52, value, opt_index);
};


proto.gateway.Status.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


goog.object.extend(exports, proto.gateway);
