// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/gateway/gateway.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright © 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Gateway_LocationMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Time (unix nanoseconds)
  var time: Int64 = 0

  /// the north–south position (degrees; -90 to +90), where 0 is the equator, north pole is positive, south pole is negative
  var latitude: Float = 0

  /// the east-west position (degrees; -180 to +180), where 0 is the Prime Meridian (Greenwich), east is positive , west is negative
  var longitude: Float = 0

  /// the altitude (meters), where 0 is the mean sea level
  var altitude: Int32 = 0

  /// the accuracy of the location (meters)
  var accuracy: Int32 = 0

  var source: Gateway_LocationMetadata.LocationSource = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum LocationSource: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// The source of the location is not known or not set
    case unknown // = 0

    /// The location is determined by GPS
    case gps // = 1

    /// The location is fixed by configuration
    case config // = 2

    /// The location is set in and updated from a registry
    case registry // = 3

    /// The location is estimated with IP Geolocation
    case ipGeolocation // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .gps
      case 2: self = .config
      case 3: self = .registry
      case 4: self = .ipGeolocation
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .gps: return 1
      case .config: return 2
      case .registry: return 3
      case .ipGeolocation: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Gateway_LocationMetadata.LocationSource: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Gateway_LocationMetadata.LocationSource] = [
    .unknown,
    .gps,
    .config,
    .registry,
    .ipGeolocation,
  ]
}

#endif  // swift(>=4.2)

struct Gateway_RxMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gatewayID: String {
    get {return _storage._gatewayID}
    set {_uniqueStorage()._gatewayID = newValue}
  }

  /// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
  var gatewayTrusted: Bool {
    get {return _storage._gatewayTrusted}
    set {_uniqueStorage()._gatewayTrusted = newValue}
  }

  /// Timestamp (uptime of LoRa module) in microseconds with rollover
  var timestamp: UInt32 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// Time in Unix nanoseconds
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// Encrypted time from the Gateway FPGA
  var encryptedTime: Data {
    get {return _storage._encryptedTime}
    set {_uniqueStorage()._encryptedTime = newValue}
  }

  var rfChain: UInt32 {
    get {return _storage._rfChain}
    set {_uniqueStorage()._rfChain = newValue}
  }

  var channel: UInt32 {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  var antennas: [Gateway_RxMetadata.Antenna] {
    get {return _storage._antennas}
    set {_uniqueStorage()._antennas = newValue}
  }

  /// Frequency in Hz
  var frequency: UInt64 {
    get {return _storage._frequency}
    set {_uniqueStorage()._frequency = newValue}
  }

  /// Received signal strength in dBm
  var rssi: Float {
    get {return _storage._rssi}
    set {_uniqueStorage()._rssi = newValue}
  }

  /// Signal-to-noise-ratio in dB
  var snr: Float {
    get {return _storage._snr}
    set {_uniqueStorage()._snr = newValue}
  }

  var location: Gateway_LocationMetadata {
    get {return _storage._location ?? Gateway_LocationMetadata()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Antenna {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var antenna: UInt32 = 0

    var channel: UInt32 = 0

    /// Received signal power in dBm
    var rssi: Float = 0

    /// Received channel power in dBm
    var channelRssi: Float = 0

    /// Standard deviation of the RSSI
    var rssiStandardDeviation: Float = 0

    /// Frequency offset (Hz)
    var frequencyOffset: Int64 = 0

    /// Signal-to-noise-ratio in dB
    var snr: Float = 0

    /// Encrypted fine timestamp from the Gateway FPGA
    var encryptedTime: Data = SwiftProtobuf.Internal.emptyData

    /// Fine timestamp from the Gateway FPGA (decrypted)
    var fineTime: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Gateway_TxConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp (uptime of LoRa module) in microseconds with rollover
  var timestamp: UInt32 = 0

  var rfChain: UInt32 = 0

  /// Frequency in Hz
  var frequency: UInt64 = 0

  /// Transmit power in dBm
  var power: Int32 = 0

  /// LoRa polarization inversion (basically always true for messages from gateway to node)
  var polarizationInversion: Bool = false

  /// FSK frequency deviation in Hz
  var frequencyDeviation: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// message Status represents a status update from a Gateway.
struct Gateway_Status {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timestamp (uptime of gateway) in microseconds with rollover
  var timestamp: UInt32 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  /// Time in Unix nanoseconds
  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  /// Indicates whether the gateway is trusted. Components that are able to verify gateway trust MUST do so and set this value accordingly
  var gatewayTrusted: Bool {
    get {return _storage._gatewayTrusted}
    set {_uniqueStorage()._gatewayTrusted = newValue}
  }

  /// Boot time in Unix nanoseconds
  var bootTime: Int64 {
    get {return _storage._bootTime}
    set {_uniqueStorage()._bootTime = newValue}
  }

  var ip: [String] {
    get {return _storage._ip}
    set {_uniqueStorage()._ip = newValue}
  }

  var platform: String {
    get {return _storage._platform}
    set {_uniqueStorage()._platform = newValue}
  }

  var contactEmail: String {
    get {return _storage._contactEmail}
    set {_uniqueStorage()._contactEmail = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The gateway's frequency plan: one of EU_863_870, US_902_928, CN_779_787, EU_433, AU_915_928, CN_470_510, AS_923, AS_920_923, AS_923_925, KR_920_923
  var frequencyPlan: String {
    get {return _storage._frequencyPlan}
    set {_uniqueStorage()._frequencyPlan = newValue}
  }

  /// The value of Bridge is set by the Bridge
  var bridge: String {
    get {return _storage._bridge}
    set {_uniqueStorage()._bridge = newValue}
  }

  /// The value of Router is set by the Router
  var router: String {
    get {return _storage._router}
    set {_uniqueStorage()._router = newValue}
  }

  /// Version of Gateway FPGA
  var fpga: UInt32 {
    get {return _storage._fpga}
    set {_uniqueStorage()._fpga = newValue}
  }

  /// Version of Gateway DSP software
  var dsp: UInt32 {
    get {return _storage._dsp}
    set {_uniqueStorage()._dsp = newValue}
  }

  /// Version of gateway driver (in X.X.X format)
  var hal: String {
    get {return _storage._hal}
    set {_uniqueStorage()._hal = newValue}
  }

  var location: Gateway_LocationMetadata {
    get {return _storage._location ?? Gateway_LocationMetadata()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {_uniqueStorage()._location = nil}

  /// Round-trip time to the server in milliseconds
  var rtt: UInt32 {
    get {return _storage._rtt}
    set {_uniqueStorage()._rtt = newValue}
  }

  /// Total number of received uplink packets since boot
  var rxIn: UInt32 {
    get {return _storage._rxIn}
    set {_uniqueStorage()._rxIn = newValue}
  }

  /// Total number of successful (correct) uplink packets since boot
  var rxOk: UInt32 {
    get {return _storage._rxOk}
    set {_uniqueStorage()._rxOk = newValue}
  }

  /// Total number of received downlink packets since boot
  var txIn: UInt32 {
    get {return _storage._txIn}
    set {_uniqueStorage()._txIn = newValue}
  }

  /// Total number of successfully sent downlink packets since boot
  var txOk: UInt32 {
    get {return _storage._txOk}
    set {_uniqueStorage()._txOk = newValue}
  }

  /// Total number of packets received from link testing mote, with CRC OK
  var lmOk: UInt32 {
    get {return _storage._lmOk}
    set {_uniqueStorage()._lmOk = newValue}
  }

  /// Sequence number of the first packet received from the link testing mote
  var lmSt: UInt32 {
    get {return _storage._lmSt}
    set {_uniqueStorage()._lmSt = newValue}
  }

  /// Sequence number of the last packet received from the link testing mote
  var lmNw: UInt32 {
    get {return _storage._lmNw}
    set {_uniqueStorage()._lmNw = newValue}
  }

  /// Number of lost PPS pulses
  var lPps: UInt32 {
    get {return _storage._lPps}
    set {_uniqueStorage()._lPps = newValue}
  }

  var os: Gateway_Status.OSMetrics {
    get {return _storage._os ?? Gateway_Status.OSMetrics()}
    set {_uniqueStorage()._os = newValue}
  }
  /// Returns true if `os` has been explicitly set.
  var hasOs: Bool {return _storage._os != nil}
  /// Clears the value of `os`. Subsequent reads from it will return its default value.
  mutating func clearOs() {_uniqueStorage()._os = nil}

  /// debug or warning messages from the gateway
  var messages: [String] {
    get {return _storage._messages}
    set {_uniqueStorage()._messages = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Additional metrics from the operating system
  struct OSMetrics {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var load1: Float = 0

    var load5: Float = 0

    var load15: Float = 0

    var cpuPercentage: Float = 0

    var memoryPercentage: Float = 0

    var temperature: Float = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "gateway"

extension Gateway_LocationMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocationMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "latitude"),
    3: .same(proto: "longitude"),
    4: .same(proto: "altitude"),
    5: .same(proto: "accuracy"),
    6: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.time)
      case 2: try decoder.decodeSingularFloatField(value: &self.latitude)
      case 3: try decoder.decodeSingularFloatField(value: &self.longitude)
      case 4: try decoder.decodeSingularInt32Field(value: &self.altitude)
      case 5: try decoder.decodeSingularInt32Field(value: &self.accuracy)
      case 6: try decoder.decodeSingularEnumField(value: &self.source)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 1)
    }
    if self.latitude != 0 {
      try visitor.visitSingularFloatField(value: self.latitude, fieldNumber: 2)
    }
    if self.longitude != 0 {
      try visitor.visitSingularFloatField(value: self.longitude, fieldNumber: 3)
    }
    if self.altitude != 0 {
      try visitor.visitSingularInt32Field(value: self.altitude, fieldNumber: 4)
    }
    if self.accuracy != 0 {
      try visitor.visitSingularInt32Field(value: self.accuracy, fieldNumber: 5)
    }
    if self.source != .unknown {
      try visitor.visitSingularEnumField(value: self.source, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_LocationMetadata, rhs: Gateway_LocationMetadata) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.latitude != rhs.latitude {return false}
    if lhs.longitude != rhs.longitude {return false}
    if lhs.altitude != rhs.altitude {return false}
    if lhs.accuracy != rhs.accuracy {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_LocationMetadata.LocationSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "GPS"),
    2: .same(proto: "CONFIG"),
    3: .same(proto: "REGISTRY"),
    4: .same(proto: "IP_GEOLOCATION"),
  ]
}

extension Gateway_RxMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RxMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gateway_id"),
    2: .standard(proto: "gateway_trusted"),
    11: .same(proto: "timestamp"),
    12: .same(proto: "time"),
    13: .standard(proto: "encrypted_time"),
    21: .standard(proto: "rf_chain"),
    22: .same(proto: "channel"),
    30: .same(proto: "antennas"),
    31: .same(proto: "frequency"),
    32: .same(proto: "rssi"),
    33: .same(proto: "snr"),
    41: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _gatewayID: String = String()
    var _gatewayTrusted: Bool = false
    var _timestamp: UInt32 = 0
    var _time: Int64 = 0
    var _encryptedTime: Data = SwiftProtobuf.Internal.emptyData
    var _rfChain: UInt32 = 0
    var _channel: UInt32 = 0
    var _antennas: [Gateway_RxMetadata.Antenna] = []
    var _frequency: UInt64 = 0
    var _rssi: Float = 0
    var _snr: Float = 0
    var _location: Gateway_LocationMetadata? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gatewayID = source._gatewayID
      _gatewayTrusted = source._gatewayTrusted
      _timestamp = source._timestamp
      _time = source._time
      _encryptedTime = source._encryptedTime
      _rfChain = source._rfChain
      _channel = source._channel
      _antennas = source._antennas
      _frequency = source._frequency
      _rssi = source._rssi
      _snr = source._snr
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._gatewayID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._gatewayTrusted)
        case 11: try decoder.decodeSingularUInt32Field(value: &_storage._timestamp)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 13: try decoder.decodeSingularBytesField(value: &_storage._encryptedTime)
        case 21: try decoder.decodeSingularUInt32Field(value: &_storage._rfChain)
        case 22: try decoder.decodeSingularUInt32Field(value: &_storage._channel)
        case 30: try decoder.decodeRepeatedMessageField(value: &_storage._antennas)
        case 31: try decoder.decodeSingularUInt64Field(value: &_storage._frequency)
        case 32: try decoder.decodeSingularFloatField(value: &_storage._rssi)
        case 33: try decoder.decodeSingularFloatField(value: &_storage._snr)
        case 41: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gatewayID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gatewayID, fieldNumber: 1)
      }
      if _storage._gatewayTrusted != false {
        try visitor.visitSingularBoolField(value: _storage._gatewayTrusted, fieldNumber: 2)
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._timestamp, fieldNumber: 11)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 12)
      }
      if !_storage._encryptedTime.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._encryptedTime, fieldNumber: 13)
      }
      if _storage._rfChain != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rfChain, fieldNumber: 21)
      }
      if _storage._channel != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._channel, fieldNumber: 22)
      }
      if !_storage._antennas.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._antennas, fieldNumber: 30)
      }
      if _storage._frequency != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._frequency, fieldNumber: 31)
      }
      if _storage._rssi != 0 {
        try visitor.visitSingularFloatField(value: _storage._rssi, fieldNumber: 32)
      }
      if _storage._snr != 0 {
        try visitor.visitSingularFloatField(value: _storage._snr, fieldNumber: 33)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_RxMetadata, rhs: Gateway_RxMetadata) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gatewayID != rhs_storage._gatewayID {return false}
        if _storage._gatewayTrusted != rhs_storage._gatewayTrusted {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._encryptedTime != rhs_storage._encryptedTime {return false}
        if _storage._rfChain != rhs_storage._rfChain {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._antennas != rhs_storage._antennas {return false}
        if _storage._frequency != rhs_storage._frequency {return false}
        if _storage._rssi != rhs_storage._rssi {return false}
        if _storage._snr != rhs_storage._snr {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_RxMetadata.Antenna: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Gateway_RxMetadata.protoMessageName + ".Antenna"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "antenna"),
    2: .same(proto: "channel"),
    3: .same(proto: "rssi"),
    5: .standard(proto: "channel_rssi"),
    6: .standard(proto: "rssi_standard_deviation"),
    7: .standard(proto: "frequency_offset"),
    4: .same(proto: "snr"),
    10: .standard(proto: "encrypted_time"),
    11: .standard(proto: "fine_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.antenna)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.channel)
      case 3: try decoder.decodeSingularFloatField(value: &self.rssi)
      case 4: try decoder.decodeSingularFloatField(value: &self.snr)
      case 5: try decoder.decodeSingularFloatField(value: &self.channelRssi)
      case 6: try decoder.decodeSingularFloatField(value: &self.rssiStandardDeviation)
      case 7: try decoder.decodeSingularInt64Field(value: &self.frequencyOffset)
      case 10: try decoder.decodeSingularBytesField(value: &self.encryptedTime)
      case 11: try decoder.decodeSingularInt64Field(value: &self.fineTime)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.antenna != 0 {
      try visitor.visitSingularUInt32Field(value: self.antenna, fieldNumber: 1)
    }
    if self.channel != 0 {
      try visitor.visitSingularUInt32Field(value: self.channel, fieldNumber: 2)
    }
    if self.rssi != 0 {
      try visitor.visitSingularFloatField(value: self.rssi, fieldNumber: 3)
    }
    if self.snr != 0 {
      try visitor.visitSingularFloatField(value: self.snr, fieldNumber: 4)
    }
    if self.channelRssi != 0 {
      try visitor.visitSingularFloatField(value: self.channelRssi, fieldNumber: 5)
    }
    if self.rssiStandardDeviation != 0 {
      try visitor.visitSingularFloatField(value: self.rssiStandardDeviation, fieldNumber: 6)
    }
    if self.frequencyOffset != 0 {
      try visitor.visitSingularInt64Field(value: self.frequencyOffset, fieldNumber: 7)
    }
    if !self.encryptedTime.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptedTime, fieldNumber: 10)
    }
    if self.fineTime != 0 {
      try visitor.visitSingularInt64Field(value: self.fineTime, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_RxMetadata.Antenna, rhs: Gateway_RxMetadata.Antenna) -> Bool {
    if lhs.antenna != rhs.antenna {return false}
    if lhs.channel != rhs.channel {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.channelRssi != rhs.channelRssi {return false}
    if lhs.rssiStandardDeviation != rhs.rssiStandardDeviation {return false}
    if lhs.frequencyOffset != rhs.frequencyOffset {return false}
    if lhs.snr != rhs.snr {return false}
    if lhs.encryptedTime != rhs.encryptedTime {return false}
    if lhs.fineTime != rhs.fineTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_TxConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    11: .same(proto: "timestamp"),
    21: .standard(proto: "rf_chain"),
    22: .same(proto: "frequency"),
    23: .same(proto: "power"),
    31: .standard(proto: "polarization_inversion"),
    32: .standard(proto: "frequency_deviation"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 11: try decoder.decodeSingularUInt32Field(value: &self.timestamp)
      case 21: try decoder.decodeSingularUInt32Field(value: &self.rfChain)
      case 22: try decoder.decodeSingularUInt64Field(value: &self.frequency)
      case 23: try decoder.decodeSingularInt32Field(value: &self.power)
      case 31: try decoder.decodeSingularBoolField(value: &self.polarizationInversion)
      case 32: try decoder.decodeSingularUInt32Field(value: &self.frequencyDeviation)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularUInt32Field(value: self.timestamp, fieldNumber: 11)
    }
    if self.rfChain != 0 {
      try visitor.visitSingularUInt32Field(value: self.rfChain, fieldNumber: 21)
    }
    if self.frequency != 0 {
      try visitor.visitSingularUInt64Field(value: self.frequency, fieldNumber: 22)
    }
    if self.power != 0 {
      try visitor.visitSingularInt32Field(value: self.power, fieldNumber: 23)
    }
    if self.polarizationInversion != false {
      try visitor.visitSingularBoolField(value: self.polarizationInversion, fieldNumber: 31)
    }
    if self.frequencyDeviation != 0 {
      try visitor.visitSingularUInt32Field(value: self.frequencyDeviation, fieldNumber: 32)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_TxConfiguration, rhs: Gateway_TxConfiguration) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.rfChain != rhs.rfChain {return false}
    if lhs.frequency != rhs.frequency {return false}
    if lhs.power != rhs.power {return false}
    if lhs.polarizationInversion != rhs.polarizationInversion {return false}
    if lhs.frequencyDeviation != rhs.frequencyDeviation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_Status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Status"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "time"),
    3: .standard(proto: "gateway_trusted"),
    4: .standard(proto: "boot_time"),
    11: .same(proto: "ip"),
    12: .same(proto: "platform"),
    13: .standard(proto: "contact_email"),
    14: .same(proto: "description"),
    15: .standard(proto: "frequency_plan"),
    16: .same(proto: "bridge"),
    17: .same(proto: "router"),
    18: .same(proto: "fpga"),
    19: .same(proto: "dsp"),
    20: .same(proto: "hal"),
    21: .same(proto: "location"),
    31: .same(proto: "rtt"),
    41: .standard(proto: "rx_in"),
    42: .standard(proto: "rx_ok"),
    43: .standard(proto: "tx_in"),
    44: .standard(proto: "tx_ok"),
    45: .standard(proto: "lm_ok"),
    46: .standard(proto: "lm_st"),
    47: .standard(proto: "lm_nw"),
    48: .standard(proto: "l_pps"),
    51: .same(proto: "os"),
    52: .same(proto: "messages"),
  ]

  fileprivate class _StorageClass {
    var _timestamp: UInt32 = 0
    var _time: Int64 = 0
    var _gatewayTrusted: Bool = false
    var _bootTime: Int64 = 0
    var _ip: [String] = []
    var _platform: String = String()
    var _contactEmail: String = String()
    var _description_p: String = String()
    var _frequencyPlan: String = String()
    var _bridge: String = String()
    var _router: String = String()
    var _fpga: UInt32 = 0
    var _dsp: UInt32 = 0
    var _hal: String = String()
    var _location: Gateway_LocationMetadata? = nil
    var _rtt: UInt32 = 0
    var _rxIn: UInt32 = 0
    var _rxOk: UInt32 = 0
    var _txIn: UInt32 = 0
    var _txOk: UInt32 = 0
    var _lmOk: UInt32 = 0
    var _lmSt: UInt32 = 0
    var _lmNw: UInt32 = 0
    var _lPps: UInt32 = 0
    var _os: Gateway_Status.OSMetrics? = nil
    var _messages: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timestamp = source._timestamp
      _time = source._time
      _gatewayTrusted = source._gatewayTrusted
      _bootTime = source._bootTime
      _ip = source._ip
      _platform = source._platform
      _contactEmail = source._contactEmail
      _description_p = source._description_p
      _frequencyPlan = source._frequencyPlan
      _bridge = source._bridge
      _router = source._router
      _fpga = source._fpga
      _dsp = source._dsp
      _hal = source._hal
      _location = source._location
      _rtt = source._rtt
      _rxIn = source._rxIn
      _rxOk = source._rxOk
      _txIn = source._txIn
      _txOk = source._txOk
      _lmOk = source._lmOk
      _lmSt = source._lmSt
      _lmNw = source._lmNw
      _lPps = source._lPps
      _os = source._os
      _messages = source._messages
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._timestamp)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._gatewayTrusted)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._bootTime)
        case 11: try decoder.decodeRepeatedStringField(value: &_storage._ip)
        case 12: try decoder.decodeSingularStringField(value: &_storage._platform)
        case 13: try decoder.decodeSingularStringField(value: &_storage._contactEmail)
        case 14: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 15: try decoder.decodeSingularStringField(value: &_storage._frequencyPlan)
        case 16: try decoder.decodeSingularStringField(value: &_storage._bridge)
        case 17: try decoder.decodeSingularStringField(value: &_storage._router)
        case 18: try decoder.decodeSingularUInt32Field(value: &_storage._fpga)
        case 19: try decoder.decodeSingularUInt32Field(value: &_storage._dsp)
        case 20: try decoder.decodeSingularStringField(value: &_storage._hal)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 31: try decoder.decodeSingularUInt32Field(value: &_storage._rtt)
        case 41: try decoder.decodeSingularUInt32Field(value: &_storage._rxIn)
        case 42: try decoder.decodeSingularUInt32Field(value: &_storage._rxOk)
        case 43: try decoder.decodeSingularUInt32Field(value: &_storage._txIn)
        case 44: try decoder.decodeSingularUInt32Field(value: &_storage._txOk)
        case 45: try decoder.decodeSingularUInt32Field(value: &_storage._lmOk)
        case 46: try decoder.decodeSingularUInt32Field(value: &_storage._lmSt)
        case 47: try decoder.decodeSingularUInt32Field(value: &_storage._lmNw)
        case 48: try decoder.decodeSingularUInt32Field(value: &_storage._lPps)
        case 51: try decoder.decodeSingularMessageField(value: &_storage._os)
        case 52: try decoder.decodeRepeatedStringField(value: &_storage._messages)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timestamp != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._timestamp, fieldNumber: 1)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 2)
      }
      if _storage._gatewayTrusted != false {
        try visitor.visitSingularBoolField(value: _storage._gatewayTrusted, fieldNumber: 3)
      }
      if _storage._bootTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._bootTime, fieldNumber: 4)
      }
      if !_storage._ip.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ip, fieldNumber: 11)
      }
      if !_storage._platform.isEmpty {
        try visitor.visitSingularStringField(value: _storage._platform, fieldNumber: 12)
      }
      if !_storage._contactEmail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._contactEmail, fieldNumber: 13)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 14)
      }
      if !_storage._frequencyPlan.isEmpty {
        try visitor.visitSingularStringField(value: _storage._frequencyPlan, fieldNumber: 15)
      }
      if !_storage._bridge.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bridge, fieldNumber: 16)
      }
      if !_storage._router.isEmpty {
        try visitor.visitSingularStringField(value: _storage._router, fieldNumber: 17)
      }
      if _storage._fpga != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._fpga, fieldNumber: 18)
      }
      if _storage._dsp != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._dsp, fieldNumber: 19)
      }
      if !_storage._hal.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hal, fieldNumber: 20)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if _storage._rtt != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rtt, fieldNumber: 31)
      }
      if _storage._rxIn != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rxIn, fieldNumber: 41)
      }
      if _storage._rxOk != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rxOk, fieldNumber: 42)
      }
      if _storage._txIn != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._txIn, fieldNumber: 43)
      }
      if _storage._txOk != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._txOk, fieldNumber: 44)
      }
      if _storage._lmOk != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lmOk, fieldNumber: 45)
      }
      if _storage._lmSt != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lmSt, fieldNumber: 46)
      }
      if _storage._lmNw != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lmNw, fieldNumber: 47)
      }
      if _storage._lPps != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._lPps, fieldNumber: 48)
      }
      if let v = _storage._os {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }
      if !_storage._messages.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._messages, fieldNumber: 52)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_Status, rhs: Gateway_Status) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._gatewayTrusted != rhs_storage._gatewayTrusted {return false}
        if _storage._bootTime != rhs_storage._bootTime {return false}
        if _storage._ip != rhs_storage._ip {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._contactEmail != rhs_storage._contactEmail {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._frequencyPlan != rhs_storage._frequencyPlan {return false}
        if _storage._bridge != rhs_storage._bridge {return false}
        if _storage._router != rhs_storage._router {return false}
        if _storage._fpga != rhs_storage._fpga {return false}
        if _storage._dsp != rhs_storage._dsp {return false}
        if _storage._hal != rhs_storage._hal {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._rtt != rhs_storage._rtt {return false}
        if _storage._rxIn != rhs_storage._rxIn {return false}
        if _storage._rxOk != rhs_storage._rxOk {return false}
        if _storage._txIn != rhs_storage._txIn {return false}
        if _storage._txOk != rhs_storage._txOk {return false}
        if _storage._lmOk != rhs_storage._lmOk {return false}
        if _storage._lmSt != rhs_storage._lmSt {return false}
        if _storage._lmNw != rhs_storage._lmNw {return false}
        if _storage._lPps != rhs_storage._lPps {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._messages != rhs_storage._messages {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Gateway_Status.OSMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Gateway_Status.protoMessageName + ".OSMetrics"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "load_1"),
    2: .standard(proto: "load_5"),
    3: .standard(proto: "load_15"),
    11: .standard(proto: "cpu_percentage"),
    21: .standard(proto: "memory_percentage"),
    31: .same(proto: "temperature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.load1)
      case 2: try decoder.decodeSingularFloatField(value: &self.load5)
      case 3: try decoder.decodeSingularFloatField(value: &self.load15)
      case 11: try decoder.decodeSingularFloatField(value: &self.cpuPercentage)
      case 21: try decoder.decodeSingularFloatField(value: &self.memoryPercentage)
      case 31: try decoder.decodeSingularFloatField(value: &self.temperature)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.load1 != 0 {
      try visitor.visitSingularFloatField(value: self.load1, fieldNumber: 1)
    }
    if self.load5 != 0 {
      try visitor.visitSingularFloatField(value: self.load5, fieldNumber: 2)
    }
    if self.load15 != 0 {
      try visitor.visitSingularFloatField(value: self.load15, fieldNumber: 3)
    }
    if self.cpuPercentage != 0 {
      try visitor.visitSingularFloatField(value: self.cpuPercentage, fieldNumber: 11)
    }
    if self.memoryPercentage != 0 {
      try visitor.visitSingularFloatField(value: self.memoryPercentage, fieldNumber: 21)
    }
    if self.temperature != 0 {
      try visitor.visitSingularFloatField(value: self.temperature, fieldNumber: 31)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Gateway_Status.OSMetrics, rhs: Gateway_Status.OSMetrics) -> Bool {
    if lhs.load1 != rhs.load1 {return false}
    if lhs.load5 != rhs.load5 {return false}
    if lhs.load15 != rhs.load15 {return false}
    if lhs.cpuPercentage != rhs.cpuPercentage {return false}
    if lhs.memoryPercentage != rhs.memoryPercentage {return false}
    if lhs.temperature != rhs.temperature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
