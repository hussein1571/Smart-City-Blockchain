//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/monitor/monitor.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Monitor_MonitorRouterStatusCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Router_Status, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Router_Status, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorRouterStatusCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Router_Status, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorRouterStatusCallBase: ClientCallClientStreamingBase<Router_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorRouterStatusCall {
  override class var method: String { return "/monitor.Monitor/RouterStatus" }
}

internal protocol Monitor_MonitorGatewayStatusCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Gateway_Status, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Gateway_Status, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorGatewayStatusCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Gateway_Status, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayStatusCallBase: ClientCallClientStreamingBase<Gateway_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayStatusCall {
  override class var method: String { return "/monitor.Monitor/GatewayStatus" }
}

internal protocol Monitor_MonitorGatewayUplinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Router_UplinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Router_UplinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorGatewayUplinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Router_UplinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayUplinkCallBase: ClientCallClientStreamingBase<Router_UplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayUplinkCall {
  override class var method: String { return "/monitor.Monitor/GatewayUplink" }
}

internal protocol Monitor_MonitorGatewayDownlinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Router_DownlinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Router_DownlinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorGatewayDownlinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Router_DownlinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayDownlinkCallBase: ClientCallClientStreamingBase<Router_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayDownlinkCall {
  override class var method: String { return "/monitor.Monitor/GatewayDownlink" }
}

internal protocol Monitor_MonitorBrokerStatusCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Broker_Status, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Broker_Status, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorBrokerStatusCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Broker_Status, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerStatusCallBase: ClientCallClientStreamingBase<Broker_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerStatusCall {
  override class var method: String { return "/monitor.Monitor/BrokerStatus" }
}

internal protocol Monitor_MonitorBrokerUplinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Broker_DeduplicatedUplinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Broker_DeduplicatedUplinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorBrokerUplinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Broker_DeduplicatedUplinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerUplinkCallBase: ClientCallClientStreamingBase<Broker_DeduplicatedUplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerUplinkCall {
  override class var method: String { return "/monitor.Monitor/BrokerUplink" }
}

internal protocol Monitor_MonitorBrokerDownlinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Broker_DownlinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Broker_DownlinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorBrokerDownlinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Broker_DownlinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerDownlinkCallBase: ClientCallClientStreamingBase<Broker_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerDownlinkCall {
  override class var method: String { return "/monitor.Monitor/BrokerDownlink" }
}

internal protocol Monitor_MonitorHandlerStatusCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Handler_Status, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Handler_Status, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorHandlerStatusCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Handler_Status, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerStatusCallBase: ClientCallClientStreamingBase<Handler_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerStatusCall {
  override class var method: String { return "/monitor.Monitor/HandlerStatus" }
}

internal protocol Monitor_MonitorHandlerUplinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Broker_DeduplicatedUplinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Broker_DeduplicatedUplinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorHandlerUplinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Broker_DeduplicatedUplinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerUplinkCallBase: ClientCallClientStreamingBase<Broker_DeduplicatedUplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerUplinkCall {
  override class var method: String { return "/monitor.Monitor/HandlerUplink" }
}

internal protocol Monitor_MonitorHandlerDownlinkCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Broker_DownlinkMessage, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Broker_DownlinkMessage, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorHandlerDownlinkCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Broker_DownlinkMessage, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerDownlinkCallBase: ClientCallClientStreamingBase<Broker_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerDownlinkCall {
  override class var method: String { return "/monitor.Monitor/HandlerDownlink" }
}

internal protocol Monitor_MonitorNetworkServerStatusCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Networkserver_Status, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Networkserver_Status, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

internal extension Monitor_MonitorNetworkServerStatusCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Networkserver_Status, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Monitor_MonitorNetworkServerStatusCallBase: ClientCallClientStreamingBase<Networkserver_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorNetworkServerStatusCall {
  override class var method: String { return "/monitor.Monitor/NetworkServerStatus" }
}


/// Instantiate Monitor_MonitorServiceClient, then call methods of this protocol to make API calls.
internal protocol Monitor_MonitorService: ServiceClient {
  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func routerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorRouterStatusCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func gatewayStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayStatusCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func gatewayUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayUplinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func gatewayDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayDownlinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func brokerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerStatusCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func brokerUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerUplinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func brokerDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerDownlinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func handlerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerStatusCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func handlerUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerUplinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func handlerDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerDownlinkCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func networkServerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorNetworkServerStatusCall

}

internal final class Monitor_MonitorServiceClient: ServiceClientBase, Monitor_MonitorService {
  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func routerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorRouterStatusCall {
    return try Monitor_MonitorRouterStatusCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func gatewayStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayStatusCall {
    return try Monitor_MonitorGatewayStatusCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func gatewayUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayUplinkCall {
    return try Monitor_MonitorGatewayUplinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func gatewayDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorGatewayDownlinkCall {
    return try Monitor_MonitorGatewayDownlinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func brokerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerStatusCall {
    return try Monitor_MonitorBrokerStatusCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func brokerUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerUplinkCall {
    return try Monitor_MonitorBrokerUplinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func brokerDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorBrokerDownlinkCall {
    return try Monitor_MonitorBrokerDownlinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func handlerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerStatusCall {
    return try Monitor_MonitorHandlerStatusCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func handlerUplink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerUplinkCall {
    return try Monitor_MonitorHandlerUplinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func handlerDownlink(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorHandlerDownlinkCall {
    return try Monitor_MonitorHandlerDownlinkCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func networkServerStatus(completion: ((CallResult) -> Void)?) throws -> Monitor_MonitorNetworkServerStatusCall {
    return try Monitor_MonitorNetworkServerStatusCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Monitor_MonitorProvider {
  func routerStatus(session: Monitor_MonitorRouterStatusSession) throws
  func gatewayStatus(session: Monitor_MonitorGatewayStatusSession) throws
  func gatewayUplink(session: Monitor_MonitorGatewayUplinkSession) throws
  func gatewayDownlink(session: Monitor_MonitorGatewayDownlinkSession) throws
  func brokerStatus(session: Monitor_MonitorBrokerStatusSession) throws
  func brokerUplink(session: Monitor_MonitorBrokerUplinkSession) throws
  func brokerDownlink(session: Monitor_MonitorBrokerDownlinkSession) throws
  func handlerStatus(session: Monitor_MonitorHandlerStatusSession) throws
  func handlerUplink(session: Monitor_MonitorHandlerUplinkSession) throws
  func handlerDownlink(session: Monitor_MonitorHandlerDownlinkSession) throws
  func networkServerStatus(session: Monitor_MonitorNetworkServerStatusSession) throws
}

internal protocol Monitor_MonitorRouterStatusSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Router_Status?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Router_Status?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorRouterStatusSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Router_Status? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorRouterStatusSessionBase: ServerSessionClientStreamingBase<Router_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorRouterStatusSession {}

internal protocol Monitor_MonitorGatewayStatusSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Gateway_Status?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Gateway_Status?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorGatewayStatusSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Gateway_Status? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayStatusSessionBase: ServerSessionClientStreamingBase<Gateway_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayStatusSession {}

internal protocol Monitor_MonitorGatewayUplinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Router_UplinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Router_UplinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorGatewayUplinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Router_UplinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayUplinkSessionBase: ServerSessionClientStreamingBase<Router_UplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayUplinkSession {}

internal protocol Monitor_MonitorGatewayDownlinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Router_DownlinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Router_DownlinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorGatewayDownlinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Router_DownlinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorGatewayDownlinkSessionBase: ServerSessionClientStreamingBase<Router_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorGatewayDownlinkSession {}

internal protocol Monitor_MonitorBrokerStatusSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Broker_Status?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Broker_Status?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorBrokerStatusSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Broker_Status? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerStatusSessionBase: ServerSessionClientStreamingBase<Broker_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerStatusSession {}

internal protocol Monitor_MonitorBrokerUplinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Broker_DeduplicatedUplinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Broker_DeduplicatedUplinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorBrokerUplinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Broker_DeduplicatedUplinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerUplinkSessionBase: ServerSessionClientStreamingBase<Broker_DeduplicatedUplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerUplinkSession {}

internal protocol Monitor_MonitorBrokerDownlinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Broker_DownlinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Broker_DownlinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorBrokerDownlinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Broker_DownlinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorBrokerDownlinkSessionBase: ServerSessionClientStreamingBase<Broker_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorBrokerDownlinkSession {}

internal protocol Monitor_MonitorHandlerStatusSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Handler_Status?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Handler_Status?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorHandlerStatusSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Handler_Status? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerStatusSessionBase: ServerSessionClientStreamingBase<Handler_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerStatusSession {}

internal protocol Monitor_MonitorHandlerUplinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Broker_DeduplicatedUplinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Broker_DeduplicatedUplinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorHandlerUplinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Broker_DeduplicatedUplinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerUplinkSessionBase: ServerSessionClientStreamingBase<Broker_DeduplicatedUplinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerUplinkSession {}

internal protocol Monitor_MonitorHandlerDownlinkSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Broker_DownlinkMessage?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Broker_DownlinkMessage?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorHandlerDownlinkSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Broker_DownlinkMessage? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorHandlerDownlinkSessionBase: ServerSessionClientStreamingBase<Broker_DownlinkMessage, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorHandlerDownlinkSession {}

internal protocol Monitor_MonitorNetworkServerStatusSession: ServerSessionClientStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Networkserver_Status?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Networkserver_Status?>) -> Void) throws

  /// You MUST call one of these two methods once you are done processing the request.
  /// Close the connection and send a single result. Non-blocking.
  func sendAndClose(response: SwiftProtobuf.Google_Protobuf_Empty, status: ServerStatus, completion: (() -> Void)?) throws
  /// Close the connection and send an error. Non-blocking.
  /// Use this method if you encountered an error that makes it impossible to send a response.
  /// Accordingly, it does not make sense to call this method with a status of `.ok`.
  func sendErrorAndClose(status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Monitor_MonitorNetworkServerStatusSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Networkserver_Status? { return try self._receive(timeout: timeout) }
}

fileprivate final class Monitor_MonitorNetworkServerStatusSessionBase: ServerSessionClientStreamingBase<Networkserver_Status, SwiftProtobuf.Google_Protobuf_Empty>, Monitor_MonitorNetworkServerStatusSession {}


/// Main server for generated service
internal final class Monitor_MonitorServer: ServiceServer {
  private let provider: Monitor_MonitorProvider

  internal init(address: String, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(address: address)
  }

  internal init?(address: String, certificateURL: URL, keyURL: URL, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(address: address, certificateURL: certificateURL, keyURL: keyURL)
  }

  internal init?(address: String, certificateString: String, keyString: String, provider: Monitor_MonitorProvider) {
    self.provider = provider
    super.init(address: address, certificateString: certificateString, keyString: keyString)
  }

  /// Start the server.
  internal override func handleMethod(_ method: String, handler: Handler, queue: DispatchQueue) throws -> Bool {
    let provider = self.provider
    switch method {
    case "/monitor.Monitor/RouterStatus":
      try Monitor_MonitorRouterStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.routerStatus(session: $0 as! Monitor_MonitorRouterStatusSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/GatewayStatus":
      try Monitor_MonitorGatewayStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.gatewayStatus(session: $0 as! Monitor_MonitorGatewayStatusSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/GatewayUplink":
      try Monitor_MonitorGatewayUplinkSessionBase(
        handler: handler,
        providerBlock: { try provider.gatewayUplink(session: $0 as! Monitor_MonitorGatewayUplinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/GatewayDownlink":
      try Monitor_MonitorGatewayDownlinkSessionBase(
        handler: handler,
        providerBlock: { try provider.gatewayDownlink(session: $0 as! Monitor_MonitorGatewayDownlinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/BrokerStatus":
      try Monitor_MonitorBrokerStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.brokerStatus(session: $0 as! Monitor_MonitorBrokerStatusSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/BrokerUplink":
      try Monitor_MonitorBrokerUplinkSessionBase(
        handler: handler,
        providerBlock: { try provider.brokerUplink(session: $0 as! Monitor_MonitorBrokerUplinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/BrokerDownlink":
      try Monitor_MonitorBrokerDownlinkSessionBase(
        handler: handler,
        providerBlock: { try provider.brokerDownlink(session: $0 as! Monitor_MonitorBrokerDownlinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/HandlerStatus":
      try Monitor_MonitorHandlerStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.handlerStatus(session: $0 as! Monitor_MonitorHandlerStatusSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/HandlerUplink":
      try Monitor_MonitorHandlerUplinkSessionBase(
        handler: handler,
        providerBlock: { try provider.handlerUplink(session: $0 as! Monitor_MonitorHandlerUplinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/HandlerDownlink":
      try Monitor_MonitorHandlerDownlinkSessionBase(
        handler: handler,
        providerBlock: { try provider.handlerDownlink(session: $0 as! Monitor_MonitorHandlerDownlinkSessionBase) })
          .run(queue: queue)
      return true
    case "/monitor.Monitor/NetworkServerStatus":
      try Monitor_MonitorNetworkServerStatusSessionBase(
        handler: handler,
        providerBlock: { try provider.networkServerStatus(session: $0 as! Monitor_MonitorNetworkServerStatusSessionBase) })
          .run(queue: queue)
      return true
    default:
      return false
    }
  }
}

