/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');


var ttn_api_pb = require('../api_pb.js');
var ttn_broker_broker_pb = require('../broker/broker_pb.js');
var ttn_protocol_protocol_pb = require('../protocol/protocol_pb.js');
var ttn_protocol_lorawan_device_pb = require('../protocol/lorawan/device_pb.js');
var ttn_trace_trace_pb = require('../trace/trace_pb.js');
goog.exportSymbol('proto.handler.Application', null, global);
goog.exportSymbol('proto.handler.ApplicationIdentifier', null, global);
goog.exportSymbol('proto.handler.Device', null, global);
goog.exportSymbol('proto.handler.DeviceActivationResponse', null, global);
goog.exportSymbol('proto.handler.DeviceIdentifier', null, global);
goog.exportSymbol('proto.handler.DeviceList', null, global);
goog.exportSymbol('proto.handler.DryDownlinkMessage', null, global);
goog.exportSymbol('proto.handler.DryDownlinkResult', null, global);
goog.exportSymbol('proto.handler.DryUplinkMessage', null, global);
goog.exportSymbol('proto.handler.DryUplinkResult', null, global);
goog.exportSymbol('proto.handler.LogEntry', null, global);
goog.exportSymbol('proto.handler.SimulatedUplinkMessage', null, global);
goog.exportSymbol('proto.handler.Status', null, global);
goog.exportSymbol('proto.handler.StatusRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DeviceActivationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.DeviceActivationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DeviceActivationResponse.displayName = 'proto.handler.DeviceActivationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DeviceActivationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DeviceActivationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DeviceActivationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceActivationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    message: (f = msg.getMessage()) && ttn_protocol_protocol_pb.Message.toObject(includeInstance, f),
    downlinkOption: (f = msg.getDownlinkOption()) && ttn_broker_broker_pb.DownlinkOption.toObject(includeInstance, f),
    activationMetadata: (f = msg.getActivationMetadata()) && ttn_protocol_protocol_pb.ActivationMetadata.toObject(includeInstance, f),
    trace: (f = msg.getTrace()) && ttn_trace_trace_pb.Trace.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DeviceActivationResponse}
 */
proto.handler.DeviceActivationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DeviceActivationResponse;
  return proto.handler.DeviceActivationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DeviceActivationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DeviceActivationResponse}
 */
proto.handler.DeviceActivationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new ttn_protocol_protocol_pb.Message;
      reader.readMessage(value,ttn_protocol_protocol_pb.Message.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 11:
      var value = new ttn_broker_broker_pb.DownlinkOption;
      reader.readMessage(value,ttn_broker_broker_pb.DownlinkOption.deserializeBinaryFromReader);
      msg.setDownlinkOption(value);
      break;
    case 23:
      var value = new ttn_protocol_protocol_pb.ActivationMetadata;
      reader.readMessage(value,ttn_protocol_protocol_pb.ActivationMetadata.deserializeBinaryFromReader);
      msg.setActivationMetadata(value);
      break;
    case 31:
      var value = new ttn_trace_trace_pb.Trace;
      reader.readMessage(value,ttn_trace_trace_pb.Trace.deserializeBinaryFromReader);
      msg.setTrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DeviceActivationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DeviceActivationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DeviceActivationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceActivationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ttn_protocol_protocol_pb.Message.serializeBinaryToWriter
    );
  }
  f = message.getDownlinkOption();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      ttn_broker_broker_pb.DownlinkOption.serializeBinaryToWriter
    );
  }
  f = message.getActivationMetadata();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      ttn_protocol_protocol_pb.ActivationMetadata.serializeBinaryToWriter
    );
  }
  f = message.getTrace();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      ttn_trace_trace_pb.Trace.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handler.DeviceActivationResponse.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.DeviceActivationResponse.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.DeviceActivationResponse.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.DeviceActivationResponse.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional protocol.Message message = 2;
 * @return {?proto.protocol.Message}
 */
proto.handler.DeviceActivationResponse.prototype.getMessage = function() {
  return /** @type{?proto.protocol.Message} */ (
    jspb.Message.getWrapperField(this, ttn_protocol_protocol_pb.Message, 2));
};


/** @param {?proto.protocol.Message|undefined} value */
proto.handler.DeviceActivationResponse.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.handler.DeviceActivationResponse.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DeviceActivationResponse.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional broker.DownlinkOption downlink_option = 11;
 * @return {?proto.broker.DownlinkOption}
 */
proto.handler.DeviceActivationResponse.prototype.getDownlinkOption = function() {
  return /** @type{?proto.broker.DownlinkOption} */ (
    jspb.Message.getWrapperField(this, ttn_broker_broker_pb.DownlinkOption, 11));
};


/** @param {?proto.broker.DownlinkOption|undefined} value */
proto.handler.DeviceActivationResponse.prototype.setDownlinkOption = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.handler.DeviceActivationResponse.prototype.clearDownlinkOption = function() {
  this.setDownlinkOption(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DeviceActivationResponse.prototype.hasDownlinkOption = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional protocol.ActivationMetadata activation_metadata = 23;
 * @return {?proto.protocol.ActivationMetadata}
 */
proto.handler.DeviceActivationResponse.prototype.getActivationMetadata = function() {
  return /** @type{?proto.protocol.ActivationMetadata} */ (
    jspb.Message.getWrapperField(this, ttn_protocol_protocol_pb.ActivationMetadata, 23));
};


/** @param {?proto.protocol.ActivationMetadata|undefined} value */
proto.handler.DeviceActivationResponse.prototype.setActivationMetadata = function(value) {
  jspb.Message.setWrapperField(this, 23, value);
};


proto.handler.DeviceActivationResponse.prototype.clearActivationMetadata = function() {
  this.setActivationMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DeviceActivationResponse.prototype.hasActivationMetadata = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional trace.Trace trace = 31;
 * @return {?proto.trace.Trace}
 */
proto.handler.DeviceActivationResponse.prototype.getTrace = function() {
  return /** @type{?proto.trace.Trace} */ (
    jspb.Message.getWrapperField(this, ttn_trace_trace_pb.Trace, 31));
};


/** @param {?proto.trace.Trace|undefined} value */
proto.handler.DeviceActivationResponse.prototype.setTrace = function(value) {
  jspb.Message.setWrapperField(this, 31, value);
};


proto.handler.DeviceActivationResponse.prototype.clearTrace = function() {
  this.setTrace(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DeviceActivationResponse.prototype.hasTrace = function() {
  return jspb.Message.getField(this, 31) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.StatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.StatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.StatusRequest.displayName = 'proto.handler.StatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.StatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.StatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.StatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.StatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.StatusRequest}
 */
proto.handler.StatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.StatusRequest;
  return proto.handler.StatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.StatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.StatusRequest}
 */
proto.handler.StatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.StatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.StatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.StatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.StatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.Status.displayName = 'proto.handler.Status';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    system: (f = msg.getSystem()) && ttn_api_pb.SystemStats.toObject(includeInstance, f),
    component: (f = msg.getComponent()) && ttn_api_pb.ComponentStats.toObject(includeInstance, f),
    uplink: (f = msg.getUplink()) && ttn_api_pb.Rates.toObject(includeInstance, f),
    downlink: (f = msg.getDownlink()) && ttn_api_pb.Rates.toObject(includeInstance, f),
    activations: (f = msg.getActivations()) && ttn_api_pb.Rates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.Status}
 */
proto.handler.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.Status;
  return proto.handler.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.Status}
 */
proto.handler.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ttn_api_pb.SystemStats;
      reader.readMessage(value,ttn_api_pb.SystemStats.deserializeBinaryFromReader);
      msg.setSystem(value);
      break;
    case 2:
      var value = new ttn_api_pb.ComponentStats;
      reader.readMessage(value,ttn_api_pb.ComponentStats.deserializeBinaryFromReader);
      msg.setComponent(value);
      break;
    case 11:
      var value = new ttn_api_pb.Rates;
      reader.readMessage(value,ttn_api_pb.Rates.deserializeBinaryFromReader);
      msg.setUplink(value);
      break;
    case 12:
      var value = new ttn_api_pb.Rates;
      reader.readMessage(value,ttn_api_pb.Rates.deserializeBinaryFromReader);
      msg.setDownlink(value);
      break;
    case 13:
      var value = new ttn_api_pb.Rates;
      reader.readMessage(value,ttn_api_pb.Rates.deserializeBinaryFromReader);
      msg.setActivations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSystem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      ttn_api_pb.SystemStats.serializeBinaryToWriter
    );
  }
  f = message.getComponent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      ttn_api_pb.ComponentStats.serializeBinaryToWriter
    );
  }
  f = message.getUplink();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      ttn_api_pb.Rates.serializeBinaryToWriter
    );
  }
  f = message.getDownlink();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      ttn_api_pb.Rates.serializeBinaryToWriter
    );
  }
  f = message.getActivations();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      ttn_api_pb.Rates.serializeBinaryToWriter
    );
  }
};


/**
 * optional api.SystemStats system = 1;
 * @return {?proto.api.SystemStats}
 */
proto.handler.Status.prototype.getSystem = function() {
  return /** @type{?proto.api.SystemStats} */ (
    jspb.Message.getWrapperField(this, ttn_api_pb.SystemStats, 1));
};


/** @param {?proto.api.SystemStats|undefined} value */
proto.handler.Status.prototype.setSystem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.handler.Status.prototype.clearSystem = function() {
  this.setSystem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Status.prototype.hasSystem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional api.ComponentStats component = 2;
 * @return {?proto.api.ComponentStats}
 */
proto.handler.Status.prototype.getComponent = function() {
  return /** @type{?proto.api.ComponentStats} */ (
    jspb.Message.getWrapperField(this, ttn_api_pb.ComponentStats, 2));
};


/** @param {?proto.api.ComponentStats|undefined} value */
proto.handler.Status.prototype.setComponent = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.handler.Status.prototype.clearComponent = function() {
  this.setComponent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Status.prototype.hasComponent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional api.Rates uplink = 11;
 * @return {?proto.api.Rates}
 */
proto.handler.Status.prototype.getUplink = function() {
  return /** @type{?proto.api.Rates} */ (
    jspb.Message.getWrapperField(this, ttn_api_pb.Rates, 11));
};


/** @param {?proto.api.Rates|undefined} value */
proto.handler.Status.prototype.setUplink = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.handler.Status.prototype.clearUplink = function() {
  this.setUplink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Status.prototype.hasUplink = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional api.Rates downlink = 12;
 * @return {?proto.api.Rates}
 */
proto.handler.Status.prototype.getDownlink = function() {
  return /** @type{?proto.api.Rates} */ (
    jspb.Message.getWrapperField(this, ttn_api_pb.Rates, 12));
};


/** @param {?proto.api.Rates|undefined} value */
proto.handler.Status.prototype.setDownlink = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.handler.Status.prototype.clearDownlink = function() {
  this.setDownlink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Status.prototype.hasDownlink = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional api.Rates activations = 13;
 * @return {?proto.api.Rates}
 */
proto.handler.Status.prototype.getActivations = function() {
  return /** @type{?proto.api.Rates} */ (
    jspb.Message.getWrapperField(this, ttn_api_pb.Rates, 13));
};


/** @param {?proto.api.Rates|undefined} value */
proto.handler.Status.prototype.setActivations = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.handler.Status.prototype.clearActivations = function() {
  this.setActivations(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Status.prototype.hasActivations = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.ApplicationIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.ApplicationIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.ApplicationIdentifier.displayName = 'proto.handler.ApplicationIdentifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.ApplicationIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.ApplicationIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.ApplicationIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.ApplicationIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.ApplicationIdentifier}
 */
proto.handler.ApplicationIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.ApplicationIdentifier;
  return proto.handler.ApplicationIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.ApplicationIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.ApplicationIdentifier}
 */
proto.handler.ApplicationIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.ApplicationIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.ApplicationIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.ApplicationIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.ApplicationIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.handler.ApplicationIdentifier.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.ApplicationIdentifier.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.Application = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.Application, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.Application.displayName = 'proto.handler.Application';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.Application.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.Application.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.Application} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Application.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payloadFormat: jspb.Message.getFieldWithDefault(msg, 6, ""),
    decoder: jspb.Message.getFieldWithDefault(msg, 2, ""),
    converter: jspb.Message.getFieldWithDefault(msg, 3, ""),
    validator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    encoder: jspb.Message.getFieldWithDefault(msg, 5, ""),
    registerOnJoinAccessKey: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.Application}
 */
proto.handler.Application.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.Application;
  return proto.handler.Application.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.Application} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.Application}
 */
proto.handler.Application.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayloadFormat(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecoder(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConverter(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncoder(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegisterOnJoinAccessKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.Application.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.Application.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.Application} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Application.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayloadFormat();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDecoder();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConverter();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValidator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEncoder();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRegisterOnJoinAccessKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.handler.Application.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payload_format = 6;
 * @return {string}
 */
proto.handler.Application.prototype.getPayloadFormat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setPayloadFormat = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string decoder = 2;
 * @return {string}
 */
proto.handler.Application.prototype.getDecoder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setDecoder = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string converter = 3;
 * @return {string}
 */
proto.handler.Application.prototype.getConverter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setConverter = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string validator = 4;
 * @return {string}
 */
proto.handler.Application.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setValidator = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string encoder = 5;
 * @return {string}
 */
proto.handler.Application.prototype.getEncoder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setEncoder = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string register_on_join_access_key = 7;
 * @return {string}
 */
proto.handler.Application.prototype.getRegisterOnJoinAccessKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.handler.Application.prototype.setRegisterOnJoinAccessKey = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DeviceIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.DeviceIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DeviceIdentifier.displayName = 'proto.handler.DeviceIdentifier';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DeviceIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DeviceIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DeviceIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DeviceIdentifier}
 */
proto.handler.DeviceIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DeviceIdentifier;
  return proto.handler.DeviceIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DeviceIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DeviceIdentifier}
 */
proto.handler.DeviceIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DeviceIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DeviceIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DeviceIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.handler.DeviceIdentifier.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.DeviceIdentifier.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dev_id = 2;
 * @return {string}
 */
proto.handler.DeviceIdentifier.prototype.getDevId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.DeviceIdentifier.prototype.setDevId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.Device = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.handler.Device.oneofGroups_);
};
goog.inherits(proto.handler.Device, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.Device.displayName = 'proto.handler.Device';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.handler.Device.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.handler.Device.DeviceCase = {
  DEVICE_NOT_SET: 0,
  LORAWAN_DEVICE: 3
};

/**
 * @return {proto.handler.Device.DeviceCase}
 */
proto.handler.Device.prototype.getDeviceCase = function() {
  return /** @type {proto.handler.Device.DeviceCase} */(jspb.Message.computeOneofCase(this, proto.handler.Device.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.Device.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.Device.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.Device} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Device.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lorawanDevice: (f = msg.getLorawanDevice()) && ttn_protocol_lorawan_device_pb.Device.toObject(includeInstance, f),
    latitude: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    altitude: jspb.Message.getFieldWithDefault(msg, 12, 0),
    attributesMap: (f = msg.getAttributesMap()) ? f.toObject(includeInstance, undefined) : [],
    description: jspb.Message.getFieldWithDefault(msg, 20, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.Device}
 */
proto.handler.Device.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.Device;
  return proto.handler.Device.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.Device} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.Device}
 */
proto.handler.Device.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevId(value);
      break;
    case 3:
      var value = new ttn_protocol_lorawan_device_pb.Device;
      reader.readMessage(value,ttn_protocol_lorawan_device_pb.Device.deserializeBinaryFromReader);
      msg.setLorawanDevice(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAltitude(value);
      break;
    case 13:
      var value = msg.getAttributesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.Device.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.Device.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.Device} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.Device.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLorawanDevice();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ttn_protocol_lorawan_device_pb.Device.serializeBinaryToWriter
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getAltitude();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getAttributesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(13, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.handler.Device.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.Device.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dev_id = 2;
 * @return {string}
 */
proto.handler.Device.prototype.getDevId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.Device.prototype.setDevId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional lorawan.Device lorawan_device = 3;
 * @return {?proto.lorawan.Device}
 */
proto.handler.Device.prototype.getLorawanDevice = function() {
  return /** @type{?proto.lorawan.Device} */ (
    jspb.Message.getWrapperField(this, ttn_protocol_lorawan_device_pb.Device, 3));
};


/** @param {?proto.lorawan.Device|undefined} value */
proto.handler.Device.prototype.setLorawanDevice = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.handler.Device.oneofGroups_[0], value);
};


proto.handler.Device.prototype.clearLorawanDevice = function() {
  this.setLorawanDevice(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.Device.prototype.hasLorawanDevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float latitude = 10;
 * @return {number}
 */
proto.handler.Device.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.handler.Device.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float longitude = 11;
 * @return {number}
 */
proto.handler.Device.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.handler.Device.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional int32 altitude = 12;
 * @return {number}
 */
proto.handler.Device.prototype.getAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.handler.Device.prototype.setAltitude = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * map<string, string> attributes = 13;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.handler.Device.prototype.getAttributesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 13, opt_noLazyCreate,
      null));
};


proto.handler.Device.prototype.clearAttributesMap = function() {
  this.getAttributesMap().clear();
};


/**
 * optional string description = 20;
 * @return {string}
 */
proto.handler.Device.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto.handler.Device.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DeviceList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.handler.DeviceList.repeatedFields_, null);
};
goog.inherits(proto.handler.DeviceList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DeviceList.displayName = 'proto.handler.DeviceList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.handler.DeviceList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DeviceList.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DeviceList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DeviceList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceList.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicesList: jspb.Message.toObjectList(msg.getDevicesList(),
    proto.handler.Device.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DeviceList}
 */
proto.handler.DeviceList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DeviceList;
  return proto.handler.DeviceList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DeviceList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DeviceList}
 */
proto.handler.DeviceList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.handler.Device;
      reader.readMessage(value,proto.handler.Device.deserializeBinaryFromReader);
      msg.addDevices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DeviceList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DeviceList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DeviceList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DeviceList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.handler.Device.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Device devices = 1;
 * @return {!Array<!proto.handler.Device>}
 */
proto.handler.DeviceList.prototype.getDevicesList = function() {
  return /** @type{!Array<!proto.handler.Device>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.handler.Device, 1));
};


/** @param {!Array<!proto.handler.Device>} value */
proto.handler.DeviceList.prototype.setDevicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.handler.Device=} opt_value
 * @param {number=} opt_index
 * @return {!proto.handler.Device}
 */
proto.handler.DeviceList.prototype.addDevices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.handler.Device, opt_index);
};


proto.handler.DeviceList.prototype.clearDevicesList = function() {
  this.setDevicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DryDownlinkMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.DryDownlinkMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DryDownlinkMessage.displayName = 'proto.handler.DryDownlinkMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DryDownlinkMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DryDownlinkMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DryDownlinkMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryDownlinkMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    fields: jspb.Message.getFieldWithDefault(msg, 2, ""),
    app: (f = msg.getApp()) && proto.handler.Application.toObject(includeInstance, f),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DryDownlinkMessage}
 */
proto.handler.DryDownlinkMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DryDownlinkMessage;
  return proto.handler.DryDownlinkMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DryDownlinkMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DryDownlinkMessage}
 */
proto.handler.DryDownlinkMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFields(value);
      break;
    case 3:
      var value = new proto.handler.Application;
      reader.readMessage(value,proto.handler.Application.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DryDownlinkMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DryDownlinkMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DryDownlinkMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryDownlinkMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFields();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.handler.Application.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handler.DryDownlinkMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.DryDownlinkMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.DryDownlinkMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.DryDownlinkMessage.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string fields = 2;
 * @return {string}
 */
proto.handler.DryDownlinkMessage.prototype.getFields = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.DryDownlinkMessage.prototype.setFields = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Application app = 3;
 * @return {?proto.handler.Application}
 */
proto.handler.DryDownlinkMessage.prototype.getApp = function() {
  return /** @type{?proto.handler.Application} */ (
    jspb.Message.getWrapperField(this, proto.handler.Application, 3));
};


/** @param {?proto.handler.Application|undefined} value */
proto.handler.DryDownlinkMessage.prototype.setApp = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.handler.DryDownlinkMessage.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DryDownlinkMessage.prototype.hasApp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.handler.DryDownlinkMessage.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.handler.DryDownlinkMessage.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DryUplinkMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.DryUplinkMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DryUplinkMessage.displayName = 'proto.handler.DryUplinkMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DryUplinkMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DryUplinkMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DryUplinkMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryUplinkMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    app: (f = msg.getApp()) && proto.handler.Application.toObject(includeInstance, f),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DryUplinkMessage}
 */
proto.handler.DryUplinkMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DryUplinkMessage;
  return proto.handler.DryUplinkMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DryUplinkMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DryUplinkMessage}
 */
proto.handler.DryUplinkMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.handler.Application;
      reader.readMessage(value,proto.handler.Application.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DryUplinkMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DryUplinkMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DryUplinkMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryUplinkMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.handler.Application.serializeBinaryToWriter
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handler.DryUplinkMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.DryUplinkMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.DryUplinkMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.DryUplinkMessage.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Application app = 2;
 * @return {?proto.handler.Application}
 */
proto.handler.DryUplinkMessage.prototype.getApp = function() {
  return /** @type{?proto.handler.Application} */ (
    jspb.Message.getWrapperField(this, proto.handler.Application, 2));
};


/** @param {?proto.handler.Application|undefined} value */
proto.handler.DryUplinkMessage.prototype.setApp = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.handler.DryUplinkMessage.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.handler.DryUplinkMessage.prototype.hasApp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.handler.DryUplinkMessage.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.handler.DryUplinkMessage.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.SimulatedUplinkMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.handler.SimulatedUplinkMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.SimulatedUplinkMessage.displayName = 'proto.handler.SimulatedUplinkMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.SimulatedUplinkMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.SimulatedUplinkMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.SimulatedUplinkMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.SimulatedUplinkMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    appId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: msg.getPayload_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.SimulatedUplinkMessage}
 */
proto.handler.SimulatedUplinkMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.SimulatedUplinkMessage;
  return proto.handler.SimulatedUplinkMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.SimulatedUplinkMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.SimulatedUplinkMessage}
 */
proto.handler.SimulatedUplinkMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.SimulatedUplinkMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.SimulatedUplinkMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.SimulatedUplinkMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.SimulatedUplinkMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional string app_id = 1;
 * @return {string}
 */
proto.handler.SimulatedUplinkMessage.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.SimulatedUplinkMessage.prototype.setAppId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dev_id = 2;
 * @return {string}
 */
proto.handler.SimulatedUplinkMessage.prototype.getDevId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.SimulatedUplinkMessage.prototype.setDevId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.handler.SimulatedUplinkMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.SimulatedUplinkMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.SimulatedUplinkMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.SimulatedUplinkMessage.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.handler.SimulatedUplinkMessage.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.handler.SimulatedUplinkMessage.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.LogEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.handler.LogEntry.repeatedFields_, null);
};
goog.inherits(proto.handler.LogEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.LogEntry.displayName = 'proto.handler.LogEntry';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.handler.LogEntry.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.LogEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.LogEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.LogEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.LogEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_function: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.LogEntry}
 */
proto.handler.LogEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.LogEntry;
  return proto.handler.LogEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.LogEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.LogEntry}
 */
proto.handler.LogEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.LogEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.LogEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.LogEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.LogEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string function = 1;
 * @return {string}
 */
proto.handler.LogEntry.prototype.getFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.handler.LogEntry.prototype.setFunction = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string fields = 2;
 * @return {!Array<string>}
 */
proto.handler.LogEntry.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.handler.LogEntry.prototype.setFieldsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.handler.LogEntry.prototype.addFields = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.handler.LogEntry.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DryUplinkResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.handler.DryUplinkResult.repeatedFields_, null);
};
goog.inherits(proto.handler.DryUplinkResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DryUplinkResult.displayName = 'proto.handler.DryUplinkResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.handler.DryUplinkResult.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DryUplinkResult.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DryUplinkResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DryUplinkResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryUplinkResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    fields: jspb.Message.getFieldWithDefault(msg, 2, ""),
    valid: jspb.Message.getFieldWithDefault(msg, 3, false),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.handler.LogEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DryUplinkResult}
 */
proto.handler.DryUplinkResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DryUplinkResult;
  return proto.handler.DryUplinkResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DryUplinkResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DryUplinkResult}
 */
proto.handler.DryUplinkResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFields(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValid(value);
      break;
    case 4:
      var value = new proto.handler.LogEntry;
      reader.readMessage(value,proto.handler.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DryUplinkResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DryUplinkResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DryUplinkResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryUplinkResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFields();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValid();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.handler.LogEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handler.DryUplinkResult.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.DryUplinkResult.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.DryUplinkResult.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.DryUplinkResult.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string fields = 2;
 * @return {string}
 */
proto.handler.DryUplinkResult.prototype.getFields = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.handler.DryUplinkResult.prototype.setFields = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool valid = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.handler.DryUplinkResult.prototype.getValid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.handler.DryUplinkResult.prototype.setValid = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated LogEntry logs = 4;
 * @return {!Array<!proto.handler.LogEntry>}
 */
proto.handler.DryUplinkResult.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.handler.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.handler.LogEntry, 4));
};


/** @param {!Array<!proto.handler.LogEntry>} value */
proto.handler.DryUplinkResult.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.handler.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.handler.LogEntry}
 */
proto.handler.DryUplinkResult.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.handler.LogEntry, opt_index);
};


proto.handler.DryUplinkResult.prototype.clearLogsList = function() {
  this.setLogsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.handler.DryDownlinkResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.handler.DryDownlinkResult.repeatedFields_, null);
};
goog.inherits(proto.handler.DryDownlinkResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.handler.DryDownlinkResult.displayName = 'proto.handler.DryDownlinkResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.handler.DryDownlinkResult.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.handler.DryDownlinkResult.prototype.toObject = function(opt_includeInstance) {
  return proto.handler.DryDownlinkResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.handler.DryDownlinkResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryDownlinkResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.handler.LogEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.handler.DryDownlinkResult}
 */
proto.handler.DryDownlinkResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.handler.DryDownlinkResult;
  return proto.handler.DryDownlinkResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.handler.DryDownlinkResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.handler.DryDownlinkResult}
 */
proto.handler.DryDownlinkResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.handler.LogEntry;
      reader.readMessage(value,proto.handler.LogEntry.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.handler.DryDownlinkResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.handler.DryDownlinkResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.handler.DryDownlinkResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.handler.DryDownlinkResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.handler.LogEntry.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.handler.DryDownlinkResult.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.handler.DryDownlinkResult.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.handler.DryDownlinkResult.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.handler.DryDownlinkResult.prototype.setPayload = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated LogEntry logs = 2;
 * @return {!Array<!proto.handler.LogEntry>}
 */
proto.handler.DryDownlinkResult.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.handler.LogEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.handler.LogEntry, 2));
};


/** @param {!Array<!proto.handler.LogEntry>} value */
proto.handler.DryDownlinkResult.prototype.setLogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.handler.LogEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.handler.LogEntry}
 */
proto.handler.DryDownlinkResult.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.handler.LogEntry, opt_index);
};


proto.handler.DryDownlinkResult.prototype.clearLogsList = function() {
  this.setLogsList([]);
};


goog.object.extend(exports, proto.handler);
