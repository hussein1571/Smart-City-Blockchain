# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: github.com/TheThingsNetwork/api/handler/handler.proto for package 'handler'
# Original file comments:
# Copyright Â© 2017 The Things Network
# Use of this source code is governed by the MIT license that can be found in the LICENSE file.
#

require 'grpc'
require 'handler/handler_pb'

module Handler
  module Handler
    # The Handler service provides pure network functionality
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'handler.Handler'

      rpc :ActivationChallenge, Broker::ActivationChallengeRequest, Broker::ActivationChallengeResponse
      rpc :Activate, Broker::DeduplicatedDeviceActivationRequest, DeviceActivationResponse
    end

    Stub = Service.rpc_stub_class
  end
  module ApplicationManager
    # ApplicationManager manages application and device registrations on the Handler
    #
    # To protect our quality of service, you can make up to 5000 calls to the
    # ApplicationManager API per hour. Once you go over the rate limit, you will
    # receive an error response.
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'handler.ApplicationManager'

      # Applications should first be registered to the Handler with the `RegisterApplication` method
      rpc :RegisterApplication, ApplicationIdentifier, Google::Protobuf::Empty
      # GetApplication returns the application with the given identifier (app_id)
      rpc :GetApplication, ApplicationIdentifier, Application
      # SetApplication updates the settings for the application. All fields must be supplied.
      rpc :SetApplication, Application, Google::Protobuf::Empty
      # DeleteApplication deletes the application with the given identifier (app_id)
      rpc :DeleteApplication, ApplicationIdentifier, Google::Protobuf::Empty
      # GetDevice returns the device with the given identifier (app_id and dev_id)
      rpc :GetDevice, DeviceIdentifier, Device
      # SetDevice creates or updates a device. All fields must be supplied.
      rpc :SetDevice, Device, Google::Protobuf::Empty
      # DeleteDevice deletes the device with the given identifier (app_id and dev_id)
      rpc :DeleteDevice, DeviceIdentifier, Google::Protobuf::Empty
      # GetDevicesForApplication returns all devices that belong to the application with the given identifier (app_id)
      rpc :GetDevicesForApplication, ApplicationIdentifier, DeviceList
      # DryUplink simulates processing a downlink message and returns the result
      rpc :DryDownlink, DryDownlinkMessage, DryDownlinkResult
      # DryUplink simulates processing an uplink message and returns the result
      rpc :DryUplink, DryUplinkMessage, DryUplinkResult
      # SimulateUplink simulates an uplink message
      rpc :SimulateUplink, SimulatedUplinkMessage, Google::Protobuf::Empty
    end

    Stub = Service.rpc_stub_class
  end
  module HandlerManager
    # The HandlerManager service provides configuration and monitoring
    # functionality
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'handler.HandlerManager'

      rpc :GetStatus, StatusRequest, Status
    end

    Stub = Service.rpc_stub_class
  end
end
