// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/TheThingsNetwork/api/trace/trace.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Trace information
struct Trace_Trace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Generated ID
  var id: String = String()

  /// Time in Unix nanoseconds
  var time: Int64 = 0

  /// The ID of the component
  var serviceID: String = String()

  /// The name of the component (router/broker/handler)
  var serviceName: String = String()

  /// Short event name
  var event: String = String()

  /// metadata for the event
  var metadata: Dictionary<String,String> = [:]

  /// Parents of the event
  var parents: [Trace_Trace] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "trace"

extension Trace_Trace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "time"),
    3: .standard(proto: "service_id"),
    4: .standard(proto: "service_name"),
    5: .same(proto: "event"),
    6: .same(proto: "metadata"),
    11: .same(proto: "parents"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularInt64Field(value: &self.time)
      case 3: try decoder.decodeSingularStringField(value: &self.serviceID)
      case 4: try decoder.decodeSingularStringField(value: &self.serviceName)
      case 5: try decoder.decodeSingularStringField(value: &self.event)
      case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.metadata)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.parents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.time != 0 {
      try visitor.visitSingularInt64Field(value: self.time, fieldNumber: 2)
    }
    if !self.serviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceID, fieldNumber: 3)
    }
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 4)
    }
    if !self.event.isEmpty {
      try visitor.visitSingularStringField(value: self.event, fieldNumber: 5)
    }
    if !self.metadata.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.metadata, fieldNumber: 6)
    }
    if !self.parents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parents, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Trace_Trace, rhs: Trace_Trace) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.time != rhs.time {return false}
    if lhs.serviceID != rhs.serviceID {return false}
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.event != rhs.event {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.parents != rhs.parents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
