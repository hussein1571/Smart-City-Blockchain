/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.api.ComponentStats', null, global);
goog.exportSymbol('proto.api.ComponentStats.CPUStats', null, global);
goog.exportSymbol('proto.api.ComponentStats.MemoryStats', null, global);
goog.exportSymbol('proto.api.Percentiles', null, global);
goog.exportSymbol('proto.api.Rates', null, global);
goog.exportSymbol('proto.api.SystemStats', null, global);
goog.exportSymbol('proto.api.SystemStats.CPUStats', null, global);
goog.exportSymbol('proto.api.SystemStats.Loadstats', null, global);
goog.exportSymbol('proto.api.SystemStats.MemoryStats', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Percentiles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Percentiles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Percentiles.displayName = 'proto.api.Percentiles';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Percentiles.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Percentiles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Percentiles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Percentiles.toObject = function(includeInstance, msg) {
  var f, obj = {
    percentile1: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    percentile5: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    percentile10: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    percentile25: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    percentile50: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    percentile75: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    percentile90: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    percentile95: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    percentile99: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Percentiles}
 */
proto.api.Percentiles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Percentiles;
  return proto.api.Percentiles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Percentiles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Percentiles}
 */
proto.api.Percentiles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile5(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile10(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile25(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile50(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile75(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile90(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile95(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentile99(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Percentiles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Percentiles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Percentiles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Percentiles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPercentile1();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPercentile5();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getPercentile10();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPercentile25();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPercentile50();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPercentile75();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPercentile90();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getPercentile95();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPercentile99();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional float percentile1 = 1;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile1 = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float percentile5 = 2;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile5 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile5 = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float percentile10 = 3;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile10 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile10 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float percentile25 = 4;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile25 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile25 = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float percentile50 = 5;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile50 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile50 = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float percentile75 = 6;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile75 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile75 = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float percentile90 = 7;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile90 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile90 = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float percentile95 = 8;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile95 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile95 = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float percentile99 = 9;
 * @return {number}
 */
proto.api.Percentiles.prototype.getPercentile99 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.api.Percentiles.prototype.setPercentile99 = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.Rates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.Rates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.Rates.displayName = 'proto.api.Rates';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.Rates.prototype.toObject = function(opt_includeInstance) {
  return proto.api.Rates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.Rates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Rates.toObject = function(includeInstance, msg) {
  var f, obj = {
    rate1: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    rate5: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    rate15: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.Rates}
 */
proto.api.Rates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.Rates;
  return proto.api.Rates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.Rates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.Rates}
 */
proto.api.Rates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRate1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRate5(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRate15(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.Rates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.Rates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.Rates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.Rates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRate1();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getRate5();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getRate15();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float rate1 = 1;
 * @return {number}
 */
proto.api.Rates.prototype.getRate1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.Rates.prototype.setRate1 = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float rate5 = 2;
 * @return {number}
 */
proto.api.Rates.prototype.getRate5 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.api.Rates.prototype.setRate5 = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float rate15 = 3;
 * @return {number}
 */
proto.api.Rates.prototype.getRate15 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.api.Rates.prototype.setRate15 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SystemStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SystemStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SystemStats.displayName = 'proto.api.SystemStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SystemStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SystemStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SystemStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    load: (f = msg.getLoad()) && proto.api.SystemStats.Loadstats.toObject(includeInstance, f),
    cpu: (f = msg.getCpu()) && proto.api.SystemStats.CPUStats.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.api.SystemStats.MemoryStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SystemStats}
 */
proto.api.SystemStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SystemStats;
  return proto.api.SystemStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SystemStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SystemStats}
 */
proto.api.SystemStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.SystemStats.Loadstats;
      reader.readMessage(value,proto.api.SystemStats.Loadstats.deserializeBinaryFromReader);
      msg.setLoad(value);
      break;
    case 2:
      var value = new proto.api.SystemStats.CPUStats;
      reader.readMessage(value,proto.api.SystemStats.CPUStats.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 3:
      var value = new proto.api.SystemStats.MemoryStats;
      reader.readMessage(value,proto.api.SystemStats.MemoryStats.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SystemStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SystemStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SystemStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoad();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.SystemStats.Loadstats.serializeBinaryToWriter
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.SystemStats.CPUStats.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.SystemStats.MemoryStats.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SystemStats.Loadstats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SystemStats.Loadstats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SystemStats.Loadstats.displayName = 'proto.api.SystemStats.Loadstats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SystemStats.Loadstats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SystemStats.Loadstats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SystemStats.Loadstats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.Loadstats.toObject = function(includeInstance, msg) {
  var f, obj = {
    load1: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    load5: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    load15: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SystemStats.Loadstats}
 */
proto.api.SystemStats.Loadstats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SystemStats.Loadstats;
  return proto.api.SystemStats.Loadstats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SystemStats.Loadstats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SystemStats.Loadstats}
 */
proto.api.SystemStats.Loadstats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad1(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad5(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLoad15(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SystemStats.Loadstats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SystemStats.Loadstats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SystemStats.Loadstats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.Loadstats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoad1();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getLoad5();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getLoad15();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float load1 = 1;
 * @return {number}
 */
proto.api.SystemStats.Loadstats.prototype.getLoad1 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.Loadstats.prototype.setLoad1 = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float load5 = 2;
 * @return {number}
 */
proto.api.SystemStats.Loadstats.prototype.getLoad5 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.Loadstats.prototype.setLoad5 = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float load15 = 3;
 * @return {number}
 */
proto.api.SystemStats.Loadstats.prototype.getLoad15 = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.Loadstats.prototype.setLoad15 = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SystemStats.CPUStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SystemStats.CPUStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SystemStats.CPUStats.displayName = 'proto.api.SystemStats.CPUStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SystemStats.CPUStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SystemStats.CPUStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SystemStats.CPUStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.CPUStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    system: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    idle: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SystemStats.CPUStats}
 */
proto.api.SystemStats.CPUStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SystemStats.CPUStats;
  return proto.api.SystemStats.CPUStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SystemStats.CPUStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SystemStats.CPUStats}
 */
proto.api.SystemStats.CPUStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSystem(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIdle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SystemStats.CPUStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SystemStats.CPUStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SystemStats.CPUStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.CPUStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSystem();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getIdle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float user = 1;
 * @return {number}
 */
proto.api.SystemStats.CPUStats.prototype.getUser = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.CPUStats.prototype.setUser = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float system = 2;
 * @return {number}
 */
proto.api.SystemStats.CPUStats.prototype.getSystem = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.CPUStats.prototype.setSystem = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float idle = 3;
 * @return {number}
 */
proto.api.SystemStats.CPUStats.prototype.getIdle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.CPUStats.prototype.setIdle = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float percentage = 4;
 * @return {number}
 */
proto.api.SystemStats.CPUStats.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.api.SystemStats.CPUStats.prototype.setPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.SystemStats.MemoryStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.SystemStats.MemoryStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.SystemStats.MemoryStats.displayName = 'proto.api.SystemStats.MemoryStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.SystemStats.MemoryStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.SystemStats.MemoryStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.SystemStats.MemoryStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.MemoryStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    available: jspb.Message.getFieldWithDefault(msg, 2, 0),
    used: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.SystemStats.MemoryStats}
 */
proto.api.SystemStats.MemoryStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.SystemStats.MemoryStats;
  return proto.api.SystemStats.MemoryStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.SystemStats.MemoryStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.SystemStats.MemoryStats}
 */
proto.api.SystemStats.MemoryStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailable(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.SystemStats.MemoryStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.SystemStats.MemoryStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.SystemStats.MemoryStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.SystemStats.MemoryStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAvailable();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 total = 1;
 * @return {number}
 */
proto.api.SystemStats.MemoryStats.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.api.SystemStats.MemoryStats.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 available = 2;
 * @return {number}
 */
proto.api.SystemStats.MemoryStats.prototype.getAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.api.SystemStats.MemoryStats.prototype.setAvailable = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 used = 3;
 * @return {number}
 */
proto.api.SystemStats.MemoryStats.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.api.SystemStats.MemoryStats.prototype.setUsed = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Loadstats load = 1;
 * @return {?proto.api.SystemStats.Loadstats}
 */
proto.api.SystemStats.prototype.getLoad = function() {
  return /** @type{?proto.api.SystemStats.Loadstats} */ (
    jspb.Message.getWrapperField(this, proto.api.SystemStats.Loadstats, 1));
};


/** @param {?proto.api.SystemStats.Loadstats|undefined} value */
proto.api.SystemStats.prototype.setLoad = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.SystemStats.prototype.clearLoad = function() {
  this.setLoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SystemStats.prototype.hasLoad = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CPUStats cpu = 2;
 * @return {?proto.api.SystemStats.CPUStats}
 */
proto.api.SystemStats.prototype.getCpu = function() {
  return /** @type{?proto.api.SystemStats.CPUStats} */ (
    jspb.Message.getWrapperField(this, proto.api.SystemStats.CPUStats, 2));
};


/** @param {?proto.api.SystemStats.CPUStats|undefined} value */
proto.api.SystemStats.prototype.setCpu = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.SystemStats.prototype.clearCpu = function() {
  this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SystemStats.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MemoryStats memory = 3;
 * @return {?proto.api.SystemStats.MemoryStats}
 */
proto.api.SystemStats.prototype.getMemory = function() {
  return /** @type{?proto.api.SystemStats.MemoryStats} */ (
    jspb.Message.getWrapperField(this, proto.api.SystemStats.MemoryStats, 3));
};


/** @param {?proto.api.SystemStats.MemoryStats|undefined} value */
proto.api.SystemStats.prototype.setMemory = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.SystemStats.prototype.clearMemory = function() {
  this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.SystemStats.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ComponentStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ComponentStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ComponentStats.displayName = 'proto.api.ComponentStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ComponentStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ComponentStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ComponentStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    cpu: (f = msg.getCpu()) && proto.api.ComponentStats.CPUStats.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.api.ComponentStats.MemoryStats.toObject(includeInstance, f),
    goroutines: jspb.Message.getFieldWithDefault(msg, 4, 0),
    gcCpuFraction: +jspb.Message.getFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ComponentStats}
 */
proto.api.ComponentStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ComponentStats;
  return proto.api.ComponentStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ComponentStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ComponentStats}
 */
proto.api.ComponentStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptime(value);
      break;
    case 2:
      var value = new proto.api.ComponentStats.CPUStats;
      reader.readMessage(value,proto.api.ComponentStats.CPUStats.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 3:
      var value = new proto.api.ComponentStats.MemoryStats;
      reader.readMessage(value,proto.api.ComponentStats.MemoryStats.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGoroutines(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setGcCpuFraction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ComponentStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ComponentStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ComponentStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUptime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.api.ComponentStats.CPUStats.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.api.ComponentStats.MemoryStats.serializeBinaryToWriter
    );
  }
  f = message.getGoroutines();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getGcCpuFraction();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ComponentStats.CPUStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ComponentStats.CPUStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ComponentStats.CPUStats.displayName = 'proto.api.ComponentStats.CPUStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ComponentStats.CPUStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ComponentStats.CPUStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ComponentStats.CPUStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.CPUStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    system: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    idle: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    percentage: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ComponentStats.CPUStats}
 */
proto.api.ComponentStats.CPUStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ComponentStats.CPUStats;
  return proto.api.ComponentStats.CPUStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ComponentStats.CPUStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ComponentStats.CPUStats}
 */
proto.api.ComponentStats.CPUStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSystem(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIdle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPercentage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ComponentStats.CPUStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ComponentStats.CPUStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ComponentStats.CPUStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.CPUStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSystem();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getIdle();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPercentage();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float user = 1;
 * @return {number}
 */
proto.api.ComponentStats.CPUStats.prototype.getUser = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.api.ComponentStats.CPUStats.prototype.setUser = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float system = 2;
 * @return {number}
 */
proto.api.ComponentStats.CPUStats.prototype.getSystem = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.api.ComponentStats.CPUStats.prototype.setSystem = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float idle = 3;
 * @return {number}
 */
proto.api.ComponentStats.CPUStats.prototype.getIdle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.api.ComponentStats.CPUStats.prototype.setIdle = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float percentage = 4;
 * @return {number}
 */
proto.api.ComponentStats.CPUStats.prototype.getPercentage = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.api.ComponentStats.CPUStats.prototype.setPercentage = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ComponentStats.MemoryStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ComponentStats.MemoryStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ComponentStats.MemoryStats.displayName = 'proto.api.ComponentStats.MemoryStats';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ComponentStats.MemoryStats.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ComponentStats.MemoryStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ComponentStats.MemoryStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.MemoryStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    memory: jspb.Message.getFieldWithDefault(msg, 1, 0),
    swap: jspb.Message.getFieldWithDefault(msg, 2, 0),
    heap: jspb.Message.getFieldWithDefault(msg, 10, 0),
    stack: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ComponentStats.MemoryStats}
 */
proto.api.ComponentStats.MemoryStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ComponentStats.MemoryStats;
  return proto.api.ComponentStats.MemoryStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ComponentStats.MemoryStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ComponentStats.MemoryStats}
 */
proto.api.ComponentStats.MemoryStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMemory(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSwap(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeap(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStack(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ComponentStats.MemoryStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.api.ComponentStats.MemoryStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.api.ComponentStats.MemoryStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.api.ComponentStats.MemoryStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemory();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSwap();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHeap();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getStack();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional uint64 memory = 1;
 * @return {number}
 */
proto.api.ComponentStats.MemoryStats.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.api.ComponentStats.MemoryStats.prototype.setMemory = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 swap = 2;
 * @return {number}
 */
proto.api.ComponentStats.MemoryStats.prototype.getSwap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.api.ComponentStats.MemoryStats.prototype.setSwap = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 heap = 10;
 * @return {number}
 */
proto.api.ComponentStats.MemoryStats.prototype.getHeap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.api.ComponentStats.MemoryStats.prototype.setHeap = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 stack = 11;
 * @return {number}
 */
proto.api.ComponentStats.MemoryStats.prototype.getStack = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.api.ComponentStats.MemoryStats.prototype.setStack = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 uptime = 1;
 * @return {number}
 */
proto.api.ComponentStats.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.api.ComponentStats.prototype.setUptime = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CPUStats cpu = 2;
 * @return {?proto.api.ComponentStats.CPUStats}
 */
proto.api.ComponentStats.prototype.getCpu = function() {
  return /** @type{?proto.api.ComponentStats.CPUStats} */ (
    jspb.Message.getWrapperField(this, proto.api.ComponentStats.CPUStats, 2));
};


/** @param {?proto.api.ComponentStats.CPUStats|undefined} value */
proto.api.ComponentStats.prototype.setCpu = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.ComponentStats.prototype.clearCpu = function() {
  this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ComponentStats.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MemoryStats memory = 3;
 * @return {?proto.api.ComponentStats.MemoryStats}
 */
proto.api.ComponentStats.prototype.getMemory = function() {
  return /** @type{?proto.api.ComponentStats.MemoryStats} */ (
    jspb.Message.getWrapperField(this, proto.api.ComponentStats.MemoryStats, 3));
};


/** @param {?proto.api.ComponentStats.MemoryStats|undefined} value */
proto.api.ComponentStats.prototype.setMemory = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.ComponentStats.prototype.clearMemory = function() {
  this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.api.ComponentStats.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 goroutines = 4;
 * @return {number}
 */
proto.api.ComponentStats.prototype.getGoroutines = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.api.ComponentStats.prototype.setGoroutines = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float gc_cpu_fraction = 5;
 * @return {number}
 */
proto.api.ComponentStats.prototype.getGcCpuFraction = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.api.ComponentStats.prototype.setGcCpuFraction = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


goog.object.extend(exports, proto.api);
