"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validWildcards = exports.wildcards = exports.devID = exports.downlinkTopic = exports.eventTopic = exports.uplinkTopic = exports.topic = exports.wildcard = undefined;

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _sourceMapSupport2 = require("source-map-support");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)();
// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

var wildcard = exports.wildcard = "+";

var regex = /^[a-z0-9](?:[_-]?[a-z0-9]){1,35}$/;
var validID = function validID() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (!regex.test(str)) {
    throw new Error("Invalid " + (type ? type.concat(" ") : "") + "id '" + str + "'");
  }
};

var validIDOrWildcard = function validIDOrWildcard() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (str === wildcard) {
    return;
  }

  return validID(str, type);
};

var collapse = function collapse(t) {
  return t.replace(/#.*/g, "#");
};

/**
 * @private
 * Build a topic.
 */
var topic = exports.topic = function topic() {
  for (var _len = arguments.length, parts = Array(_len), _key = 0; _key < _len; _key++) {
    parts[_key] = arguments[_key];
  }

  return collapse(parts.filter(function (part) {
    return Boolean(part);
  }).join("/"));
};

/**
 * @private
 * Build the topic for uplink
 */
var uplinkTopic = exports.uplinkTopic = function uplinkTopic() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  switch (args.length) {
    case 0:
      return uplinkTopic(wildcard);
    case 1:
      var devID_ = args[0];

      return uplinkTopic(devID_, undefined);
    case 2:
      var devID__ = args[0],
          fieldName_ = args[1];

      return uplinkTopic(wildcard, devID__, fieldName_);
    case 3:
      var appID = args[0],
          _devID = args[1],
          fieldName = args[2];

      validIDOrWildcard(appID, "application");
      validIDOrWildcard(_devID, "device");
      return topic(appID, "devices", _devID, "up", fieldName);
  }

  throw new Error("Could not build uplink topic from " + args.join(","));
};

/**
 * @private
 * Build the topic for events
 */
var eventTopic = exports.eventTopic = function eventTopic() {
  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }

  switch (args.length) {
    case 0:
      return eventTopic(wildcard);
    case 1:
      var devID_ = args[0];

      return eventTopic(devID_, "#");
    case 2:
      var devID__ = args[0],
          name_ = args[1];

      return eventTopic(wildcard, devID__, name_);
    case 3:
      var appID = args[0],
          _devID2 = args[1],
          name = args[2];

      validIDOrWildcard(appID, "application");
      validIDOrWildcard(_devID2, "device");
      return topic(appID, "devices", _devID2, "events", name);
  }

  throw new Error("Could not build event topic from " + args.join(","));
};

/**
 * @private
 * Build the topic for downlink
 */
var downlinkTopic = exports.downlinkTopic = function downlinkTopic(appID, devID) {
  validID(appID, "application");
  validID(devID, "device");

  return topic(appID, "devices", devID, "down");
};

var valid = function valid(topic) {
  var parts = topic.split("/");
  return parts.length >= 4 && parts[0] !== "#" && parts[1] === "devices" && parts[2] !== "#" && (parts[3] === "up" || parts[3] === "events");
};

var unique = function unique(value, index, self) {
  return self.indexOf(value) === index;
};

var combos = function combos(a, b) {
  if (a.length === 0) {
    return b.map(function (el) {
      return [el];
    });
  }

  if (b.length === 0) {
    return a.map(function (el) {
      return [el];
    });
  }

  return a.reduce(function (acc, ael) {
    return [].concat((0, _toConsumableArray3.default)(acc), (0, _toConsumableArray3.default)(b.map(function (bel) {
      return [ael, bel];
    })));
  }, []);
};

var allcombos = function allcombos(first) {
  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  if (args.length === 0) {
    return first;
  }

  var fst = args[0],
      rest = args.slice(1);

  var cc = combos(first, fst).map(function (el) {
    return topic.apply(undefined, (0, _toConsumableArray3.default)(el));
  }).filter(unique);

  return allcombos.apply(undefined, [cc].concat((0, _toConsumableArray3.default)(rest)));
};

var devID = exports.devID = function devID(t) {
  return t.split("/")[2] || "+";
};

/**
 * @private
 * Generate all wildcard possibilities for a given topic.
 * eg. a/b/c becomes
 *  - a/b/c
 *  - a/b/#
 *  - a/b/+
 *  - a/#
 *  - a/+/#
 *  - a/+/+
 *  - +/b/c
 *  - +/b/#
 *  - +/b/+
 *  - +/#
 *  - +/+/c
 *  - +/+/#
 *  - +/+/+
 */
var wildcards = exports.wildcards = function wildcards(t) {
  var parts = t.split("/");

  var l = parts.map(function (part) {
    return [part, "#", "+"];
  });

  return allcombos.apply(undefined, (0, _toConsumableArray3.default)(l)).filter(unique);
};

/**
 * @private
 * Same as `wildcards` but filters the ouput on valid topics for The Things
 * Network.
 */
var validWildcards = exports.validWildcards = function validWildcards(t) {
  return wildcards(t).filter(valid);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,