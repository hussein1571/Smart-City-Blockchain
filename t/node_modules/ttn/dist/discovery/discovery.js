"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.services = exports.Discovery = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sourceMapSupport2 = require("source-map-support");

var _grpc = require("grpc");

var _grpc2 = _interopRequireDefault(_grpc);

var _discovery_pb = require("ttnapi/discovery/discovery_pb");

var _discovery_pb2 = _interopRequireDefault(_discovery_pb);

var _discovery_grpc_pb = require("ttnapi/discovery/discovery_grpc_pb");

var _discovery_grpc_pb2 = _interopRequireDefault(_discovery_grpc_pb);

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

// Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

// Necessary to make gRPC work
process.env.GRPC_SSL_CIPHER_SUITES = _utils.MODERN_CIPHER_SUITES;

/**
 * @typedef DiscoveryOptions
 * DiscoveryOptions are options to the discovery client
 *
 * @prop [address] - The address of the discovery server. Defaults to `discovery.thethingsnetwork.org:1900`.
 * @prop [insecure] - Wether or not to connect securely to the discovery server. Defaults to `false`.
 * @prop [certificate] - An optional certificate to accept from the discovery server.  Use this if the discovery server uses a self-signed certificate.
 */


/**
 * Service is an enum of the possible services types to get from the discovery
 * server.
 */


/**
 * Announcement is an announcement on the discovery server.
 */

/** Discovery is a client for The Things Network discovery API */
var Discovery = exports.Discovery = function () {

  /**
   * Create a new Discovery client.
   */
  function Discovery() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Discovery);
    var _opts$address = opts.address,
        address = _opts$address === undefined ? "discovery.thethings.network:1900" : _opts$address,
        _opts$insecure = opts.insecure,
        insecure = _opts$insecure === undefined ? false : _opts$insecure,
        certificate = opts.certificate;


    var credentials = insecure ? _grpc2.default.credentials.createInsecure() : _grpc2.default.credentials.createSsl(certificate && new Buffer(certificate));

    this.client = new _discovery_grpc_pb2.default.DiscoveryClient(address, credentials);
  }

  /** @private */


  /** @private */


  (0, _createClass3.default)(Discovery, [{
    key: "_wrap",
    value: function _wrap(fn) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _utils.wrap.apply(undefined, [this.client, fn].concat((0, _toConsumableArray3.default)(args))).then(function (res) {
        return res.toObject();
      });
    }

    /**
     * `getAll` returns announcements for all services known to
     * the discovery server that match the service name.
     *
     * @param serviceName - The name of the services to look for, eg. `"handler"`
     */

  }, {
    key: "getAll",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(serviceName) {
        var req, res;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                req = new _discovery_pb2.default.GetServiceRequest();

                req.setServiceName(serviceName);
                _context.next = 4;
                return this._wrap(this.client.getAll, req);

              case 4:
                res = _context.sent;
                return _context.abrupt("return", res.servicesList);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAll(_x2) {
        return _ref.apply(this, arguments);
      }

      return getAll;
    }()

    /**
     * `get` returns the announcement for the service with the
     * specified service name and id.
     *
     * @param serviceName - The name of the services to look for, eg. `"handler"`
     * @param id - The id of the service to look for, eg. `"ttn-handler-eu"`
     */

  }, {
    key: "get",
    value: function get(serviceName, id) {
      var req = new _discovery_pb2.default.GetRequest();
      req.setServiceName(serviceName);
      req.setId(id);
      return this._wrap(this.client.get, req);
    }

    /**
     * `getByAppID` gets a handler announcement by application ID.
     * It looks up the handler the application is registered to.
     */

  }, {
    key: "getByAppID",
    value: function getByAppID(appID) {
      var req = new _discovery_pb2.default.GetByAppIDRequest();
      req.setAppId(appID);
      return this._wrap(this.client.getByAppID, req);
    }
  }]);
  return Discovery;
}();

/**
 * services is a map with the known service names for the discovery server.
 */


var services = exports.services = {
  /** Handler is a Handler service */
  Handler: "handler",

  /** Router is a Router service */
  Router: "router",

  /** Broker is a Broker service */
  Broker: "broker"
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,