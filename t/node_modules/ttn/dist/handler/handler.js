"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HandlerClient = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _sourceMapSupport2 = require("source-map-support");

var _discovery = require("../discovery");

var _applications = require("../applications");

var _data = require("../data");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport2.install)(); // Copyright Â© 2017 The Things Network
// Use of this source code is governed by the MIT license that can be found in the LICENSE file.

// Necessary to make gRPC work
process.env.GRPC_SSL_CIPHER_SUITES = _utils.MODERN_CIPHER_SUITES;

/**
 * `Handler` is a  client for The Things Network handler APIs.
 * It can be used to get data from an application or to manage devices.
 *
 * Example:
 * ```
 * const handler = new Handler("my-app-id", "my-app-access-key")
 * ```
 */

var HandlerClient = exports.HandlerClient = function () {

  /** @private */

  /** @private */
  function HandlerClient(appID, appAccessKey, opts) {
    (0, _classCallCheck3.default)(this, HandlerClient);

    this.appID = appID;
    this.appAccessKey = appAccessKey;
    this.discoveryOptions = opts;
  }

  /**
   * `open` opens the client to the handler.
   */


  /** @private */


  /** @private */


  (0, _createClass3.default)(HandlerClient, [{
    key: "open",
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var discovery;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.announcement) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this);

              case 2:
                discovery = new _discovery.Discovery(this.discoveryOptions);
                _context.next = 5;
                return discovery.getByAppID(this.appID);

              case 5:
                this.announcement = _context.sent;
                return _context.abrupt("return", this);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function open() {
        return _ref.apply(this, arguments);
      }

      return open;
    }()

    /**
     * Open a data client that can be used to receive live application data
     */

  }, {
    key: "data",
    value: function data() {
      if (!this.announcement) {
        throw new Error("No handler configured, call open()!");
      }

      return new _data.DataClient(this.appID, this.appAccessKey, this.announcement.mqttAddress);
    }

    /**
     * Open a application manager that can be used to manage the settings and devices of the
     * application.
     */

  }, {
    key: "application",
    value: function application() {
      if (!this.announcement) {
        throw new Error("No handler configured, call discover() or configure() first!");
      }

      return new _applications.ApplicationClient(this.appID, this.appAccessKey, this.announcement.netAddress, this.announcement.certificate);
    }
  }]);
  return HandlerClient;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYW5kbGVyL2hhbmRsZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIkdSUENfU1NMX0NJUEhFUl9TVUlURVMiLCJNT0RFUk5fQ0lQSEVSX1NVSVRFUyIsIkhhbmRsZXJDbGllbnQiLCJhcHBJRCIsImFwcEFjY2Vzc0tleSIsIm9wdHMiLCJkaXNjb3ZlcnlPcHRpb25zIiwiYW5ub3VuY2VtZW50IiwiZGlzY292ZXJ5IiwiRGlzY292ZXJ5IiwiZ2V0QnlBcHBJRCIsIkVycm9yIiwiRGF0YUNsaWVudCIsIm1xdHRBZGRyZXNzIiwiQXBwbGljYXRpb25DbGllbnQiLCJuZXRBZGRyZXNzIiwiY2VydGlmaWNhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQTs7QUFHQTs7QUFDQTs7QUFFQTs7OzttQ0FYQTtBQUNBOztBQVlBO0FBQ0FBLFFBQVFDLEdBQVIsQ0FBWUMsc0JBQVosR0FBcUNDLDJCQUFyQzs7QUFFQTs7Ozs7Ozs7OztJQVNhQyxhLFdBQUFBLGE7O0FBT1g7O0FBTkE7QUFZQSx5QkFBYUMsS0FBYixFQUE2QkMsWUFBN0IsRUFBb0RDLElBQXBELEVBQXFGO0FBQUE7O0FBQ25GLFNBQUtGLEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JBLFlBQXBCO0FBQ0EsU0FBS0UsZ0JBQUwsR0FBd0JELElBQXhCO0FBQ0Q7O0FBRUQ7Ozs7O0FBVEE7OztBQU5BOzs7Ozs7Ozs7Ozs7cUJBbUJNLEtBQUtFLFk7Ozs7O2lEQUNBLEk7OztBQUdIQyx5QixHQUFZLElBQUlDLG9CQUFKLENBQWMsS0FBS0gsZ0JBQW5CLEM7O3VCQUNRRSxVQUFVRSxVQUFWLENBQXFCLEtBQUtQLEtBQTFCLEM7OztBQUExQixxQkFBS0ksWTtpREFDRSxJOzs7Ozs7Ozs7Ozs7Ozs7OztBQUdUOzs7Ozs7MkJBR3FCO0FBQ25CLFVBQUksQ0FBQyxLQUFLQSxZQUFWLEVBQXdCO0FBQ3RCLGNBQU0sSUFBSUksS0FBSixDQUFVLHFDQUFWLENBQU47QUFDRDs7QUFFRCxhQUFPLElBQUlDLGdCQUFKLENBQWUsS0FBS1QsS0FBcEIsRUFBMkIsS0FBS0MsWUFBaEMsRUFBOEMsS0FBS0csWUFBTCxDQUFrQk0sV0FBaEUsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7O2tDQUltQztBQUNqQyxVQUFJLENBQUMsS0FBS04sWUFBVixFQUF3QjtBQUN0QixjQUFNLElBQUlJLEtBQUosQ0FBVSw4REFBVixDQUFOO0FBQ0Q7O0FBRUQsYUFBTyxJQUFJRywrQkFBSixDQUFzQixLQUFLWCxLQUEzQixFQUFrQyxLQUFLQyxZQUF2QyxFQUFxRCxLQUFLRyxZQUFMLENBQWtCUSxVQUF2RSxFQUFtRixLQUFLUixZQUFMLENBQWtCUyxXQUFyRyxDQUFQO0FBQ0QiLCJmaWxlIjoiaGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCDCqSAyMDE3IFRoZSBUaGluZ3MgTmV0d29ya1xuLy8gVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgdGhlIE1JVCBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUuXG5cbi8vIEBmbG93XG5cbmltcG9ydCB7IERpc2NvdmVyeSB9IGZyb20gXCIuLi9kaXNjb3ZlcnlcIlxuaW1wb3J0IHR5cGUgeyBEaXNjb3ZlcnlPcHRpb25zLCBBbm5vdW5jZW1lbnQgfSBmcm9tIFwiLi4vZGlzY292ZXJ5XCJcblxuaW1wb3J0IHsgQXBwbGljYXRpb25DbGllbnQgfSBmcm9tIFwiLi4vYXBwbGljYXRpb25zXCJcbmltcG9ydCB7IERhdGFDbGllbnQgfSBmcm9tIFwiLi4vZGF0YVwiXG5cbmltcG9ydCB7IE1PREVSTl9DSVBIRVJfU1VJVEVTIH0gZnJvbSBcIi4uL3V0aWxzXCJcblxuLy8gTmVjZXNzYXJ5IHRvIG1ha2UgZ1JQQyB3b3JrXG5wcm9jZXNzLmVudi5HUlBDX1NTTF9DSVBIRVJfU1VJVEVTID0gTU9ERVJOX0NJUEhFUl9TVUlURVNcblxuLyoqXG4gKiBgSGFuZGxlcmAgaXMgYSAgY2xpZW50IGZvciBUaGUgVGhpbmdzIE5ldHdvcmsgaGFuZGxlciBBUElzLlxuICogSXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGRhdGEgZnJvbSBhbiBhcHBsaWNhdGlvbiBvciB0byBtYW5hZ2UgZGV2aWNlcy5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiBjb25zdCBoYW5kbGVyID0gbmV3IEhhbmRsZXIoXCJteS1hcHAtaWRcIiwgXCJteS1hcHAtYWNjZXNzLWtleVwiKVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBIYW5kbGVyQ2xpZW50IHtcbiAgLyoqIEBwcml2YXRlICovXG4gIGFwcElEIDogc3RyaW5nXG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGFwcEFjY2Vzc0tleSA6IHN0cmluZ1xuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBkaXNjb3ZlcnlPcHRpb25zIDogP0Rpc2NvdmVyeU9wdGlvbnNcblxuICAvKiogQHByaXZhdGUgKi9cbiAgYW5ub3VuY2VtZW50IDogP0Fubm91bmNlbWVudFxuXG4gIGNvbnN0cnVjdG9yIChhcHBJRCA6IHN0cmluZywgYXBwQWNjZXNzS2V5IDogc3RyaW5nLCBvcHRzIDogP0Rpc2NvdmVyeU9wdGlvbnMpIDogdm9pZCB7XG4gICAgdGhpcy5hcHBJRCA9IGFwcElEXG4gICAgdGhpcy5hcHBBY2Nlc3NLZXkgPSBhcHBBY2Nlc3NLZXlcbiAgICB0aGlzLmRpc2NvdmVyeU9wdGlvbnMgPSBvcHRzXG4gIH1cblxuICAvKipcbiAgICogYG9wZW5gIG9wZW5zIHRoZSBjbGllbnQgdG8gdGhlIGhhbmRsZXIuXG4gICAqL1xuICBhc3luYyBvcGVuICgpIDogUHJvbWlzZTxIYW5kbGVyQ2xpZW50PiB7XG4gICAgaWYgKHRoaXMuYW5ub3VuY2VtZW50KSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGNvbnN0IGRpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkodGhpcy5kaXNjb3ZlcnlPcHRpb25zKVxuICAgIHRoaXMuYW5ub3VuY2VtZW50ID0gYXdhaXQgZGlzY292ZXJ5LmdldEJ5QXBwSUQodGhpcy5hcHBJRClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gYSBkYXRhIGNsaWVudCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlY2VpdmUgbGl2ZSBhcHBsaWNhdGlvbiBkYXRhXG4gICAqL1xuICBkYXRhICgpIDogRGF0YUNsaWVudCB7XG4gICAgaWYgKCF0aGlzLmFubm91bmNlbWVudCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gaGFuZGxlciBjb25maWd1cmVkLCBjYWxsIG9wZW4oKSFcIilcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERhdGFDbGllbnQodGhpcy5hcHBJRCwgdGhpcy5hcHBBY2Nlc3NLZXksIHRoaXMuYW5ub3VuY2VtZW50Lm1xdHRBZGRyZXNzKVxuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gYSBhcHBsaWNhdGlvbiBtYW5hZ2VyIHRoYXQgY2FuIGJlIHVzZWQgdG8gbWFuYWdlIHRoZSBzZXR0aW5ncyBhbmQgZGV2aWNlcyBvZiB0aGVcbiAgICogYXBwbGljYXRpb24uXG4gICAqL1xuICBhcHBsaWNhdGlvbiAoKSA6IEFwcGxpY2F0aW9uQ2xpZW50IHtcbiAgICBpZiAoIXRoaXMuYW5ub3VuY2VtZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBoYW5kbGVyIGNvbmZpZ3VyZWQsIGNhbGwgZGlzY292ZXIoKSBvciBjb25maWd1cmUoKSBmaXJzdCFcIilcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFwcGxpY2F0aW9uQ2xpZW50KHRoaXMuYXBwSUQsIHRoaXMuYXBwQWNjZXNzS2V5LCB0aGlzLmFubm91bmNlbWVudC5uZXRBZGRyZXNzLCB0aGlzLmFubm91bmNlbWVudC5jZXJ0aWZpY2F0ZSlcbiAgfVxufVxuIl19